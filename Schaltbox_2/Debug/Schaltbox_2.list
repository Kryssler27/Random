
Schaltbox_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080040dc  080040dc  000050dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004168  08004168  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004168  08004168  00005168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004170  08004170  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004170  08004170  00005170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004174  08004174  00005174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004178  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000005c  080041d4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080041d4  00006278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cacf  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce2  00000000  00000000  00012b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00014840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a1  00000000  00000000  00015488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001634b  00000000  00000000  00015e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de30  00000000  00000000  0002c174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d61c  00000000  00000000  00039fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c75c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003928  00000000  00000000  000c7604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000caf2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040c4 	.word	0x080040c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080040c4 	.word	0x080040c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ErrorLoop.1>:
		HAL_Delay(500); \
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1); \
		HAL_Delay(500); \
	}

	void ErrorLoop(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	f8c7 c004 	str.w	ip, [r7, #4]
		while (1) {
			TOGGLE_ERROR();
 80005c6:	2102      	movs	r1, #2
 80005c8:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <ErrorLoop.1+0x2c>)
 80005ca:	f001 f89e 	bl	800170a <HAL_GPIO_TogglePin>
 80005ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005d2:	f000 fd1d 	bl	8001010 <HAL_Delay>
 80005d6:	2102      	movs	r1, #2
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <ErrorLoop.1+0x2c>)
 80005da:	f001 f896 	bl	800170a <HAL_GPIO_TogglePin>
 80005de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e2:	f000 fd15 	bl	8001010 <HAL_Delay>
 80005e6:	e7ee      	b.n	80005c6 <ErrorLoop.1+0xa>
 80005e8:	40020000 	.word	0x40020000

080005ec <main>:
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	@ 0x40
 80005f0:	af00      	add	r7, sp, #0
int main(void)
 80005f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_Init();
 80005f8:	f000 fc98 	bl	8000f2c <HAL_Init>
  SystemClock_Config();
 80005fc:	f000 f992 	bl	8000924 <SystemClock_Config>
  MX_GPIO_Init();
 8000600:	f000 fa74 	bl	8000aec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000604:	f000 fa48 	bl	8000a98 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000608:	f000 f9f6 	bl	80009f8 <MX_TIM1_Init>
  HAL_Delay(5000);
 800060c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000610:	f000 fcfe 	bl	8001010 <HAL_Delay>
  HAL_TIM_Base_Start(&htim1);
 8000614:	48a4      	ldr	r0, [pc, #656]	@ (80008a8 <main+0x2bc>)
 8000616:	f001 fd3b 	bl	8002090 <HAL_TIM_Base_Start>
  uint16_t CalSetup[5] ={0,0,0,0,0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	811a      	strh	r2, [r3, #8]
		HAL_UART_Transmit(&huart1, (uint8_t*)cmd, len, 100);
		HAL_Delay(CMD_DELAY_MS);
	}

	// Initialization
	HAL_Delay(5000);
 8000626:	f241 3088 	movw	r0, #5000	@ 0x1388
 800062a:	f000 fcf1 	bl	8001010 <HAL_Delay>
	HAL_TIM_Base_Start(&htim1);
 800062e:	489e      	ldr	r0, [pc, #632]	@ (80008a8 <main+0x2bc>)
 8000630:	f001 fd2e 	bl	8002090 <HAL_TIM_Base_Start>

	// Clear
	SendCommand("\r", 1);
 8000634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000638:	469c      	mov	ip, r3
 800063a:	2101      	movs	r1, #1
 800063c:	489b      	ldr	r0, [pc, #620]	@ (80008ac <main+0x2c0>)
 800063e:	f000 f94f 	bl	80008e0 <SendCommand.0>
	SendCommand("RGVN\r", 5);
 8000642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000646:	469c      	mov	ip, r3
 8000648:	2105      	movs	r1, #5
 800064a:	4899      	ldr	r0, [pc, #612]	@ (80008b0 <main+0x2c4>)
 800064c:	f000 f948 	bl	80008e0 <SendCommand.0>

	// Parse RGVN response
	if (strncmp((char *)&rx_buff[5], "15399", 5) == 0) {
 8000650:	2205      	movs	r2, #5
 8000652:	4998      	ldr	r1, [pc, #608]	@ (80008b4 <main+0x2c8>)
 8000654:	4898      	ldr	r0, [pc, #608]	@ (80008b8 <main+0x2cc>)
 8000656:	f003 f8ad 	bl	80037b4 <strncmp>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d11b      	bne.n	8000698 <main+0xac>
		for (int i = 0; i < 5; i++) CalSetup[i] = 1000 + i * 500;
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000664:	e014      	b.n	8000690 <main+0xa4>
 8000666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000668:	b29b      	uxth	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	0152      	lsls	r2, r2, #5
 800066e:	1ad2      	subs	r2, r2, r3
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	4413      	add	r3, r2
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	b29b      	uxth	r3, r3
 8000678:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800067c:	b29a      	uxth	r2, r3
 800067e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	3340      	adds	r3, #64	@ 0x40
 8000684:	443b      	add	r3, r7
 8000686:	f823 2c28 	strh.w	r2, [r3, #-40]
 800068a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800068c:	3301      	adds	r3, #1
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000692:	2b04      	cmp	r3, #4
 8000694:	dde7      	ble.n	8000666 <main+0x7a>
 8000696:	e01e      	b.n	80006d6 <main+0xea>
	} else if (strncmp((char *)&rx_buff[5], "15400", 5) == 0) {
 8000698:	2205      	movs	r2, #5
 800069a:	4988      	ldr	r1, [pc, #544]	@ (80008bc <main+0x2d0>)
 800069c:	4886      	ldr	r0, [pc, #536]	@ (80008b8 <main+0x2cc>)
 800069e:	f003 f889 	bl	80037b4 <strncmp>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d111      	bne.n	80006cc <main+0xe0>
		for (int i = 0; i < 5; i++) CalSetup[i] = 2000;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80006ac:	e00a      	b.n	80006c4 <main+0xd8>
 80006ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	3340      	adds	r3, #64	@ 0x40
 80006b4:	443b      	add	r3, r7
 80006b6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006ba:	f823 2c28 	strh.w	r2, [r3, #-40]
 80006be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006c0:	3301      	adds	r3, #1
 80006c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80006c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	ddf1      	ble.n	80006ae <main+0xc2>
 80006ca:	e004      	b.n	80006d6 <main+0xea>
	} else {
		ErrorLoop();
 80006cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d0:	469c      	mov	ip, r3
 80006d2:	f7ff ff73 	bl	80005bc <ErrorLoop.1>
	}

	// Check RLMDXR
	SendCommand("RLMDXR\r", 7);
 80006d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006da:	469c      	mov	ip, r3
 80006dc:	2107      	movs	r1, #7
 80006de:	4878      	ldr	r0, [pc, #480]	@ (80008c0 <main+0x2d4>)
 80006e0:	f000 f8fe 	bl	80008e0 <SendCommand.0>
	if (rx_buff[7] != 170) {
 80006e4:	4b77      	ldr	r3, [pc, #476]	@ (80008c4 <main+0x2d8>)
 80006e6:	79db      	ldrb	r3, [r3, #7]
 80006e8:	2baa      	cmp	r3, #170	@ 0xaa
 80006ea:	d004      	beq.n	80006f6 <main+0x10a>
		ErrorLoop();
 80006ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f0:	469c      	mov	ip, r3
 80006f2:	f7ff ff63 	bl	80005bc <ErrorLoop.1>
	}

	// Check RGM
	SendCommand("RGM\r", 4);
 80006f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fa:	469c      	mov	ip, r3
 80006fc:	2104      	movs	r1, #4
 80006fe:	4872      	ldr	r0, [pc, #456]	@ (80008c8 <main+0x2dc>)
 8000700:	f000 f8ee 	bl	80008e0 <SendCommand.0>
	if (rx_buff[8] & 0b00001) {
 8000704:	4b6f      	ldr	r3, [pc, #444]	@ (80008c4 <main+0x2d8>)
 8000706:	7a1b      	ldrb	r3, [r3, #8]
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	2b00      	cmp	r3, #0
 800070e:	d004      	beq.n	800071a <main+0x12e>
		ErrorLoop();
 8000710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000714:	469c      	mov	ip, r3
 8000716:	f7ff ff51 	bl	80005bc <ErrorLoop.1>
	}

	// Check RLVA
	SendCommand("RLVA\r", 5);
 800071a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071e:	469c      	mov	ip, r3
 8000720:	2105      	movs	r1, #5
 8000722:	486a      	ldr	r0, [pc, #424]	@ (80008cc <main+0x2e0>)
 8000724:	f000 f8dc 	bl	80008e0 <SendCommand.0>
	if (!(rx_buff[5] == 32 && rx_buff[6] == 32 && rx_buff[7] == '0')) {
 8000728:	4b66      	ldr	r3, [pc, #408]	@ (80008c4 <main+0x2d8>)
 800072a:	795b      	ldrb	r3, [r3, #5]
 800072c:	2b20      	cmp	r3, #32
 800072e:	d107      	bne.n	8000740 <main+0x154>
 8000730:	4b64      	ldr	r3, [pc, #400]	@ (80008c4 <main+0x2d8>)
 8000732:	799b      	ldrb	r3, [r3, #6]
 8000734:	2b20      	cmp	r3, #32
 8000736:	d103      	bne.n	8000740 <main+0x154>
 8000738:	4b62      	ldr	r3, [pc, #392]	@ (80008c4 <main+0x2d8>)
 800073a:	79db      	ldrb	r3, [r3, #7]
 800073c:	2b30      	cmp	r3, #48	@ 0x30
 800073e:	d004      	beq.n	800074a <main+0x15e>
		ErrorLoop();
 8000740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000744:	469c      	mov	ip, r3
 8000746:	f7ff ff39 	bl	80005bc <ErrorLoop.1>
	}

	// GPIO safety checks
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)) HAL_Delay(4000), ErrorLoop();
 800074a:	2108      	movs	r1, #8
 800074c:	4860      	ldr	r0, [pc, #384]	@ (80008d0 <main+0x2e4>)
 800074e:	f000 ffab 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <main+0x17e>
 8000758:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800075c:	f000 fc58 	bl	8001010 <HAL_Delay>
 8000760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000764:	469c      	mov	ip, r3
 8000766:	f7ff ff29 	bl	80005bc <ErrorLoop.1>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)) HAL_Delay(5000), ErrorLoop();
 800076a:	2110      	movs	r1, #16
 800076c:	4858      	ldr	r0, [pc, #352]	@ (80008d0 <main+0x2e4>)
 800076e:	f000 ff9b 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d008      	beq.n	800078a <main+0x19e>
 8000778:	f241 3088 	movw	r0, #5000	@ 0x1388
 800077c:	f000 fc48 	bl	8001010 <HAL_Delay>
 8000780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000784:	469c      	mov	ip, r3
 8000786:	f7ff ff19 	bl	80005bc <ErrorLoop.1>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)) HAL_Delay(6000), ErrorLoop();
 800078a:	2120      	movs	r1, #32
 800078c:	4850      	ldr	r0, [pc, #320]	@ (80008d0 <main+0x2e4>)
 800078e:	f000 ff8b 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d008      	beq.n	80007aa <main+0x1be>
 8000798:	f241 7070 	movw	r0, #6000	@ 0x1770
 800079c:	f000 fc38 	bl	8001010 <HAL_Delay>
 80007a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a4:	469c      	mov	ip, r3
 80007a6:	f7ff ff09 	bl	80005bc <ErrorLoop.1>

	// Main loop variables
	int prevCal = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	637b      	str	r3, [r7, #52]	@ 0x34
	char tx_buff[20];

	while (1) {
		// Determine input pin
		int PinNr = 8, PinNumber = 0;
 80007ae:	2308      	movs	r3, #8
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007b2:	2300      	movs	r3, #0
 80007b4:	633b      	str	r3, [r7, #48]	@ 0x30
		for (int i = 0; i < 5; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007ba:	e012      	b.n	80007e2 <main+0x1f6>
			if (HAL_GPIO_ReadPin(GPIOA, PinNr << i)) {
 80007bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	4842      	ldr	r0, [pc, #264]	@ (80008d4 <main+0x2e8>)
 80007ca:	f000 ff6d 	bl	80016a8 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <main+0x1f0>
				PinNumber = i + 1;
 80007d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d6:	3301      	adds	r3, #1
 80007d8:	633b      	str	r3, [r7, #48]	@ 0x30
				break;
 80007da:	e005      	b.n	80007e8 <main+0x1fc>
		for (int i = 0; i < 5; i++) {
 80007dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007de:	3301      	adds	r3, #1
 80007e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	dde9      	ble.n	80007bc <main+0x1d0>
			}
		}

		// Update calibration
		if (prevCal != CalSetup[PinNumber]) {
 80007e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	3340      	adds	r3, #64	@ 0x40
 80007ee:	443b      	add	r3, r7
 80007f0:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80007f4:	461a      	mov	r2, r3
 80007f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d02b      	beq.n	8000854 <main+0x268>
			prevCal = CalSetup[PinNumber];
 80007fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	3340      	adds	r3, #64	@ 0x40
 8000802:	443b      	add	r3, r7
 8000804:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8000808:	637b      	str	r3, [r7, #52]	@ 0x34
			snprintf(tx_buff, sizeof(tx_buff), "RLCT %d\r", prevCal);
 800080a:	1d38      	adds	r0, r7, #4
 800080c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800080e:	4a32      	ldr	r2, [pc, #200]	@ (80008d8 <main+0x2ec>)
 8000810:	2114      	movs	r1, #20
 8000812:	f002 ff91 	bl	8003738 <sniprintf>

			HAL_UART_Transmit(&huart1, "\r", 1, 100);
 8000816:	2364      	movs	r3, #100	@ 0x64
 8000818:	2201      	movs	r2, #1
 800081a:	4924      	ldr	r1, [pc, #144]	@ (80008ac <main+0x2c0>)
 800081c:	482f      	ldr	r0, [pc, #188]	@ (80008dc <main+0x2f0>)
 800081e:	f001 ff37 	bl	8002690 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000822:	2064      	movs	r0, #100	@ 0x64
 8000824:	f000 fbf4 	bl	8001010 <HAL_Delay>
			HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_buff, RX_BUFF_SIZE);
 8000828:	221e      	movs	r2, #30
 800082a:	4926      	ldr	r1, [pc, #152]	@ (80008c4 <main+0x2d8>)
 800082c:	482b      	ldr	r0, [pc, #172]	@ (80008dc <main+0x2f0>)
 800082e:	f001 ffba 	bl	80027a6 <HAL_UARTEx_ReceiveToIdle_IT>
			HAL_Delay(CMD_DELAY_MS);
 8000832:	200a      	movs	r0, #10
 8000834:	f000 fbec 	bl	8001010 <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t*)tx_buff, strlen(tx_buff), 100);
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fcd0 	bl	80001e0 <strlen>
 8000840:	4603      	mov	r3, r0
 8000842:	b29a      	uxth	r2, r3
 8000844:	1d39      	adds	r1, r7, #4
 8000846:	2364      	movs	r3, #100	@ 0x64
 8000848:	4824      	ldr	r0, [pc, #144]	@ (80008dc <main+0x2f0>)
 800084a:	f001 ff21 	bl	8002690 <HAL_UART_Transmit>
			HAL_Delay(CMD_DELAY_MS);
 800084e:	200a      	movs	r0, #10
 8000850:	f000 fbde 	bl	8001010 <HAL_Delay>
		}

		// Fire condition
		if (!HAL_GPIO_ReadPin(uC_LON_GPIO_Port, uC_LON_Pin)) {
 8000854:	2108      	movs	r1, #8
 8000856:	481e      	ldr	r0, [pc, #120]	@ (80008d0 <main+0x2e4>)
 8000858:	f000 ff26 	bl	80016a8 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1a5      	bne.n	80007ae <main+0x1c2>
			if (!HAL_GPIO_ReadPin(Fire_IN_1_GPIO_Port, Fire_IN_1_Pin)) {
 8000862:	2102      	movs	r1, #2
 8000864:	481a      	ldr	r0, [pc, #104]	@ (80008d0 <main+0x2e4>)
 8000866:	f000 ff1f 	bl	80016a8 <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d19e      	bne.n	80007ae <main+0x1c2>
				HAL_GPIO_WritePin(uC_MDMOD_GPIO_Port, uC_MDMOD_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000876:	4816      	ldr	r0, [pc, #88]	@ (80008d0 <main+0x2e4>)
 8000878:	f000 ff2e 	bl	80016d8 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <main+0x2bc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	@ 0x24
				while (__HAL_TIM_GET_COUNTER(&htim1) < 100);
 8000884:	bf00      	nop
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <main+0x2bc>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088c:	2b63      	cmp	r3, #99	@ 0x63
 800088e:	d9fa      	bls.n	8000886 <main+0x29a>
				HAL_GPIO_WritePin(uC_MDMOD_GPIO_Port , uC_MDMOD_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000896:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <main+0x2e4>)
 8000898:	f000 ff1e 	bl	80016d8 <HAL_GPIO_WritePin>
				HAL_Delay(2000);
 800089c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008a0:	f000 fbb6 	bl	8001010 <HAL_Delay>
	while (1) {
 80008a4:	e783      	b.n	80007ae <main+0x1c2>
 80008a6:	bf00      	nop
 80008a8:	20000078 	.word	0x20000078
 80008ac:	080040dc 	.word	0x080040dc
 80008b0:	080040e0 	.word	0x080040e0
 80008b4:	080040e8 	.word	0x080040e8
 80008b8:	2000010d 	.word	0x2000010d
 80008bc:	080040f0 	.word	0x080040f0
 80008c0:	080040f8 	.word	0x080040f8
 80008c4:	20000108 	.word	0x20000108
 80008c8:	08004100 	.word	0x08004100
 80008cc:	08004108 	.word	0x08004108
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40020000 	.word	0x40020000
 80008d8:	08004110 	.word	0x08004110
 80008dc:	200000c0 	.word	0x200000c0

080008e0 <SendCommand.0>:
	void SendCommand(const char *cmd, uint16_t len) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	460b      	mov	r3, r1
 80008ea:	817b      	strh	r3, [r7, #10]
 80008ec:	f8c7 c004 	str.w	ip, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_buff, RX_BUFF_SIZE);
 80008f0:	221e      	movs	r2, #30
 80008f2:	490a      	ldr	r1, [pc, #40]	@ (800091c <SendCommand.0+0x3c>)
 80008f4:	480a      	ldr	r0, [pc, #40]	@ (8000920 <SendCommand.0+0x40>)
 80008f6:	f001 ff56 	bl	80027a6 <HAL_UARTEx_ReceiveToIdle_IT>
		HAL_Delay(CMD_DELAY_MS);
 80008fa:	200a      	movs	r0, #10
 80008fc:	f000 fb88 	bl	8001010 <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)cmd, len, 100);
 8000900:	897a      	ldrh	r2, [r7, #10]
 8000902:	2364      	movs	r3, #100	@ 0x64
 8000904:	68f9      	ldr	r1, [r7, #12]
 8000906:	4806      	ldr	r0, [pc, #24]	@ (8000920 <SendCommand.0+0x40>)
 8000908:	f001 fec2 	bl	8002690 <HAL_UART_Transmit>
		HAL_Delay(CMD_DELAY_MS);
 800090c:	200a      	movs	r0, #10
 800090e:	f000 fb7f 	bl	8001010 <HAL_Delay>
	}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000108 	.word	0x20000108
 8000920:	200000c0 	.word	0x200000c0

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b094      	sub	sp, #80	@ 0x50
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2230      	movs	r2, #48	@ 0x30
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f002 ff36 	bl	80037a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <SystemClock_Config+0xcc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	4a27      	ldr	r2, [pc, #156]	@ (80009f0 <SystemClock_Config+0xcc>)
 8000952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000956:	6413      	str	r3, [r2, #64]	@ 0x40
 8000958:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <SystemClock_Config+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <SystemClock_Config+0xd0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000970:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <SystemClock_Config+0xd0>)
 8000972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000998:	230c      	movs	r3, #12
 800099a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800099c:	2360      	movs	r3, #96	@ 0x60
 800099e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a4:	2307      	movs	r3, #7
 80009a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fec7 	bl	8001740 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009b8:	f000 f96a 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2101      	movs	r1, #1
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 f929 	bl	8001c30 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009e4:	f000 f954 	bl	8000c90 <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3750      	adds	r7, #80	@ 0x50
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	@ (8000a90 <MX_TIM1_Init+0x98>)
 8000a16:	4a1f      	ldr	r2, [pc, #124]	@ (8000a94 <MX_TIM1_Init+0x9c>)
 8000a18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <MX_TIM1_Init+0x98>)
 8000a1c:	2231      	movs	r2, #49	@ 0x31
 8000a1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <MX_TIM1_Init+0x98>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <MX_TIM1_Init+0x98>)
 8000a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <MX_TIM1_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_TIM1_Init+0x98>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <MX_TIM1_Init+0x98>)
 8000a3c:	2280      	movs	r2, #128	@ 0x80
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a40:	4813      	ldr	r0, [pc, #76]	@ (8000a90 <MX_TIM1_Init+0x98>)
 8000a42:	f001 fad5 	bl	8001ff0 <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f000 f920 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <MX_TIM1_Init+0x98>)
 8000a5e:	f001 fb71 	bl	8002144 <HAL_TIM_ConfigClockSource>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a68:	f000 f912 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_TIM1_Init+0x98>)
 8000a7a:	f001 fd4b 	bl	8002514 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a84:	f000 f904 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000078 	.word	0x20000078
 8000a94:	40010000 	.word	0x40010000

08000a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <MX_USART1_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	f001 fd8e 	bl	80025f0 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f8d9 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000c0 	.word	0x200000c0
 8000ae8:	40011000 	.word	0x40011000

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b55      	ldr	r3, [pc, #340]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a54      	ldr	r2, [pc, #336]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b52      	ldr	r3, [pc, #328]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b4e      	ldr	r3, [pc, #312]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a4d      	ldr	r2, [pc, #308]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b47      	ldr	r3, [pc, #284]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a46      	ldr	r2, [pc, #280]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b44      	ldr	r3, [pc, #272]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b40      	ldr	r3, [pc, #256]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b3d      	ldr	r3, [pc, #244]	@ (8000c5c <MX_GPIO_Init+0x170>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILOCK0_uC_GPIO_Port, ILOCK0_uC_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b78:	4839      	ldr	r0, [pc, #228]	@ (8000c60 <MX_GPIO_Init+0x174>)
 8000b7a:	f000 fdad 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uC_Status_1_Pin|uC_Status_2_Pin|uC_Status_3_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2107      	movs	r1, #7
 8000b82:	4838      	ldr	r0, [pc, #224]	@ (8000c64 <MX_GPIO_Init+0x178>)
 8000b84:	f000 fda8 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|uC_MDMOD_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000b8e:	4836      	ldr	r0, [pc, #216]	@ (8000c68 <MX_GPIO_Init+0x17c>)
 8000b90:	f000 fda2 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ILOCK0_uC_Pin */
  GPIO_InitStruct.Pin = ILOCK0_uC_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ILOCK0_uC_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	482c      	ldr	r0, [pc, #176]	@ (8000c60 <MX_GPIO_Init+0x174>)
 8000bae:	f000 fbf7 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uC_Status_1_Pin */
  GPIO_InitStruct.Pin = uC_Status_1_Pin;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uC_Status_1_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4826      	ldr	r0, [pc, #152]	@ (8000c64 <MX_GPIO_Init+0x178>)
 8000bca:	f000 fbe9 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_Status_2_Pin uC_Status_3_Pin */
  GPIO_InitStruct.Pin = uC_Status_2_Pin|uC_Status_3_Pin;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	481f      	ldr	r0, [pc, #124]	@ (8000c64 <MX_GPIO_Init+0x178>)
 8000be6:	f000 fbdb 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Rotate_pos_1_Pin Rotate_pos_2_Pin Rotate_pos_3_Pin Rotate_pos_4_Pin */
  GPIO_InitStruct.Pin = Rotate_pos_1_Pin|Rotate_pos_2_Pin|Rotate_pos_3_Pin|Rotate_pos_4_Pin;
 8000bea:	23f0      	movs	r3, #240	@ 0xf0
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4819      	ldr	r0, [pc, #100]	@ (8000c64 <MX_GPIO_Init+0x178>)
 8000bfe:	f000 fbcf 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Fire_IN_2_Pin Fire_IN_1_Pin uC_LON_Pin uC_LACTIVE_Pin
                           uC_SYSOK_Pin uC_LOFF_Pin */
  GPIO_InitStruct.Pin = Fire_IN_2_Pin|Fire_IN_1_Pin|uC_LON_Pin|uC_LACTIVE_Pin
 8000c02:	237b      	movs	r3, #123	@ 0x7b
 8000c04:	617b      	str	r3, [r7, #20]
                          |uC_SYSOK_Pin|uC_LOFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4814      	ldr	r0, [pc, #80]	@ (8000c68 <MX_GPIO_Init+0x17c>)
 8000c16:	f000 fbc3 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c1a:	2380      	movs	r3, #128	@ 0x80
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <MX_GPIO_Init+0x17c>)
 8000c32:	f000 fbb5 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uC_MDMOD_Pin */
  GPIO_InitStruct.Pin = uC_MDMOD_Pin;
 8000c36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uC_MDMOD_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <MX_GPIO_Init+0x17c>)
 8000c50:	f000 fba6 	bl	80013a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	@ 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020400 	.word	0x40020400

08000c6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_buff, 30); //You need to toggle a breakpoint on this line!
 8000c74:	221e      	movs	r2, #30
 8000c76:	4904      	ldr	r1, [pc, #16]	@ (8000c88 <HAL_UART_RxCpltCallback+0x1c>)
 8000c78:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <HAL_UART_RxCpltCallback+0x20>)
 8000c7a:	f001 fd94 	bl	80027a6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000108 	.word	0x20000108
 8000c8c:	200000c0 	.word	0x200000c0

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	@ (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d2c <HAL_TIM_Base_MspInit+0x3c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d10d      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <HAL_TIM_Base_MspInit+0x40>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	4a09      	ldr	r2, [pc, #36]	@ (8000d30 <HAL_TIM_Base_MspInit+0x40>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <HAL_TIM_Base_MspInit+0x40>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40010000 	.word	0x40010000
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc8 <HAL_UART_MspInit+0x94>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d134      	bne.n	8000dc0 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <HAL_UART_MspInit+0x98>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dcc <HAL_UART_MspInit+0x98>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d66:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <HAL_UART_MspInit+0x98>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <HAL_UART_MspInit+0x98>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <HAL_UART_MspInit+0x98>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <HAL_UART_MspInit+0x98>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d8e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da0:	2307      	movs	r3, #7
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4809      	ldr	r0, [pc, #36]	@ (8000dd0 <HAL_UART_MspInit+0x9c>)
 8000dac:	f000 faf8 	bl	80013a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	2025      	movs	r0, #37	@ 0x25
 8000db6:	f000 fa2a 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dba:	2025      	movs	r0, #37	@ 0x25
 8000dbc:	f000 fa43 	bl	8001246 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	@ 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40011000 	.word	0x40011000
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <NMI_Handler+0x4>

08000ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <MemManage_Handler+0x4>

08000dec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2a:	f000 f8d1 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <USART1_IRQHandler+0x10>)
 8000e3a:	f001 fd11 	bl	8002860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000c0 	.word	0x200000c0

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f002 fcae 	bl	80037d8 <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20010000 	.word	0x20010000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	20000128 	.word	0x20000128
 8000eb0:	20000278 	.word	0x20000278

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000edc:	f7ff ffea 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f06:	f002 fc6d 	bl	80037e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fb6f 	bl	80005ec <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f1c:	08004178 	.word	0x08004178
  ldr r2, =_sbss
 8000f20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f24:	20000278 	.word	0x20000278

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <HAL_Init+0x40>)
 8000f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_Init+0x40>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_Init+0x40>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f94f 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fe9e 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f967 	bl	8001262 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f92f 	bl	800120e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	2000012c 	.word	0x2000012c

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000012c 	.word	0x2000012c

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001080:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	@ (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db0b      	blt.n	80010e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4907      	ldr	r1, [pc, #28]	@ (80010f4 <__NVIC_EnableIRQ+0x38>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	@ (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	@ (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	@ 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	@ 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f7ff ff8e 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff29 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff3e 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff8e 	bl	800114c <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5d 	bl	80010f8 <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff31 	bl	80010bc <__NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffa2 	bl	80011b4 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001286:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff feb6 	bl	8000ff8 <HAL_GetTick>
 800128c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d008      	beq.n	80012ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e052      	b.n	8001352 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0216 	bic.w	r2, r2, #22
 80012ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <HAL_DMA_Abort+0x62>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0208 	bic.w	r2, r2, #8
 80012ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0201 	bic.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fc:	e013      	b.n	8001326 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012fe:	f7ff fe7b 	bl	8000ff8 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b05      	cmp	r3, #5
 800130a:	d90c      	bls.n	8001326 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2220      	movs	r2, #32
 8001310:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2203      	movs	r2, #3
 8001316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e015      	b.n	8001352 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1e4      	bne.n	80012fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001338:	223f      	movs	r2, #63	@ 0x3f
 800133a:	409a      	lsls	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d004      	beq.n	8001378 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2280      	movs	r2, #128	@ 0x80
 8001372:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e00c      	b.n	8001392 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2205      	movs	r2, #5
 800137c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e159      	b.n	8001670 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8148 	bne.w	800166a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a2 	beq.w	800166a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b57      	ldr	r3, [pc, #348]	@ (8001688 <HAL_GPIO_Init+0x2e8>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	4a56      	ldr	r2, [pc, #344]	@ (8001688 <HAL_GPIO_Init+0x2e8>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001534:	6453      	str	r3, [r2, #68]	@ 0x44
 8001536:	4b54      	ldr	r3, [pc, #336]	@ (8001688 <HAL_GPIO_Init+0x2e8>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a52      	ldr	r2, [pc, #328]	@ (800168c <HAL_GPIO_Init+0x2ec>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a49      	ldr	r2, [pc, #292]	@ (8001690 <HAL_GPIO_Init+0x2f0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x202>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a48      	ldr	r2, [pc, #288]	@ (8001694 <HAL_GPIO_Init+0x2f4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x1fe>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a47      	ldr	r2, [pc, #284]	@ (8001698 <HAL_GPIO_Init+0x2f8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x1fa>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a46      	ldr	r2, [pc, #280]	@ (800169c <HAL_GPIO_Init+0x2fc>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x1f6>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a45      	ldr	r2, [pc, #276]	@ (80016a0 <HAL_GPIO_Init+0x300>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x1f2>
 800158e:	2304      	movs	r3, #4
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 8001592:	2307      	movs	r3, #7
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	@ (800168c <HAL_GPIO_Init+0x2ec>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c2:	4b38      	ldr	r3, [pc, #224]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e6:	4a2f      	ldr	r2, [pc, #188]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ec:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001610:	4a24      	ldr	r2, [pc, #144]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001616:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163a:	4a1a      	ldr	r2, [pc, #104]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001640:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001664:	4a0f      	ldr	r2, [pc, #60]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f aea2 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3724      	adds	r7, #36	@ 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e001      	b.n	80016ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800171c:	887a      	ldrh	r2, [r7, #2]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	041a      	lsls	r2, r3, #16
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43d9      	mvns	r1, r3
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	400b      	ands	r3, r1
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e267      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d075      	beq.n	800184a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800175e:	4b88      	ldr	r3, [pc, #544]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b04      	cmp	r3, #4
 8001768:	d00c      	beq.n	8001784 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176a:	4b85      	ldr	r3, [pc, #532]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001772:	2b08      	cmp	r3, #8
 8001774:	d112      	bne.n	800179c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001776:	4b82      	ldr	r3, [pc, #520]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800177e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001782:	d10b      	bne.n	800179c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	4b7e      	ldr	r3, [pc, #504]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d05b      	beq.n	8001848 <HAL_RCC_OscConfig+0x108>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d157      	bne.n	8001848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e242      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x74>
 80017a6:	4b76      	ldr	r3, [pc, #472]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a75      	ldr	r2, [pc, #468]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e01d      	b.n	80017f0 <HAL_RCC_OscConfig+0xb0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x98>
 80017be:	4b70      	ldr	r3, [pc, #448]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0xb0>
 80017d8:	4b69      	ldr	r3, [pc, #420]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a68      	ldr	r2, [pc, #416]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b66      	ldr	r3, [pc, #408]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a65      	ldr	r2, [pc, #404]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fbfe 	bl	8000ff8 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fbfa 	bl	8000ff8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	@ 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e207      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b5b      	ldr	r3, [pc, #364]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0xc0>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fbea 	bl	8000ff8 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fbe6 	bl	8000ff8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e1f3      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	4b51      	ldr	r3, [pc, #324]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0xe8>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d063      	beq.n	800191e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001856:	4b4a      	ldr	r3, [pc, #296]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001862:	4b47      	ldr	r3, [pc, #284]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800186a:	2b08      	cmp	r3, #8
 800186c:	d11c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186e:	4b44      	ldr	r3, [pc, #272]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187a:	4b41      	ldr	r3, [pc, #260]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_RCC_OscConfig+0x152>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e1c7      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001892:	4b3b      	ldr	r3, [pc, #236]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4937      	ldr	r1, [pc, #220]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a6:	e03a      	b.n	800191e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b0:	4b34      	ldr	r3, [pc, #208]	@ (8001984 <HAL_RCC_OscConfig+0x244>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff fb9f 	bl	8000ff8 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff fb9b 	bl	8000ff8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e1a8      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b28      	ldr	r3, [pc, #160]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4925      	ldr	r1, [pc, #148]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f2:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <HAL_RCC_OscConfig+0x244>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fb7e 	bl	8000ff8 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001900:	f7ff fb7a 	bl	8000ff8 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e187      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d036      	beq.n	8001998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d016      	beq.n	8001960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <HAL_RCC_OscConfig+0x248>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff fb5e 	bl	8000ff8 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff fb5a 	bl	8000ff8 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e167      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <HAL_RCC_OscConfig+0x240>)
 8001954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x200>
 800195e:	e01b      	b.n	8001998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <HAL_RCC_OscConfig+0x248>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001966:	f7ff fb47 	bl	8000ff8 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	e00e      	b.n	800198c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196e:	f7ff fb43 	bl	8000ff8 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d907      	bls.n	800198c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e150      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
 8001980:	40023800 	.word	0x40023800
 8001984:	42470000 	.word	0x42470000
 8001988:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	4b88      	ldr	r3, [pc, #544]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 800198e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1ea      	bne.n	800196e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 8097 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b81      	ldr	r3, [pc, #516]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b7d      	ldr	r3, [pc, #500]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	4a7c      	ldr	r2, [pc, #496]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c6:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b77      	ldr	r3, [pc, #476]	@ (8001bb4 <HAL_RCC_OscConfig+0x474>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	4b74      	ldr	r3, [pc, #464]	@ (8001bb4 <HAL_RCC_OscConfig+0x474>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a73      	ldr	r2, [pc, #460]	@ (8001bb4 <HAL_RCC_OscConfig+0x474>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fb03 	bl	8000ff8 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff faff 	bl	8000ff8 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e10c      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb4 <HAL_RCC_OscConfig+0x474>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x2ea>
 8001a1c:	4b64      	ldr	r3, [pc, #400]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a20:	4a63      	ldr	r2, [pc, #396]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a28:	e01c      	b.n	8001a64 <HAL_RCC_OscConfig+0x324>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x30c>
 8001a32:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a36:	4a5e      	ldr	r2, [pc, #376]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a42:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0x324>
 8001a4c:	4b58      	ldr	r3, [pc, #352]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a50:	4a57      	ldr	r2, [pc, #348]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a58:	4b55      	ldr	r3, [pc, #340]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5c:	4a54      	ldr	r2, [pc, #336]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	f023 0304 	bic.w	r3, r3, #4
 8001a62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d015      	beq.n	8001a98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fac4 	bl	8000ff8 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a74:	f7ff fac0 	bl	8000ff8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e0cb      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8a:	4b49      	ldr	r3, [pc, #292]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0ee      	beq.n	8001a74 <HAL_RCC_OscConfig+0x334>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7ff faae 	bl	8000ff8 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7ff faaa 	bl	8000ff8 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e0b5      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ee      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac8:	4b39      	ldr	r3, [pc, #228]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	4a38      	ldr	r2, [pc, #224]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80a1 	beq.w	8001c20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ade:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d05c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d141      	bne.n	8001b76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4b31      	ldr	r3, [pc, #196]	@ (8001bb8 <HAL_RCC_OscConfig+0x478>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fa7e 	bl	8000ff8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff fa7a 	bl	8000ff8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e087      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b12:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	019b      	lsls	r3, r3, #6
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	491b      	ldr	r1, [pc, #108]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x478>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fa53 	bl	8000ff8 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff fa4f 	bl	8000ff8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e05c      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x416>
 8001b74:	e054      	b.n	8001c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_RCC_OscConfig+0x478>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fa3c 	bl	8000ff8 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff fa38 	bl	8000ff8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e045      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_RCC_OscConfig+0x470>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x444>
 8001ba2:	e03d      	b.n	8001c20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e038      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_RCC_OscConfig+0x4ec>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d028      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d121      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d11a      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bec:	4013      	ands	r3, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d111      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	085b      	lsrs	r3, r3, #1
 8001c04:	3b01      	subs	r3, #1
 8001c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0cc      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c44:	4b68      	ldr	r3, [pc, #416]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d90c      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b65      	ldr	r3, [pc, #404]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b63      	ldr	r3, [pc, #396]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0b8      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d020      	beq.n	8001cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c84:	4b59      	ldr	r3, [pc, #356]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a58      	ldr	r2, [pc, #352]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c9c:	4b53      	ldr	r3, [pc, #332]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a52      	ldr	r2, [pc, #328]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca8:	4b50      	ldr	r3, [pc, #320]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	494d      	ldr	r1, [pc, #308]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d044      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	4b47      	ldr	r3, [pc, #284]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d119      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e07f      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d003      	beq.n	8001cee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4b3f      	ldr	r3, [pc, #252]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e06f      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e067      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0e:	4b37      	ldr	r3, [pc, #220]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f023 0203 	bic.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4934      	ldr	r1, [pc, #208]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d20:	f7ff f96a 	bl	8000ff8 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d28:	f7ff f966 	bl	8000ff8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e04f      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 020c 	and.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1eb      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d50:	4b25      	ldr	r3, [pc, #148]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d20c      	bcs.n	8001d78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e032      	b.n	8001dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d84:	4b19      	ldr	r3, [pc, #100]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4916      	ldr	r1, [pc, #88]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da2:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	490e      	ldr	r1, [pc, #56]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db6:	f000 f821 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	490a      	ldr	r1, [pc, #40]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	5ccb      	ldrb	r3, [r1, r3]
 8001dca:	fa22 f303 	lsr.w	r3, r2, r3
 8001dce:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f8ca 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023c00 	.word	0x40023c00
 8001dec:	40023800 	.word	0x40023800
 8001df0:	0800411c 	.word	0x0800411c
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e00:	b090      	sub	sp, #64	@ 0x40
 8001e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e14:	4b59      	ldr	r3, [pc, #356]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d00d      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x40>
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	f200 80a1 	bhi.w	8001f68 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x34>
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e2e:	e09b      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e30:	4b53      	ldr	r3, [pc, #332]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e34:	e09b      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e36:	4b53      	ldr	r3, [pc, #332]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e3a:	e098      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e46:	4b4d      	ldr	r3, [pc, #308]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d028      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e52:	4b4a      	ldr	r3, [pc, #296]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	099b      	lsrs	r3, r3, #6
 8001e58:	2200      	movs	r2, #0
 8001e5a:	623b      	str	r3, [r7, #32]
 8001e5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e64:	2100      	movs	r1, #0
 8001e66:	4b47      	ldr	r3, [pc, #284]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e68:	fb03 f201 	mul.w	r2, r3, r1
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	fb00 f303 	mul.w	r3, r0, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	4a43      	ldr	r2, [pc, #268]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e76:	fba0 1202 	umull	r1, r2, r0, r2
 8001e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e7c:	460a      	mov	r2, r1
 8001e7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e82:	4413      	add	r3, r2
 8001e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e88:	2200      	movs	r2, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	61fa      	str	r2, [r7, #28]
 8001e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e96:	f7fe f9fb 	bl	8000290 <__aeabi_uldivmod>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ea2:	e053      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea4:	4b35      	ldr	r3, [pc, #212]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	2200      	movs	r2, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	617a      	str	r2, [r7, #20]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001eb6:	f04f 0b00 	mov.w	fp, #0
 8001eba:	4652      	mov	r2, sl
 8001ebc:	465b      	mov	r3, fp
 8001ebe:	f04f 0000 	mov.w	r0, #0
 8001ec2:	f04f 0100 	mov.w	r1, #0
 8001ec6:	0159      	lsls	r1, r3, #5
 8001ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ecc:	0150      	lsls	r0, r2, #5
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	ebb2 080a 	subs.w	r8, r2, sl
 8001ed6:	eb63 090b 	sbc.w	r9, r3, fp
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ee6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001eea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eee:	ebb2 0408 	subs.w	r4, r2, r8
 8001ef2:	eb63 0509 	sbc.w	r5, r3, r9
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	00eb      	lsls	r3, r5, #3
 8001f00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f04:	00e2      	lsls	r2, r4, #3
 8001f06:	4614      	mov	r4, r2
 8001f08:	461d      	mov	r5, r3
 8001f0a:	eb14 030a 	adds.w	r3, r4, sl
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	eb45 030b 	adc.w	r3, r5, fp
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f22:	4629      	mov	r1, r5
 8001f24:	028b      	lsls	r3, r1, #10
 8001f26:	4621      	mov	r1, r4
 8001f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	028a      	lsls	r2, r1, #10
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f36:	2200      	movs	r2, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	60fa      	str	r2, [r7, #12]
 8001f3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f40:	f7fe f9a6 	bl	8000290 <__aeabi_uldivmod>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4613      	mov	r3, r2
 8001f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	3301      	adds	r3, #1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3740      	adds	r7, #64	@ 0x40
 8001f74:	46bd      	mov	sp, r7
 8001f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	00f42400 	.word	0x00f42400
 8001f84:	017d7840 	.word	0x017d7840

08001f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000000 	.word	0x20000000

08001fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa4:	f7ff fff0 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0a9b      	lsrs	r3, r3, #10
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4903      	ldr	r1, [pc, #12]	@ (8001fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	0800412c 	.word	0x0800412c

08001fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fcc:	f7ff ffdc 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0b5b      	lsrs	r3, r3, #13
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	@ (8001fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	0800412c 	.word	0x0800412c

08001ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e041      	b.n	8002086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe fe6a 	bl	8000cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f000 f950 	bl	80022d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d001      	beq.n	80020a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e03c      	b.n	8002122 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002130 <HAL_TIM_Base_Start+0xa0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d018      	beq.n	80020ec <HAL_TIM_Base_Start+0x5c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c2:	d013      	beq.n	80020ec <HAL_TIM_Base_Start+0x5c>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002134 <HAL_TIM_Base_Start+0xa4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00e      	beq.n	80020ec <HAL_TIM_Base_Start+0x5c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a19      	ldr	r2, [pc, #100]	@ (8002138 <HAL_TIM_Base_Start+0xa8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_TIM_Base_Start+0x5c>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a17      	ldr	r2, [pc, #92]	@ (800213c <HAL_TIM_Base_Start+0xac>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_TIM_Base_Start+0x5c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a16      	ldr	r2, [pc, #88]	@ (8002140 <HAL_TIM_Base_Start+0xb0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d111      	bne.n	8002110 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d010      	beq.n	8002120 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210e:	e007      	b.n	8002120 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40010000 	.word	0x40010000
 8002134:	40000400 	.word	0x40000400
 8002138:	40000800 	.word	0x40000800
 800213c:	40000c00 	.word	0x40000c00
 8002140:	40014000 	.word	0x40014000

08002144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_TIM_ConfigClockSource+0x1c>
 800215c:	2302      	movs	r3, #2
 800215e:	e0b4      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x186>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800217e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002186:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002198:	d03e      	beq.n	8002218 <HAL_TIM_ConfigClockSource+0xd4>
 800219a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800219e:	f200 8087 	bhi.w	80022b0 <HAL_TIM_ConfigClockSource+0x16c>
 80021a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a6:	f000 8086 	beq.w	80022b6 <HAL_TIM_ConfigClockSource+0x172>
 80021aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ae:	d87f      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x16c>
 80021b0:	2b70      	cmp	r3, #112	@ 0x70
 80021b2:	d01a      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0xa6>
 80021b4:	2b70      	cmp	r3, #112	@ 0x70
 80021b6:	d87b      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x16c>
 80021b8:	2b60      	cmp	r3, #96	@ 0x60
 80021ba:	d050      	beq.n	800225e <HAL_TIM_ConfigClockSource+0x11a>
 80021bc:	2b60      	cmp	r3, #96	@ 0x60
 80021be:	d877      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x16c>
 80021c0:	2b50      	cmp	r3, #80	@ 0x50
 80021c2:	d03c      	beq.n	800223e <HAL_TIM_ConfigClockSource+0xfa>
 80021c4:	2b50      	cmp	r3, #80	@ 0x50
 80021c6:	d873      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x16c>
 80021c8:	2b40      	cmp	r3, #64	@ 0x40
 80021ca:	d058      	beq.n	800227e <HAL_TIM_ConfigClockSource+0x13a>
 80021cc:	2b40      	cmp	r3, #64	@ 0x40
 80021ce:	d86f      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x16c>
 80021d0:	2b30      	cmp	r3, #48	@ 0x30
 80021d2:	d064      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x15a>
 80021d4:	2b30      	cmp	r3, #48	@ 0x30
 80021d6:	d86b      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x16c>
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d060      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x15a>
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d867      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x16c>
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d05c      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x15a>
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d05a      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x15a>
 80021e8:	e062      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021fa:	f000 f96b 	bl	80024d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800220c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	609a      	str	r2, [r3, #8]
      break;
 8002216:	e04f      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002228:	f000 f954 	bl	80024d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800223a:	609a      	str	r2, [r3, #8]
      break;
 800223c:	e03c      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800224a:	461a      	mov	r2, r3
 800224c:	f000 f8c8 	bl	80023e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2150      	movs	r1, #80	@ 0x50
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f921 	bl	800249e <TIM_ITRx_SetConfig>
      break;
 800225c:	e02c      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800226a:	461a      	mov	r2, r3
 800226c:	f000 f8e7 	bl	800243e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2160      	movs	r1, #96	@ 0x60
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f911 	bl	800249e <TIM_ITRx_SetConfig>
      break;
 800227c:	e01c      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228a:	461a      	mov	r2, r3
 800228c:	f000 f8a8 	bl	80023e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2140      	movs	r1, #64	@ 0x40
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f901 	bl	800249e <TIM_ITRx_SetConfig>
      break;
 800229c:	e00c      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4619      	mov	r1, r3
 80022a8:	4610      	mov	r0, r2
 80022aa:	f000 f8f8 	bl	800249e <TIM_ITRx_SetConfig>
      break;
 80022ae:	e003      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      break;
 80022b4:	e000      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a37      	ldr	r2, [pc, #220]	@ (80023c4 <TIM_Base_SetConfig+0xf0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00f      	beq.n	800230c <TIM_Base_SetConfig+0x38>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022f2:	d00b      	beq.n	800230c <TIM_Base_SetConfig+0x38>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a34      	ldr	r2, [pc, #208]	@ (80023c8 <TIM_Base_SetConfig+0xf4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <TIM_Base_SetConfig+0x38>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a33      	ldr	r2, [pc, #204]	@ (80023cc <TIM_Base_SetConfig+0xf8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d003      	beq.n	800230c <TIM_Base_SetConfig+0x38>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a32      	ldr	r2, [pc, #200]	@ (80023d0 <TIM_Base_SetConfig+0xfc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a28      	ldr	r2, [pc, #160]	@ (80023c4 <TIM_Base_SetConfig+0xf0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01b      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800232c:	d017      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a25      	ldr	r2, [pc, #148]	@ (80023c8 <TIM_Base_SetConfig+0xf4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a24      	ldr	r2, [pc, #144]	@ (80023cc <TIM_Base_SetConfig+0xf8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00f      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <TIM_Base_SetConfig+0xfc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00b      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a22      	ldr	r2, [pc, #136]	@ (80023d4 <TIM_Base_SetConfig+0x100>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a21      	ldr	r2, [pc, #132]	@ (80023d8 <TIM_Base_SetConfig+0x104>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0x8a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a20      	ldr	r2, [pc, #128]	@ (80023dc <TIM_Base_SetConfig+0x108>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d108      	bne.n	8002370 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a0c      	ldr	r2, [pc, #48]	@ (80023c4 <TIM_Base_SetConfig+0xf0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d103      	bne.n	800239e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f043 0204 	orr.w	r2, r3, #4
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000800 	.word	0x40000800
 80023d0:	40000c00 	.word	0x40000c00
 80023d4:	40014000 	.word	0x40014000
 80023d8:	40014400 	.word	0x40014400
 80023dc:	40014800 	.word	0x40014800

080023e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	f023 0201 	bic.w	r2, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800240a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f023 030a 	bic.w	r3, r3, #10
 800241c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	621a      	str	r2, [r3, #32]
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800243e:	b480      	push	{r7}
 8002440:	b087      	sub	sp, #28
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f023 0210 	bic.w	r2, r3, #16
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	031b      	lsls	r3, r3, #12
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800247a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	621a      	str	r2, [r3, #32]
}
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f043 0307 	orr.w	r3, r3, #7
 80024c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	609a      	str	r2, [r3, #8]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	021a      	lsls	r2, r3, #8
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	609a      	str	r2, [r3, #8]
}
 8002508:	bf00      	nop
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002528:	2302      	movs	r3, #2
 800252a:	e050      	b.n	80025ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1c      	ldr	r2, [pc, #112]	@ (80025dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d018      	beq.n	80025a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002578:	d013      	beq.n	80025a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a18      	ldr	r2, [pc, #96]	@ (80025e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00e      	beq.n	80025a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a16      	ldr	r2, [pc, #88]	@ (80025e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d009      	beq.n	80025a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a15      	ldr	r2, [pc, #84]	@ (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d004      	beq.n	80025a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a13      	ldr	r2, [pc, #76]	@ (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10c      	bne.n	80025bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40010000 	.word	0x40010000
 80025e0:	40000400 	.word	0x40000400
 80025e4:	40000800 	.word	0x40000800
 80025e8:	40000c00 	.word	0x40000c00
 80025ec:	40014000 	.word	0x40014000

080025f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e042      	b.n	8002688 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe fb8c 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	@ 0x24
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fe0b 	bl	8003250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d175      	bne.n	800279c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_UART_Transmit+0x2c>
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e06e      	b.n	800279e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2221      	movs	r2, #33	@ 0x21
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ce:	f7fe fc93 	bl	8000ff8 <HAL_GetTick>
 80026d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e8:	d108      	bne.n	80026fc <HAL_UART_Transmit+0x6c>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e003      	b.n	8002704 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002704:	e02e      	b.n	8002764 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	2180      	movs	r1, #128	@ 0x80
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fb6f 	bl	8002df4 <UART_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e03a      	b.n	800279e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800273c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	3302      	adds	r3, #2
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e007      	b.n	8002756 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1cb      	bne.n	8002706 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2200      	movs	r2, #0
 8002776:	2140      	movs	r1, #64	@ 0x40
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fb3b 	bl	8002df4 <UART_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e006      	b.n	800279e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e000      	b.n	800279e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800279c:	2302      	movs	r3, #2
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b08c      	sub	sp, #48	@ 0x30
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	4613      	mov	r3, r2
 80027b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d14a      	bne.n	8002856 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e043      	b.n	8002858 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	461a      	mov	r2, r3
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fb5f 	bl	8002ea6 <UART_Start_Receive_IT>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80027ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d12c      	bne.n	8002850 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d125      	bne.n	800284a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	e853 3f00 	ldrex	r3, [r3]
 8002822:	617b      	str	r3, [r7, #20]
   return(result);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002834:	627a      	str	r2, [r7, #36]	@ 0x24
 8002836:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	6a39      	ldr	r1, [r7, #32]
 800283a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	61fb      	str	r3, [r7, #28]
   return(result);
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e5      	bne.n	8002814 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002848:	e002      	b.n	8002850 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002850:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002854:	e000      	b.n	8002858 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
  }
}
 8002858:	4618      	mov	r0, r3
 800285a:	3730      	adds	r7, #48	@ 0x30
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b0ba      	sub	sp, #232	@ 0xe8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800288c:	2300      	movs	r3, #0
 800288e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800289e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <HAL_UART_IRQHandler+0x66>
 80028b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fc07 	bl	80030d2 <UART_Receive_IT>
      return;
 80028c4:	e273      	b.n	8002dae <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80de 	beq.w	8002a8c <HAL_UART_IRQHandler+0x22c>
 80028d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80d1 	beq.w	8002a8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_UART_IRQHandler+0xae>
 80028f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800290e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_UART_IRQHandler+0xd2>
 800291a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f043 0202 	orr.w	r2, r3, #2
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_UART_IRQHandler+0xf6>
 800293e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	f043 0204 	orr.w	r2, r3, #4
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d011      	beq.n	8002986 <HAL_UART_IRQHandler+0x126>
 8002962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800296e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	f043 0208 	orr.w	r2, r3, #8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 820a 	beq.w	8002da4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_UART_IRQHandler+0x14e>
 800299c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fb92 	bl	80030d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b8:	2b40      	cmp	r3, #64	@ 0x40
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <HAL_UART_IRQHandler+0x17a>
 80029d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d04f      	beq.n	8002a7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fa9d 	bl	8002f1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ea:	2b40      	cmp	r3, #64	@ 0x40
 80029ec:	d141      	bne.n	8002a72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3314      	adds	r3, #20
 80029f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029fc:	e853 3f00 	ldrex	r3, [r3]
 8002a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3314      	adds	r3, #20
 8002a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a2a:	e841 2300 	strex	r3, r2, [r1]
 8002a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1d9      	bne.n	80029ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d013      	beq.n	8002a6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a46:	4a8a      	ldr	r2, [pc, #552]	@ (8002c70 <HAL_UART_IRQHandler+0x410>)
 8002a48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fc83 	bl	800135a <HAL_DMA_Abort_IT>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a64:	4610      	mov	r0, r2
 8002a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a68:	e00e      	b.n	8002a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f9ac 	bl	8002dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a70:	e00a      	b.n	8002a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f9a8 	bl	8002dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a78:	e006      	b.n	8002a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f9a4 	bl	8002dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002a86:	e18d      	b.n	8002da4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a88:	bf00      	nop
    return;
 8002a8a:	e18b      	b.n	8002da4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	f040 8167 	bne.w	8002d64 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8160 	beq.w	8002d64 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8159 	beq.w	8002d64 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad2:	2b40      	cmp	r3, #64	@ 0x40
 8002ad4:	f040 80ce 	bne.w	8002c74 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ae4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a9 	beq.w	8002c40 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002af6:	429a      	cmp	r2, r3
 8002af8:	f080 80a2 	bcs.w	8002c40 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b0e:	f000 8088 	beq.w	8002c22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	330c      	adds	r3, #12
 8002b18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b20:	e853 3f00 	ldrex	r3, [r3]
 8002b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b4e:	e841 2300 	strex	r3, r2, [r1]
 8002b52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1d9      	bne.n	8002b12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3314      	adds	r3, #20
 8002b64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3314      	adds	r3, #20
 8002b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b8e:	e841 2300 	strex	r3, r2, [r1]
 8002b92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1e1      	bne.n	8002b5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3314      	adds	r3, #20
 8002ba0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ba4:	e853 3f00 	ldrex	r3, [r3]
 8002ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002baa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3314      	adds	r3, #20
 8002bba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002bbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002bc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002bc6:	e841 2300 	strex	r3, r2, [r1]
 8002bca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e3      	bne.n	8002b9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bea:	e853 3f00 	ldrex	r3, [r3]
 8002bee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bf2:	f023 0310 	bic.w	r3, r3, #16
 8002bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c0c:	e841 2300 	strex	r3, r2, [r1]
 8002c10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e3      	bne.n	8002be0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe fb2c 	bl	800127a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2202      	movs	r2, #2
 8002c26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f8cf 	bl	8002ddc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002c3e:	e0b3      	b.n	8002da8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	f040 80ad 	bne.w	8002da8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c58:	f040 80a6 	bne.w	8002da8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c66:	4619      	mov	r1, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f8b7 	bl	8002ddc <HAL_UARTEx_RxEventCallback>
      return;
 8002c6e:	e09b      	b.n	8002da8 <HAL_UART_IRQHandler+0x548>
 8002c70:	08002fe1 	.word	0x08002fe1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 808e 	beq.w	8002dac <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8089 	beq.w	8002dac <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	330c      	adds	r3, #12
 8002ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca4:	e853 3f00 	ldrex	r3, [r3]
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	330c      	adds	r3, #12
 8002cba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002cbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002cc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cc6:	e841 2300 	strex	r3, r2, [r1]
 8002cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1e3      	bne.n	8002c9a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3314      	adds	r3, #20
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3314      	adds	r3, #20
 8002cf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002cf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cfe:	e841 2300 	strex	r3, r2, [r1]
 8002d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e3      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0310 	bic.w	r3, r3, #16
 8002d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330c      	adds	r3, #12
 8002d38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d3c:	61fa      	str	r2, [r7, #28]
 8002d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d40:	69b9      	ldr	r1, [r7, #24]
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	e841 2300 	strex	r3, r2, [r1]
 8002d48:	617b      	str	r3, [r7, #20]
   return(result);
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e3      	bne.n	8002d18 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f83d 	bl	8002ddc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d62:	e023      	b.n	8002dac <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d009      	beq.n	8002d84 <HAL_UART_IRQHandler+0x524>
 8002d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f940 	bl	8003002 <UART_Transmit_IT>
    return;
 8002d82:	e014      	b.n	8002dae <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <HAL_UART_IRQHandler+0x54e>
 8002d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f980 	bl	80030a2 <UART_EndTransmit_IT>
    return;
 8002da2:	e004      	b.n	8002dae <HAL_UART_IRQHandler+0x54e>
    return;
 8002da4:	bf00      	nop
 8002da6:	e002      	b.n	8002dae <HAL_UART_IRQHandler+0x54e>
      return;
 8002da8:	bf00      	nop
 8002daa:	e000      	b.n	8002dae <HAL_UART_IRQHandler+0x54e>
      return;
 8002dac:	bf00      	nop
  }
}
 8002dae:	37e8      	adds	r7, #232	@ 0xe8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e04:	e03b      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d037      	beq.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0e:	f7fe f8f3 	bl	8000ff8 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	6a3a      	ldr	r2, [r7, #32]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d302      	bcc.n	8002e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e03a      	b.n	8002e9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d023      	beq.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b80      	cmp	r3, #128	@ 0x80
 8002e3a:	d020      	beq.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b40      	cmp	r3, #64	@ 0x40
 8002e40:	d01d      	beq.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d116      	bne.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f857 	bl	8002f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2208      	movs	r2, #8
 8002e70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00f      	b.n	8002e9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4013      	ands	r3, r2
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2301      	moveq	r3, #1
 8002e90:	2300      	movne	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d0b4      	beq.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2222      	movs	r2, #34	@ 0x22
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0220 	orr.w	r2, r2, #32
 8002f0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b095      	sub	sp, #84	@ 0x54
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	330c      	adds	r3, #12
 8002f28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f42:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e5      	bne.n	8002f22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3314      	adds	r3, #20
 8002f74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f7e:	e841 2300 	strex	r3, r2, [r1]
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e5      	bne.n	8002f56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d119      	bne.n	8002fc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f023 0310 	bic.w	r3, r3, #16
 8002fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fb2:	61ba      	str	r2, [r7, #24]
 8002fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	6979      	ldr	r1, [r7, #20]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	e841 2300 	strex	r3, r2, [r1]
 8002fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1e5      	bne.n	8002f92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fd4:	bf00      	nop
 8002fd6:	3754      	adds	r7, #84	@ 0x54
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7ff fee7 	bl	8002dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b21      	cmp	r3, #33	@ 0x21
 8003014:	d13e      	bne.n	8003094 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800301e:	d114      	bne.n	800304a <UART_Transmit_IT+0x48>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d110      	bne.n	800304a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800303c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	1c9a      	adds	r2, r3, #2
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	621a      	str	r2, [r3, #32]
 8003048:	e008      	b.n	800305c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6211      	str	r1, [r2, #32]
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29b      	uxth	r3, r3
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4619      	mov	r1, r3
 800306a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10f      	bne.n	8003090 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800307e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800308e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff fe76 	bl	8002db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b08c      	sub	sp, #48	@ 0x30
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b22      	cmp	r3, #34	@ 0x22
 80030ec:	f040 80aa 	bne.w	8003244 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030f8:	d115      	bne.n	8003126 <UART_Receive_IT+0x54>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d111      	bne.n	8003126 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003106:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	b29b      	uxth	r3, r3
 8003110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003114:	b29a      	uxth	r2, r3
 8003116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003118:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	1c9a      	adds	r2, r3, #2
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	629a      	str	r2, [r3, #40]	@ 0x28
 8003124:	e024      	b.n	8003170 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003134:	d007      	beq.n	8003146 <UART_Receive_IT+0x74>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <UART_Receive_IT+0x82>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e008      	b.n	8003166 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003160:	b2da      	uxtb	r2, r3
 8003162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003164:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4619      	mov	r1, r3
 800317e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003180:	2b00      	cmp	r3, #0
 8003182:	d15d      	bne.n	8003240 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0220 	bic.w	r2, r2, #32
 8003192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d135      	bne.n	8003236 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	330c      	adds	r3, #12
 80031d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	e853 3f00 	ldrex	r3, [r3]
 80031de:	613b      	str	r3, [r7, #16]
   return(result);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f023 0310 	bic.w	r3, r3, #16
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	330c      	adds	r3, #12
 80031ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f0:	623a      	str	r2, [r7, #32]
 80031f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f4:	69f9      	ldr	r1, [r7, #28]
 80031f6:	6a3a      	ldr	r2, [r7, #32]
 80031f8:	e841 2300 	strex	r3, r2, [r1]
 80031fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e5      	bne.n	80031d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b10      	cmp	r3, #16
 8003210:	d10a      	bne.n	8003228 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fdd4 	bl	8002ddc <HAL_UARTEx_RxEventCallback>
 8003234:	e002      	b.n	800323c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd fd18 	bl	8000c6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e002      	b.n	8003246 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	e000      	b.n	8003246 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003244:	2302      	movs	r3, #2
  }
}
 8003246:	4618      	mov	r0, r3
 8003248:	3730      	adds	r7, #48	@ 0x30
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003254:	b0c0      	sub	sp, #256	@ 0x100
 8003256:	af00      	add	r7, sp, #0
 8003258:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326c:	68d9      	ldr	r1, [r3, #12]
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	ea40 0301 	orr.w	r3, r0, r1
 8003278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	431a      	orrs	r2, r3
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	431a      	orrs	r2, r3
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032a8:	f021 010c 	bic.w	r1, r1, #12
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032b6:	430b      	orrs	r3, r1
 80032b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ca:	6999      	ldr	r1, [r3, #24]
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	ea40 0301 	orr.w	r3, r0, r1
 80032d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b8f      	ldr	r3, [pc, #572]	@ (800351c <UART_SetConfig+0x2cc>)
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d005      	beq.n	80032f0 <UART_SetConfig+0xa0>
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003520 <UART_SetConfig+0x2d0>)
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d104      	bne.n	80032fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7fe fe6a 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 80032f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032f8:	e003      	b.n	8003302 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032fa:	f7fe fe51 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 80032fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800330c:	f040 810c 	bne.w	8003528 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003314:	2200      	movs	r2, #0
 8003316:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800331a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800331e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003322:	4622      	mov	r2, r4
 8003324:	462b      	mov	r3, r5
 8003326:	1891      	adds	r1, r2, r2
 8003328:	65b9      	str	r1, [r7, #88]	@ 0x58
 800332a:	415b      	adcs	r3, r3
 800332c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800332e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003332:	4621      	mov	r1, r4
 8003334:	eb12 0801 	adds.w	r8, r2, r1
 8003338:	4629      	mov	r1, r5
 800333a:	eb43 0901 	adc.w	r9, r3, r1
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800334e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003352:	4690      	mov	r8, r2
 8003354:	4699      	mov	r9, r3
 8003356:	4623      	mov	r3, r4
 8003358:	eb18 0303 	adds.w	r3, r8, r3
 800335c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003360:	462b      	mov	r3, r5
 8003362:	eb49 0303 	adc.w	r3, r9, r3
 8003366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800336a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003376:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800337a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800337e:	460b      	mov	r3, r1
 8003380:	18db      	adds	r3, r3, r3
 8003382:	653b      	str	r3, [r7, #80]	@ 0x50
 8003384:	4613      	mov	r3, r2
 8003386:	eb42 0303 	adc.w	r3, r2, r3
 800338a:	657b      	str	r3, [r7, #84]	@ 0x54
 800338c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003390:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003394:	f7fc ff7c 	bl	8000290 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4b61      	ldr	r3, [pc, #388]	@ (8003524 <UART_SetConfig+0x2d4>)
 800339e:	fba3 2302 	umull	r2, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	011c      	lsls	r4, r3, #4
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033b8:	4642      	mov	r2, r8
 80033ba:	464b      	mov	r3, r9
 80033bc:	1891      	adds	r1, r2, r2
 80033be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033c0:	415b      	adcs	r3, r3
 80033c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033c8:	4641      	mov	r1, r8
 80033ca:	eb12 0a01 	adds.w	sl, r2, r1
 80033ce:	4649      	mov	r1, r9
 80033d0:	eb43 0b01 	adc.w	fp, r3, r1
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033e8:	4692      	mov	sl, r2
 80033ea:	469b      	mov	fp, r3
 80033ec:	4643      	mov	r3, r8
 80033ee:	eb1a 0303 	adds.w	r3, sl, r3
 80033f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033f6:	464b      	mov	r3, r9
 80033f8:	eb4b 0303 	adc.w	r3, fp, r3
 80033fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800340c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003410:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003414:	460b      	mov	r3, r1
 8003416:	18db      	adds	r3, r3, r3
 8003418:	643b      	str	r3, [r7, #64]	@ 0x40
 800341a:	4613      	mov	r3, r2
 800341c:	eb42 0303 	adc.w	r3, r2, r3
 8003420:	647b      	str	r3, [r7, #68]	@ 0x44
 8003422:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003426:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800342a:	f7fc ff31 	bl	8000290 <__aeabi_uldivmod>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4611      	mov	r1, r2
 8003434:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <UART_SetConfig+0x2d4>)
 8003436:	fba3 2301 	umull	r2, r3, r3, r1
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	2264      	movs	r2, #100	@ 0x64
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	1acb      	subs	r3, r1, r3
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800344a:	4b36      	ldr	r3, [pc, #216]	@ (8003524 <UART_SetConfig+0x2d4>)
 800344c:	fba3 2302 	umull	r2, r3, r3, r2
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003458:	441c      	add	r4, r3
 800345a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003464:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003468:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003474:	415b      	adcs	r3, r3
 8003476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800347c:	4641      	mov	r1, r8
 800347e:	1851      	adds	r1, r2, r1
 8003480:	6339      	str	r1, [r7, #48]	@ 0x30
 8003482:	4649      	mov	r1, r9
 8003484:	414b      	adcs	r3, r1
 8003486:	637b      	str	r3, [r7, #52]	@ 0x34
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003494:	4659      	mov	r1, fp
 8003496:	00cb      	lsls	r3, r1, #3
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349e:	4651      	mov	r1, sl
 80034a0:	00ca      	lsls	r2, r1, #3
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	4642      	mov	r2, r8
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034b0:	464b      	mov	r3, r9
 80034b2:	460a      	mov	r2, r1
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034d0:	460b      	mov	r3, r1
 80034d2:	18db      	adds	r3, r3, r3
 80034d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034d6:	4613      	mov	r3, r2
 80034d8:	eb42 0303 	adc.w	r3, r2, r3
 80034dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034e6:	f7fc fed3 	bl	8000290 <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003524 <UART_SetConfig+0x2d4>)
 80034f0:	fba3 1302 	umull	r1, r3, r3, r2
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	2164      	movs	r1, #100	@ 0x64
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	3332      	adds	r3, #50	@ 0x32
 8003502:	4a08      	ldr	r2, [pc, #32]	@ (8003524 <UART_SetConfig+0x2d4>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	f003 0207 	and.w	r2, r3, #7
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4422      	add	r2, r4
 8003516:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003518:	e106      	b.n	8003728 <UART_SetConfig+0x4d8>
 800351a:	bf00      	nop
 800351c:	40011000 	.word	0x40011000
 8003520:	40011400 	.word	0x40011400
 8003524:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800352c:	2200      	movs	r2, #0
 800352e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003532:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003536:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800353a:	4642      	mov	r2, r8
 800353c:	464b      	mov	r3, r9
 800353e:	1891      	adds	r1, r2, r2
 8003540:	6239      	str	r1, [r7, #32]
 8003542:	415b      	adcs	r3, r3
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24
 8003546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800354a:	4641      	mov	r1, r8
 800354c:	1854      	adds	r4, r2, r1
 800354e:	4649      	mov	r1, r9
 8003550:	eb43 0501 	adc.w	r5, r3, r1
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	00eb      	lsls	r3, r5, #3
 800355e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003562:	00e2      	lsls	r2, r4, #3
 8003564:	4614      	mov	r4, r2
 8003566:	461d      	mov	r5, r3
 8003568:	4643      	mov	r3, r8
 800356a:	18e3      	adds	r3, r4, r3
 800356c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003570:	464b      	mov	r3, r9
 8003572:	eb45 0303 	adc.w	r3, r5, r3
 8003576:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003586:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003596:	4629      	mov	r1, r5
 8003598:	008b      	lsls	r3, r1, #2
 800359a:	4621      	mov	r1, r4
 800359c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a0:	4621      	mov	r1, r4
 80035a2:	008a      	lsls	r2, r1, #2
 80035a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035a8:	f7fc fe72 	bl	8000290 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4b60      	ldr	r3, [pc, #384]	@ (8003734 <UART_SetConfig+0x4e4>)
 80035b2:	fba3 2302 	umull	r2, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	011c      	lsls	r4, r3, #4
 80035ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035cc:	4642      	mov	r2, r8
 80035ce:	464b      	mov	r3, r9
 80035d0:	1891      	adds	r1, r2, r2
 80035d2:	61b9      	str	r1, [r7, #24]
 80035d4:	415b      	adcs	r3, r3
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035dc:	4641      	mov	r1, r8
 80035de:	1851      	adds	r1, r2, r1
 80035e0:	6139      	str	r1, [r7, #16]
 80035e2:	4649      	mov	r1, r9
 80035e4:	414b      	adcs	r3, r1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f4:	4659      	mov	r1, fp
 80035f6:	00cb      	lsls	r3, r1, #3
 80035f8:	4651      	mov	r1, sl
 80035fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fe:	4651      	mov	r1, sl
 8003600:	00ca      	lsls	r2, r1, #3
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	4603      	mov	r3, r0
 8003608:	4642      	mov	r2, r8
 800360a:	189b      	adds	r3, r3, r2
 800360c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003610:	464b      	mov	r3, r9
 8003612:	460a      	mov	r2, r1
 8003614:	eb42 0303 	adc.w	r3, r2, r3
 8003618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003626:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003634:	4649      	mov	r1, r9
 8003636:	008b      	lsls	r3, r1, #2
 8003638:	4641      	mov	r1, r8
 800363a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800363e:	4641      	mov	r1, r8
 8003640:	008a      	lsls	r2, r1, #2
 8003642:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003646:	f7fc fe23 	bl	8000290 <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4611      	mov	r1, r2
 8003650:	4b38      	ldr	r3, [pc, #224]	@ (8003734 <UART_SetConfig+0x4e4>)
 8003652:	fba3 2301 	umull	r2, r3, r3, r1
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2264      	movs	r2, #100	@ 0x64
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	1acb      	subs	r3, r1, r3
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	3332      	adds	r3, #50	@ 0x32
 8003664:	4a33      	ldr	r2, [pc, #204]	@ (8003734 <UART_SetConfig+0x4e4>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003670:	441c      	add	r4, r3
 8003672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003676:	2200      	movs	r2, #0
 8003678:	673b      	str	r3, [r7, #112]	@ 0x70
 800367a:	677a      	str	r2, [r7, #116]	@ 0x74
 800367c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003680:	4642      	mov	r2, r8
 8003682:	464b      	mov	r3, r9
 8003684:	1891      	adds	r1, r2, r2
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	415b      	adcs	r3, r3
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003690:	4641      	mov	r1, r8
 8003692:	1851      	adds	r1, r2, r1
 8003694:	6039      	str	r1, [r7, #0]
 8003696:	4649      	mov	r1, r9
 8003698:	414b      	adcs	r3, r1
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036a8:	4659      	mov	r1, fp
 80036aa:	00cb      	lsls	r3, r1, #3
 80036ac:	4651      	mov	r1, sl
 80036ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036b2:	4651      	mov	r1, sl
 80036b4:	00ca      	lsls	r2, r1, #3
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	4642      	mov	r2, r8
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036c2:	464b      	mov	r3, r9
 80036c4:	460a      	mov	r2, r1
 80036c6:	eb42 0303 	adc.w	r3, r2, r3
 80036ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80036d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036e4:	4649      	mov	r1, r9
 80036e6:	008b      	lsls	r3, r1, #2
 80036e8:	4641      	mov	r1, r8
 80036ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ee:	4641      	mov	r1, r8
 80036f0:	008a      	lsls	r2, r1, #2
 80036f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036f6:	f7fc fdcb 	bl	8000290 <__aeabi_uldivmod>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003734 <UART_SetConfig+0x4e4>)
 8003700:	fba3 1302 	umull	r1, r3, r3, r2
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	2164      	movs	r1, #100	@ 0x64
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	3332      	adds	r3, #50	@ 0x32
 8003712:	4a08      	ldr	r2, [pc, #32]	@ (8003734 <UART_SetConfig+0x4e4>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	f003 020f 	and.w	r2, r3, #15
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4422      	add	r2, r4
 8003726:	609a      	str	r2, [r3, #8]
}
 8003728:	bf00      	nop
 800372a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800372e:	46bd      	mov	sp, r7
 8003730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003734:	51eb851f 	.word	0x51eb851f

08003738 <sniprintf>:
 8003738:	b40c      	push	{r2, r3}
 800373a:	b530      	push	{r4, r5, lr}
 800373c:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <sniprintf+0x68>)
 800373e:	1e0c      	subs	r4, r1, #0
 8003740:	681d      	ldr	r5, [r3, #0]
 8003742:	b09d      	sub	sp, #116	@ 0x74
 8003744:	da08      	bge.n	8003758 <sniprintf+0x20>
 8003746:	238b      	movs	r3, #139	@ 0x8b
 8003748:	602b      	str	r3, [r5, #0]
 800374a:	f04f 30ff 	mov.w	r0, #4294967295
 800374e:	b01d      	add	sp, #116	@ 0x74
 8003750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003754:	b002      	add	sp, #8
 8003756:	4770      	bx	lr
 8003758:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800375c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003766:	bf14      	ite	ne
 8003768:	f104 33ff 	addne.w	r3, r4, #4294967295
 800376c:	4623      	moveq	r3, r4
 800376e:	9304      	str	r3, [sp, #16]
 8003770:	9307      	str	r3, [sp, #28]
 8003772:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003776:	9002      	str	r0, [sp, #8]
 8003778:	9006      	str	r0, [sp, #24]
 800377a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800377e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003780:	ab21      	add	r3, sp, #132	@ 0x84
 8003782:	a902      	add	r1, sp, #8
 8003784:	4628      	mov	r0, r5
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	f000 f9a6 	bl	8003ad8 <_svfiprintf_r>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	bfbc      	itt	lt
 8003790:	238b      	movlt	r3, #139	@ 0x8b
 8003792:	602b      	strlt	r3, [r5, #0]
 8003794:	2c00      	cmp	r4, #0
 8003796:	d0da      	beq.n	800374e <sniprintf+0x16>
 8003798:	9b02      	ldr	r3, [sp, #8]
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	e7d6      	b.n	800374e <sniprintf+0x16>
 80037a0:	2000000c 	.word	0x2000000c

080037a4 <memset>:
 80037a4:	4402      	add	r2, r0
 80037a6:	4603      	mov	r3, r0
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d100      	bne.n	80037ae <memset+0xa>
 80037ac:	4770      	bx	lr
 80037ae:	f803 1b01 	strb.w	r1, [r3], #1
 80037b2:	e7f9      	b.n	80037a8 <memset+0x4>

080037b4 <strncmp>:
 80037b4:	b510      	push	{r4, lr}
 80037b6:	b16a      	cbz	r2, 80037d4 <strncmp+0x20>
 80037b8:	3901      	subs	r1, #1
 80037ba:	1884      	adds	r4, r0, r2
 80037bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d103      	bne.n	80037d0 <strncmp+0x1c>
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d001      	beq.n	80037d0 <strncmp+0x1c>
 80037cc:	2a00      	cmp	r2, #0
 80037ce:	d1f5      	bne.n	80037bc <strncmp+0x8>
 80037d0:	1ad0      	subs	r0, r2, r3
 80037d2:	bd10      	pop	{r4, pc}
 80037d4:	4610      	mov	r0, r2
 80037d6:	e7fc      	b.n	80037d2 <strncmp+0x1e>

080037d8 <__errno>:
 80037d8:	4b01      	ldr	r3, [pc, #4]	@ (80037e0 <__errno+0x8>)
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	2000000c 	.word	0x2000000c

080037e4 <__libc_init_array>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	4d0d      	ldr	r5, [pc, #52]	@ (800381c <__libc_init_array+0x38>)
 80037e8:	4c0d      	ldr	r4, [pc, #52]	@ (8003820 <__libc_init_array+0x3c>)
 80037ea:	1b64      	subs	r4, r4, r5
 80037ec:	10a4      	asrs	r4, r4, #2
 80037ee:	2600      	movs	r6, #0
 80037f0:	42a6      	cmp	r6, r4
 80037f2:	d109      	bne.n	8003808 <__libc_init_array+0x24>
 80037f4:	4d0b      	ldr	r5, [pc, #44]	@ (8003824 <__libc_init_array+0x40>)
 80037f6:	4c0c      	ldr	r4, [pc, #48]	@ (8003828 <__libc_init_array+0x44>)
 80037f8:	f000 fc64 	bl	80040c4 <_init>
 80037fc:	1b64      	subs	r4, r4, r5
 80037fe:	10a4      	asrs	r4, r4, #2
 8003800:	2600      	movs	r6, #0
 8003802:	42a6      	cmp	r6, r4
 8003804:	d105      	bne.n	8003812 <__libc_init_array+0x2e>
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	f855 3b04 	ldr.w	r3, [r5], #4
 800380c:	4798      	blx	r3
 800380e:	3601      	adds	r6, #1
 8003810:	e7ee      	b.n	80037f0 <__libc_init_array+0xc>
 8003812:	f855 3b04 	ldr.w	r3, [r5], #4
 8003816:	4798      	blx	r3
 8003818:	3601      	adds	r6, #1
 800381a:	e7f2      	b.n	8003802 <__libc_init_array+0x1e>
 800381c:	08004170 	.word	0x08004170
 8003820:	08004170 	.word	0x08004170
 8003824:	08004170 	.word	0x08004170
 8003828:	08004174 	.word	0x08004174

0800382c <__retarget_lock_acquire_recursive>:
 800382c:	4770      	bx	lr

0800382e <__retarget_lock_release_recursive>:
 800382e:	4770      	bx	lr

08003830 <_free_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4605      	mov	r5, r0
 8003834:	2900      	cmp	r1, #0
 8003836:	d041      	beq.n	80038bc <_free_r+0x8c>
 8003838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800383c:	1f0c      	subs	r4, r1, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	bfb8      	it	lt
 8003842:	18e4      	addlt	r4, r4, r3
 8003844:	f000 f8e0 	bl	8003a08 <__malloc_lock>
 8003848:	4a1d      	ldr	r2, [pc, #116]	@ (80038c0 <_free_r+0x90>)
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	b933      	cbnz	r3, 800385c <_free_r+0x2c>
 800384e:	6063      	str	r3, [r4, #4]
 8003850:	6014      	str	r4, [r2, #0]
 8003852:	4628      	mov	r0, r5
 8003854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003858:	f000 b8dc 	b.w	8003a14 <__malloc_unlock>
 800385c:	42a3      	cmp	r3, r4
 800385e:	d908      	bls.n	8003872 <_free_r+0x42>
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	1821      	adds	r1, r4, r0
 8003864:	428b      	cmp	r3, r1
 8003866:	bf01      	itttt	eq
 8003868:	6819      	ldreq	r1, [r3, #0]
 800386a:	685b      	ldreq	r3, [r3, #4]
 800386c:	1809      	addeq	r1, r1, r0
 800386e:	6021      	streq	r1, [r4, #0]
 8003870:	e7ed      	b.n	800384e <_free_r+0x1e>
 8003872:	461a      	mov	r2, r3
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	b10b      	cbz	r3, 800387c <_free_r+0x4c>
 8003878:	42a3      	cmp	r3, r4
 800387a:	d9fa      	bls.n	8003872 <_free_r+0x42>
 800387c:	6811      	ldr	r1, [r2, #0]
 800387e:	1850      	adds	r0, r2, r1
 8003880:	42a0      	cmp	r0, r4
 8003882:	d10b      	bne.n	800389c <_free_r+0x6c>
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	4401      	add	r1, r0
 8003888:	1850      	adds	r0, r2, r1
 800388a:	4283      	cmp	r3, r0
 800388c:	6011      	str	r1, [r2, #0]
 800388e:	d1e0      	bne.n	8003852 <_free_r+0x22>
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	6053      	str	r3, [r2, #4]
 8003896:	4408      	add	r0, r1
 8003898:	6010      	str	r0, [r2, #0]
 800389a:	e7da      	b.n	8003852 <_free_r+0x22>
 800389c:	d902      	bls.n	80038a4 <_free_r+0x74>
 800389e:	230c      	movs	r3, #12
 80038a0:	602b      	str	r3, [r5, #0]
 80038a2:	e7d6      	b.n	8003852 <_free_r+0x22>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	1821      	adds	r1, r4, r0
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf04      	itt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	6063      	str	r3, [r4, #4]
 80038b2:	bf04      	itt	eq
 80038b4:	1809      	addeq	r1, r1, r0
 80038b6:	6021      	streq	r1, [r4, #0]
 80038b8:	6054      	str	r4, [r2, #4]
 80038ba:	e7ca      	b.n	8003852 <_free_r+0x22>
 80038bc:	bd38      	pop	{r3, r4, r5, pc}
 80038be:	bf00      	nop
 80038c0:	20000274 	.word	0x20000274

080038c4 <sbrk_aligned>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4e0f      	ldr	r6, [pc, #60]	@ (8003904 <sbrk_aligned+0x40>)
 80038c8:	460c      	mov	r4, r1
 80038ca:	6831      	ldr	r1, [r6, #0]
 80038cc:	4605      	mov	r5, r0
 80038ce:	b911      	cbnz	r1, 80038d6 <sbrk_aligned+0x12>
 80038d0:	f000 fba4 	bl	800401c <_sbrk_r>
 80038d4:	6030      	str	r0, [r6, #0]
 80038d6:	4621      	mov	r1, r4
 80038d8:	4628      	mov	r0, r5
 80038da:	f000 fb9f 	bl	800401c <_sbrk_r>
 80038de:	1c43      	adds	r3, r0, #1
 80038e0:	d103      	bne.n	80038ea <sbrk_aligned+0x26>
 80038e2:	f04f 34ff 	mov.w	r4, #4294967295
 80038e6:	4620      	mov	r0, r4
 80038e8:	bd70      	pop	{r4, r5, r6, pc}
 80038ea:	1cc4      	adds	r4, r0, #3
 80038ec:	f024 0403 	bic.w	r4, r4, #3
 80038f0:	42a0      	cmp	r0, r4
 80038f2:	d0f8      	beq.n	80038e6 <sbrk_aligned+0x22>
 80038f4:	1a21      	subs	r1, r4, r0
 80038f6:	4628      	mov	r0, r5
 80038f8:	f000 fb90 	bl	800401c <_sbrk_r>
 80038fc:	3001      	adds	r0, #1
 80038fe:	d1f2      	bne.n	80038e6 <sbrk_aligned+0x22>
 8003900:	e7ef      	b.n	80038e2 <sbrk_aligned+0x1e>
 8003902:	bf00      	nop
 8003904:	20000270 	.word	0x20000270

08003908 <_malloc_r>:
 8003908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800390c:	1ccd      	adds	r5, r1, #3
 800390e:	f025 0503 	bic.w	r5, r5, #3
 8003912:	3508      	adds	r5, #8
 8003914:	2d0c      	cmp	r5, #12
 8003916:	bf38      	it	cc
 8003918:	250c      	movcc	r5, #12
 800391a:	2d00      	cmp	r5, #0
 800391c:	4606      	mov	r6, r0
 800391e:	db01      	blt.n	8003924 <_malloc_r+0x1c>
 8003920:	42a9      	cmp	r1, r5
 8003922:	d904      	bls.n	800392e <_malloc_r+0x26>
 8003924:	230c      	movs	r3, #12
 8003926:	6033      	str	r3, [r6, #0]
 8003928:	2000      	movs	r0, #0
 800392a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800392e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a04 <_malloc_r+0xfc>
 8003932:	f000 f869 	bl	8003a08 <__malloc_lock>
 8003936:	f8d8 3000 	ldr.w	r3, [r8]
 800393a:	461c      	mov	r4, r3
 800393c:	bb44      	cbnz	r4, 8003990 <_malloc_r+0x88>
 800393e:	4629      	mov	r1, r5
 8003940:	4630      	mov	r0, r6
 8003942:	f7ff ffbf 	bl	80038c4 <sbrk_aligned>
 8003946:	1c43      	adds	r3, r0, #1
 8003948:	4604      	mov	r4, r0
 800394a:	d158      	bne.n	80039fe <_malloc_r+0xf6>
 800394c:	f8d8 4000 	ldr.w	r4, [r8]
 8003950:	4627      	mov	r7, r4
 8003952:	2f00      	cmp	r7, #0
 8003954:	d143      	bne.n	80039de <_malloc_r+0xd6>
 8003956:	2c00      	cmp	r4, #0
 8003958:	d04b      	beq.n	80039f2 <_malloc_r+0xea>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	4639      	mov	r1, r7
 800395e:	4630      	mov	r0, r6
 8003960:	eb04 0903 	add.w	r9, r4, r3
 8003964:	f000 fb5a 	bl	800401c <_sbrk_r>
 8003968:	4581      	cmp	r9, r0
 800396a:	d142      	bne.n	80039f2 <_malloc_r+0xea>
 800396c:	6821      	ldr	r1, [r4, #0]
 800396e:	1a6d      	subs	r5, r5, r1
 8003970:	4629      	mov	r1, r5
 8003972:	4630      	mov	r0, r6
 8003974:	f7ff ffa6 	bl	80038c4 <sbrk_aligned>
 8003978:	3001      	adds	r0, #1
 800397a:	d03a      	beq.n	80039f2 <_malloc_r+0xea>
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	442b      	add	r3, r5
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	f8d8 3000 	ldr.w	r3, [r8]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	bb62      	cbnz	r2, 80039e4 <_malloc_r+0xdc>
 800398a:	f8c8 7000 	str.w	r7, [r8]
 800398e:	e00f      	b.n	80039b0 <_malloc_r+0xa8>
 8003990:	6822      	ldr	r2, [r4, #0]
 8003992:	1b52      	subs	r2, r2, r5
 8003994:	d420      	bmi.n	80039d8 <_malloc_r+0xd0>
 8003996:	2a0b      	cmp	r2, #11
 8003998:	d917      	bls.n	80039ca <_malloc_r+0xc2>
 800399a:	1961      	adds	r1, r4, r5
 800399c:	42a3      	cmp	r3, r4
 800399e:	6025      	str	r5, [r4, #0]
 80039a0:	bf18      	it	ne
 80039a2:	6059      	strne	r1, [r3, #4]
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	bf08      	it	eq
 80039a8:	f8c8 1000 	streq.w	r1, [r8]
 80039ac:	5162      	str	r2, [r4, r5]
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	4630      	mov	r0, r6
 80039b2:	f000 f82f 	bl	8003a14 <__malloc_unlock>
 80039b6:	f104 000b 	add.w	r0, r4, #11
 80039ba:	1d23      	adds	r3, r4, #4
 80039bc:	f020 0007 	bic.w	r0, r0, #7
 80039c0:	1ac2      	subs	r2, r0, r3
 80039c2:	bf1c      	itt	ne
 80039c4:	1a1b      	subne	r3, r3, r0
 80039c6:	50a3      	strne	r3, [r4, r2]
 80039c8:	e7af      	b.n	800392a <_malloc_r+0x22>
 80039ca:	6862      	ldr	r2, [r4, #4]
 80039cc:	42a3      	cmp	r3, r4
 80039ce:	bf0c      	ite	eq
 80039d0:	f8c8 2000 	streq.w	r2, [r8]
 80039d4:	605a      	strne	r2, [r3, #4]
 80039d6:	e7eb      	b.n	80039b0 <_malloc_r+0xa8>
 80039d8:	4623      	mov	r3, r4
 80039da:	6864      	ldr	r4, [r4, #4]
 80039dc:	e7ae      	b.n	800393c <_malloc_r+0x34>
 80039de:	463c      	mov	r4, r7
 80039e0:	687f      	ldr	r7, [r7, #4]
 80039e2:	e7b6      	b.n	8003952 <_malloc_r+0x4a>
 80039e4:	461a      	mov	r2, r3
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	42a3      	cmp	r3, r4
 80039ea:	d1fb      	bne.n	80039e4 <_malloc_r+0xdc>
 80039ec:	2300      	movs	r3, #0
 80039ee:	6053      	str	r3, [r2, #4]
 80039f0:	e7de      	b.n	80039b0 <_malloc_r+0xa8>
 80039f2:	230c      	movs	r3, #12
 80039f4:	6033      	str	r3, [r6, #0]
 80039f6:	4630      	mov	r0, r6
 80039f8:	f000 f80c 	bl	8003a14 <__malloc_unlock>
 80039fc:	e794      	b.n	8003928 <_malloc_r+0x20>
 80039fe:	6005      	str	r5, [r0, #0]
 8003a00:	e7d6      	b.n	80039b0 <_malloc_r+0xa8>
 8003a02:	bf00      	nop
 8003a04:	20000274 	.word	0x20000274

08003a08 <__malloc_lock>:
 8003a08:	4801      	ldr	r0, [pc, #4]	@ (8003a10 <__malloc_lock+0x8>)
 8003a0a:	f7ff bf0f 	b.w	800382c <__retarget_lock_acquire_recursive>
 8003a0e:	bf00      	nop
 8003a10:	2000026c 	.word	0x2000026c

08003a14 <__malloc_unlock>:
 8003a14:	4801      	ldr	r0, [pc, #4]	@ (8003a1c <__malloc_unlock+0x8>)
 8003a16:	f7ff bf0a 	b.w	800382e <__retarget_lock_release_recursive>
 8003a1a:	bf00      	nop
 8003a1c:	2000026c 	.word	0x2000026c

08003a20 <__ssputs_r>:
 8003a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a24:	688e      	ldr	r6, [r1, #8]
 8003a26:	461f      	mov	r7, r3
 8003a28:	42be      	cmp	r6, r7
 8003a2a:	680b      	ldr	r3, [r1, #0]
 8003a2c:	4682      	mov	sl, r0
 8003a2e:	460c      	mov	r4, r1
 8003a30:	4690      	mov	r8, r2
 8003a32:	d82d      	bhi.n	8003a90 <__ssputs_r+0x70>
 8003a34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a3c:	d026      	beq.n	8003a8c <__ssputs_r+0x6c>
 8003a3e:	6965      	ldr	r5, [r4, #20]
 8003a40:	6909      	ldr	r1, [r1, #16]
 8003a42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a46:	eba3 0901 	sub.w	r9, r3, r1
 8003a4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a4e:	1c7b      	adds	r3, r7, #1
 8003a50:	444b      	add	r3, r9
 8003a52:	106d      	asrs	r5, r5, #1
 8003a54:	429d      	cmp	r5, r3
 8003a56:	bf38      	it	cc
 8003a58:	461d      	movcc	r5, r3
 8003a5a:	0553      	lsls	r3, r2, #21
 8003a5c:	d527      	bpl.n	8003aae <__ssputs_r+0x8e>
 8003a5e:	4629      	mov	r1, r5
 8003a60:	f7ff ff52 	bl	8003908 <_malloc_r>
 8003a64:	4606      	mov	r6, r0
 8003a66:	b360      	cbz	r0, 8003ac2 <__ssputs_r+0xa2>
 8003a68:	6921      	ldr	r1, [r4, #16]
 8003a6a:	464a      	mov	r2, r9
 8003a6c:	f000 fae6 	bl	800403c <memcpy>
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	6126      	str	r6, [r4, #16]
 8003a7e:	6165      	str	r5, [r4, #20]
 8003a80:	444e      	add	r6, r9
 8003a82:	eba5 0509 	sub.w	r5, r5, r9
 8003a86:	6026      	str	r6, [r4, #0]
 8003a88:	60a5      	str	r5, [r4, #8]
 8003a8a:	463e      	mov	r6, r7
 8003a8c:	42be      	cmp	r6, r7
 8003a8e:	d900      	bls.n	8003a92 <__ssputs_r+0x72>
 8003a90:	463e      	mov	r6, r7
 8003a92:	6820      	ldr	r0, [r4, #0]
 8003a94:	4632      	mov	r2, r6
 8003a96:	4641      	mov	r1, r8
 8003a98:	f000 faa6 	bl	8003fe8 <memmove>
 8003a9c:	68a3      	ldr	r3, [r4, #8]
 8003a9e:	1b9b      	subs	r3, r3, r6
 8003aa0:	60a3      	str	r3, [r4, #8]
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	4433      	add	r3, r6
 8003aa6:	6023      	str	r3, [r4, #0]
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aae:	462a      	mov	r2, r5
 8003ab0:	f000 fad2 	bl	8004058 <_realloc_r>
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d1e0      	bne.n	8003a7c <__ssputs_r+0x5c>
 8003aba:	6921      	ldr	r1, [r4, #16]
 8003abc:	4650      	mov	r0, sl
 8003abe:	f7ff feb7 	bl	8003830 <_free_r>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	f8ca 3000 	str.w	r3, [sl]
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	e7e9      	b.n	8003aaa <__ssputs_r+0x8a>
	...

08003ad8 <_svfiprintf_r>:
 8003ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003adc:	4698      	mov	r8, r3
 8003ade:	898b      	ldrh	r3, [r1, #12]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	b09d      	sub	sp, #116	@ 0x74
 8003ae4:	4607      	mov	r7, r0
 8003ae6:	460d      	mov	r5, r1
 8003ae8:	4614      	mov	r4, r2
 8003aea:	d510      	bpl.n	8003b0e <_svfiprintf_r+0x36>
 8003aec:	690b      	ldr	r3, [r1, #16]
 8003aee:	b973      	cbnz	r3, 8003b0e <_svfiprintf_r+0x36>
 8003af0:	2140      	movs	r1, #64	@ 0x40
 8003af2:	f7ff ff09 	bl	8003908 <_malloc_r>
 8003af6:	6028      	str	r0, [r5, #0]
 8003af8:	6128      	str	r0, [r5, #16]
 8003afa:	b930      	cbnz	r0, 8003b0a <_svfiprintf_r+0x32>
 8003afc:	230c      	movs	r3, #12
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295
 8003b04:	b01d      	add	sp, #116	@ 0x74
 8003b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b0a:	2340      	movs	r3, #64	@ 0x40
 8003b0c:	616b      	str	r3, [r5, #20]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b12:	2320      	movs	r3, #32
 8003b14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b1c:	2330      	movs	r3, #48	@ 0x30
 8003b1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003cbc <_svfiprintf_r+0x1e4>
 8003b22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b26:	f04f 0901 	mov.w	r9, #1
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	469a      	mov	sl, r3
 8003b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b32:	b10a      	cbz	r2, 8003b38 <_svfiprintf_r+0x60>
 8003b34:	2a25      	cmp	r2, #37	@ 0x25
 8003b36:	d1f9      	bne.n	8003b2c <_svfiprintf_r+0x54>
 8003b38:	ebba 0b04 	subs.w	fp, sl, r4
 8003b3c:	d00b      	beq.n	8003b56 <_svfiprintf_r+0x7e>
 8003b3e:	465b      	mov	r3, fp
 8003b40:	4622      	mov	r2, r4
 8003b42:	4629      	mov	r1, r5
 8003b44:	4638      	mov	r0, r7
 8003b46:	f7ff ff6b 	bl	8003a20 <__ssputs_r>
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	f000 80a7 	beq.w	8003c9e <_svfiprintf_r+0x1c6>
 8003b50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b52:	445a      	add	r2, fp
 8003b54:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b56:	f89a 3000 	ldrb.w	r3, [sl]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 809f 	beq.w	8003c9e <_svfiprintf_r+0x1c6>
 8003b60:	2300      	movs	r3, #0
 8003b62:	f04f 32ff 	mov.w	r2, #4294967295
 8003b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b6a:	f10a 0a01 	add.w	sl, sl, #1
 8003b6e:	9304      	str	r3, [sp, #16]
 8003b70:	9307      	str	r3, [sp, #28]
 8003b72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b76:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b78:	4654      	mov	r4, sl
 8003b7a:	2205      	movs	r2, #5
 8003b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b80:	484e      	ldr	r0, [pc, #312]	@ (8003cbc <_svfiprintf_r+0x1e4>)
 8003b82:	f7fc fb35 	bl	80001f0 <memchr>
 8003b86:	9a04      	ldr	r2, [sp, #16]
 8003b88:	b9d8      	cbnz	r0, 8003bc2 <_svfiprintf_r+0xea>
 8003b8a:	06d0      	lsls	r0, r2, #27
 8003b8c:	bf44      	itt	mi
 8003b8e:	2320      	movmi	r3, #32
 8003b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b94:	0711      	lsls	r1, r2, #28
 8003b96:	bf44      	itt	mi
 8003b98:	232b      	movmi	r3, #43	@ 0x2b
 8003b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ba4:	d015      	beq.n	8003bd2 <_svfiprintf_r+0xfa>
 8003ba6:	9a07      	ldr	r2, [sp, #28]
 8003ba8:	4654      	mov	r4, sl
 8003baa:	2000      	movs	r0, #0
 8003bac:	f04f 0c0a 	mov.w	ip, #10
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb6:	3b30      	subs	r3, #48	@ 0x30
 8003bb8:	2b09      	cmp	r3, #9
 8003bba:	d94b      	bls.n	8003c54 <_svfiprintf_r+0x17c>
 8003bbc:	b1b0      	cbz	r0, 8003bec <_svfiprintf_r+0x114>
 8003bbe:	9207      	str	r2, [sp, #28]
 8003bc0:	e014      	b.n	8003bec <_svfiprintf_r+0x114>
 8003bc2:	eba0 0308 	sub.w	r3, r0, r8
 8003bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	9304      	str	r3, [sp, #16]
 8003bce:	46a2      	mov	sl, r4
 8003bd0:	e7d2      	b.n	8003b78 <_svfiprintf_r+0xa0>
 8003bd2:	9b03      	ldr	r3, [sp, #12]
 8003bd4:	1d19      	adds	r1, r3, #4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	9103      	str	r1, [sp, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bfbb      	ittet	lt
 8003bde:	425b      	neglt	r3, r3
 8003be0:	f042 0202 	orrlt.w	r2, r2, #2
 8003be4:	9307      	strge	r3, [sp, #28]
 8003be6:	9307      	strlt	r3, [sp, #28]
 8003be8:	bfb8      	it	lt
 8003bea:	9204      	strlt	r2, [sp, #16]
 8003bec:	7823      	ldrb	r3, [r4, #0]
 8003bee:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bf0:	d10a      	bne.n	8003c08 <_svfiprintf_r+0x130>
 8003bf2:	7863      	ldrb	r3, [r4, #1]
 8003bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bf6:	d132      	bne.n	8003c5e <_svfiprintf_r+0x186>
 8003bf8:	9b03      	ldr	r3, [sp, #12]
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	9203      	str	r2, [sp, #12]
 8003c00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c04:	3402      	adds	r4, #2
 8003c06:	9305      	str	r3, [sp, #20]
 8003c08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ccc <_svfiprintf_r+0x1f4>
 8003c0c:	7821      	ldrb	r1, [r4, #0]
 8003c0e:	2203      	movs	r2, #3
 8003c10:	4650      	mov	r0, sl
 8003c12:	f7fc faed 	bl	80001f0 <memchr>
 8003c16:	b138      	cbz	r0, 8003c28 <_svfiprintf_r+0x150>
 8003c18:	9b04      	ldr	r3, [sp, #16]
 8003c1a:	eba0 000a 	sub.w	r0, r0, sl
 8003c1e:	2240      	movs	r2, #64	@ 0x40
 8003c20:	4082      	lsls	r2, r0
 8003c22:	4313      	orrs	r3, r2
 8003c24:	3401      	adds	r4, #1
 8003c26:	9304      	str	r3, [sp, #16]
 8003c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2c:	4824      	ldr	r0, [pc, #144]	@ (8003cc0 <_svfiprintf_r+0x1e8>)
 8003c2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c32:	2206      	movs	r2, #6
 8003c34:	f7fc fadc 	bl	80001f0 <memchr>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d036      	beq.n	8003caa <_svfiprintf_r+0x1d2>
 8003c3c:	4b21      	ldr	r3, [pc, #132]	@ (8003cc4 <_svfiprintf_r+0x1ec>)
 8003c3e:	bb1b      	cbnz	r3, 8003c88 <_svfiprintf_r+0x1b0>
 8003c40:	9b03      	ldr	r3, [sp, #12]
 8003c42:	3307      	adds	r3, #7
 8003c44:	f023 0307 	bic.w	r3, r3, #7
 8003c48:	3308      	adds	r3, #8
 8003c4a:	9303      	str	r3, [sp, #12]
 8003c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c4e:	4433      	add	r3, r6
 8003c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c52:	e76a      	b.n	8003b2a <_svfiprintf_r+0x52>
 8003c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c58:	460c      	mov	r4, r1
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	e7a8      	b.n	8003bb0 <_svfiprintf_r+0xd8>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	3401      	adds	r4, #1
 8003c62:	9305      	str	r3, [sp, #20]
 8003c64:	4619      	mov	r1, r3
 8003c66:	f04f 0c0a 	mov.w	ip, #10
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c70:	3a30      	subs	r2, #48	@ 0x30
 8003c72:	2a09      	cmp	r2, #9
 8003c74:	d903      	bls.n	8003c7e <_svfiprintf_r+0x1a6>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0c6      	beq.n	8003c08 <_svfiprintf_r+0x130>
 8003c7a:	9105      	str	r1, [sp, #20]
 8003c7c:	e7c4      	b.n	8003c08 <_svfiprintf_r+0x130>
 8003c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c82:	4604      	mov	r4, r0
 8003c84:	2301      	movs	r3, #1
 8003c86:	e7f0      	b.n	8003c6a <_svfiprintf_r+0x192>
 8003c88:	ab03      	add	r3, sp, #12
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	462a      	mov	r2, r5
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <_svfiprintf_r+0x1f0>)
 8003c90:	a904      	add	r1, sp, #16
 8003c92:	4638      	mov	r0, r7
 8003c94:	f3af 8000 	nop.w
 8003c98:	1c42      	adds	r2, r0, #1
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	d1d6      	bne.n	8003c4c <_svfiprintf_r+0x174>
 8003c9e:	89ab      	ldrh	r3, [r5, #12]
 8003ca0:	065b      	lsls	r3, r3, #25
 8003ca2:	f53f af2d 	bmi.w	8003b00 <_svfiprintf_r+0x28>
 8003ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ca8:	e72c      	b.n	8003b04 <_svfiprintf_r+0x2c>
 8003caa:	ab03      	add	r3, sp, #12
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	462a      	mov	r2, r5
 8003cb0:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <_svfiprintf_r+0x1f0>)
 8003cb2:	a904      	add	r1, sp, #16
 8003cb4:	4638      	mov	r0, r7
 8003cb6:	f000 f879 	bl	8003dac <_printf_i>
 8003cba:	e7ed      	b.n	8003c98 <_svfiprintf_r+0x1c0>
 8003cbc:	08004134 	.word	0x08004134
 8003cc0:	0800413e 	.word	0x0800413e
 8003cc4:	00000000 	.word	0x00000000
 8003cc8:	08003a21 	.word	0x08003a21
 8003ccc:	0800413a 	.word	0x0800413a

08003cd0 <_printf_common>:
 8003cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	4616      	mov	r6, r2
 8003cd6:	4698      	mov	r8, r3
 8003cd8:	688a      	ldr	r2, [r1, #8]
 8003cda:	690b      	ldr	r3, [r1, #16]
 8003cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	bfb8      	it	lt
 8003ce4:	4613      	movlt	r3, r2
 8003ce6:	6033      	str	r3, [r6, #0]
 8003ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cec:	4607      	mov	r7, r0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	b10a      	cbz	r2, 8003cf6 <_printf_common+0x26>
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	6033      	str	r3, [r6, #0]
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	0699      	lsls	r1, r3, #26
 8003cfa:	bf42      	ittt	mi
 8003cfc:	6833      	ldrmi	r3, [r6, #0]
 8003cfe:	3302      	addmi	r3, #2
 8003d00:	6033      	strmi	r3, [r6, #0]
 8003d02:	6825      	ldr	r5, [r4, #0]
 8003d04:	f015 0506 	ands.w	r5, r5, #6
 8003d08:	d106      	bne.n	8003d18 <_printf_common+0x48>
 8003d0a:	f104 0a19 	add.w	sl, r4, #25
 8003d0e:	68e3      	ldr	r3, [r4, #12]
 8003d10:	6832      	ldr	r2, [r6, #0]
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	42ab      	cmp	r3, r5
 8003d16:	dc26      	bgt.n	8003d66 <_printf_common+0x96>
 8003d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d1c:	6822      	ldr	r2, [r4, #0]
 8003d1e:	3b00      	subs	r3, #0
 8003d20:	bf18      	it	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	0692      	lsls	r2, r2, #26
 8003d26:	d42b      	bmi.n	8003d80 <_printf_common+0xb0>
 8003d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	4638      	mov	r0, r7
 8003d30:	47c8      	blx	r9
 8003d32:	3001      	adds	r0, #1
 8003d34:	d01e      	beq.n	8003d74 <_printf_common+0xa4>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	6922      	ldr	r2, [r4, #16]
 8003d3a:	f003 0306 	and.w	r3, r3, #6
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	bf02      	ittt	eq
 8003d42:	68e5      	ldreq	r5, [r4, #12]
 8003d44:	6833      	ldreq	r3, [r6, #0]
 8003d46:	1aed      	subeq	r5, r5, r3
 8003d48:	68a3      	ldr	r3, [r4, #8]
 8003d4a:	bf0c      	ite	eq
 8003d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d50:	2500      	movne	r5, #0
 8003d52:	4293      	cmp	r3, r2
 8003d54:	bfc4      	itt	gt
 8003d56:	1a9b      	subgt	r3, r3, r2
 8003d58:	18ed      	addgt	r5, r5, r3
 8003d5a:	2600      	movs	r6, #0
 8003d5c:	341a      	adds	r4, #26
 8003d5e:	42b5      	cmp	r5, r6
 8003d60:	d11a      	bne.n	8003d98 <_printf_common+0xc8>
 8003d62:	2000      	movs	r0, #0
 8003d64:	e008      	b.n	8003d78 <_printf_common+0xa8>
 8003d66:	2301      	movs	r3, #1
 8003d68:	4652      	mov	r2, sl
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	47c8      	blx	r9
 8003d70:	3001      	adds	r0, #1
 8003d72:	d103      	bne.n	8003d7c <_printf_common+0xac>
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7c:	3501      	adds	r5, #1
 8003d7e:	e7c6      	b.n	8003d0e <_printf_common+0x3e>
 8003d80:	18e1      	adds	r1, r4, r3
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	2030      	movs	r0, #48	@ 0x30
 8003d86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d8a:	4422      	add	r2, r4
 8003d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d94:	3302      	adds	r3, #2
 8003d96:	e7c7      	b.n	8003d28 <_printf_common+0x58>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	4638      	mov	r0, r7
 8003da0:	47c8      	blx	r9
 8003da2:	3001      	adds	r0, #1
 8003da4:	d0e6      	beq.n	8003d74 <_printf_common+0xa4>
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7d9      	b.n	8003d5e <_printf_common+0x8e>
	...

08003dac <_printf_i>:
 8003dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	7e0f      	ldrb	r7, [r1, #24]
 8003db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003db4:	2f78      	cmp	r7, #120	@ 0x78
 8003db6:	4691      	mov	r9, r2
 8003db8:	4680      	mov	r8, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	469a      	mov	sl, r3
 8003dbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dc2:	d807      	bhi.n	8003dd4 <_printf_i+0x28>
 8003dc4:	2f62      	cmp	r7, #98	@ 0x62
 8003dc6:	d80a      	bhi.n	8003dde <_printf_i+0x32>
 8003dc8:	2f00      	cmp	r7, #0
 8003dca:	f000 80d1 	beq.w	8003f70 <_printf_i+0x1c4>
 8003dce:	2f58      	cmp	r7, #88	@ 0x58
 8003dd0:	f000 80b8 	beq.w	8003f44 <_printf_i+0x198>
 8003dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ddc:	e03a      	b.n	8003e54 <_printf_i+0xa8>
 8003dde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003de2:	2b15      	cmp	r3, #21
 8003de4:	d8f6      	bhi.n	8003dd4 <_printf_i+0x28>
 8003de6:	a101      	add	r1, pc, #4	@ (adr r1, 8003dec <_printf_i+0x40>)
 8003de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dec:	08003e45 	.word	0x08003e45
 8003df0:	08003e59 	.word	0x08003e59
 8003df4:	08003dd5 	.word	0x08003dd5
 8003df8:	08003dd5 	.word	0x08003dd5
 8003dfc:	08003dd5 	.word	0x08003dd5
 8003e00:	08003dd5 	.word	0x08003dd5
 8003e04:	08003e59 	.word	0x08003e59
 8003e08:	08003dd5 	.word	0x08003dd5
 8003e0c:	08003dd5 	.word	0x08003dd5
 8003e10:	08003dd5 	.word	0x08003dd5
 8003e14:	08003dd5 	.word	0x08003dd5
 8003e18:	08003f57 	.word	0x08003f57
 8003e1c:	08003e83 	.word	0x08003e83
 8003e20:	08003f11 	.word	0x08003f11
 8003e24:	08003dd5 	.word	0x08003dd5
 8003e28:	08003dd5 	.word	0x08003dd5
 8003e2c:	08003f79 	.word	0x08003f79
 8003e30:	08003dd5 	.word	0x08003dd5
 8003e34:	08003e83 	.word	0x08003e83
 8003e38:	08003dd5 	.word	0x08003dd5
 8003e3c:	08003dd5 	.word	0x08003dd5
 8003e40:	08003f19 	.word	0x08003f19
 8003e44:	6833      	ldr	r3, [r6, #0]
 8003e46:	1d1a      	adds	r2, r3, #4
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6032      	str	r2, [r6, #0]
 8003e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e54:	2301      	movs	r3, #1
 8003e56:	e09c      	b.n	8003f92 <_printf_i+0x1e6>
 8003e58:	6833      	ldr	r3, [r6, #0]
 8003e5a:	6820      	ldr	r0, [r4, #0]
 8003e5c:	1d19      	adds	r1, r3, #4
 8003e5e:	6031      	str	r1, [r6, #0]
 8003e60:	0606      	lsls	r6, r0, #24
 8003e62:	d501      	bpl.n	8003e68 <_printf_i+0xbc>
 8003e64:	681d      	ldr	r5, [r3, #0]
 8003e66:	e003      	b.n	8003e70 <_printf_i+0xc4>
 8003e68:	0645      	lsls	r5, r0, #25
 8003e6a:	d5fb      	bpl.n	8003e64 <_printf_i+0xb8>
 8003e6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e70:	2d00      	cmp	r5, #0
 8003e72:	da03      	bge.n	8003e7c <_printf_i+0xd0>
 8003e74:	232d      	movs	r3, #45	@ 0x2d
 8003e76:	426d      	negs	r5, r5
 8003e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e7c:	4858      	ldr	r0, [pc, #352]	@ (8003fe0 <_printf_i+0x234>)
 8003e7e:	230a      	movs	r3, #10
 8003e80:	e011      	b.n	8003ea6 <_printf_i+0xfa>
 8003e82:	6821      	ldr	r1, [r4, #0]
 8003e84:	6833      	ldr	r3, [r6, #0]
 8003e86:	0608      	lsls	r0, r1, #24
 8003e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e8c:	d402      	bmi.n	8003e94 <_printf_i+0xe8>
 8003e8e:	0649      	lsls	r1, r1, #25
 8003e90:	bf48      	it	mi
 8003e92:	b2ad      	uxthmi	r5, r5
 8003e94:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e96:	4852      	ldr	r0, [pc, #328]	@ (8003fe0 <_printf_i+0x234>)
 8003e98:	6033      	str	r3, [r6, #0]
 8003e9a:	bf14      	ite	ne
 8003e9c:	230a      	movne	r3, #10
 8003e9e:	2308      	moveq	r3, #8
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ea6:	6866      	ldr	r6, [r4, #4]
 8003ea8:	60a6      	str	r6, [r4, #8]
 8003eaa:	2e00      	cmp	r6, #0
 8003eac:	db05      	blt.n	8003eba <_printf_i+0x10e>
 8003eae:	6821      	ldr	r1, [r4, #0]
 8003eb0:	432e      	orrs	r6, r5
 8003eb2:	f021 0104 	bic.w	r1, r1, #4
 8003eb6:	6021      	str	r1, [r4, #0]
 8003eb8:	d04b      	beq.n	8003f52 <_printf_i+0x1a6>
 8003eba:	4616      	mov	r6, r2
 8003ebc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ec0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ec4:	5dc7      	ldrb	r7, [r0, r7]
 8003ec6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eca:	462f      	mov	r7, r5
 8003ecc:	42bb      	cmp	r3, r7
 8003ece:	460d      	mov	r5, r1
 8003ed0:	d9f4      	bls.n	8003ebc <_printf_i+0x110>
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d10b      	bne.n	8003eee <_printf_i+0x142>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	07df      	lsls	r7, r3, #31
 8003eda:	d508      	bpl.n	8003eee <_printf_i+0x142>
 8003edc:	6923      	ldr	r3, [r4, #16]
 8003ede:	6861      	ldr	r1, [r4, #4]
 8003ee0:	4299      	cmp	r1, r3
 8003ee2:	bfde      	ittt	le
 8003ee4:	2330      	movle	r3, #48	@ 0x30
 8003ee6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003eea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003eee:	1b92      	subs	r2, r2, r6
 8003ef0:	6122      	str	r2, [r4, #16]
 8003ef2:	f8cd a000 	str.w	sl, [sp]
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	aa03      	add	r2, sp, #12
 8003efa:	4621      	mov	r1, r4
 8003efc:	4640      	mov	r0, r8
 8003efe:	f7ff fee7 	bl	8003cd0 <_printf_common>
 8003f02:	3001      	adds	r0, #1
 8003f04:	d14a      	bne.n	8003f9c <_printf_i+0x1f0>
 8003f06:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0a:	b004      	add	sp, #16
 8003f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	f043 0320 	orr.w	r3, r3, #32
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	4832      	ldr	r0, [pc, #200]	@ (8003fe4 <_printf_i+0x238>)
 8003f1a:	2778      	movs	r7, #120	@ 0x78
 8003f1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	6831      	ldr	r1, [r6, #0]
 8003f24:	061f      	lsls	r7, r3, #24
 8003f26:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f2a:	d402      	bmi.n	8003f32 <_printf_i+0x186>
 8003f2c:	065f      	lsls	r7, r3, #25
 8003f2e:	bf48      	it	mi
 8003f30:	b2ad      	uxthmi	r5, r5
 8003f32:	6031      	str	r1, [r6, #0]
 8003f34:	07d9      	lsls	r1, r3, #31
 8003f36:	bf44      	itt	mi
 8003f38:	f043 0320 	orrmi.w	r3, r3, #32
 8003f3c:	6023      	strmi	r3, [r4, #0]
 8003f3e:	b11d      	cbz	r5, 8003f48 <_printf_i+0x19c>
 8003f40:	2310      	movs	r3, #16
 8003f42:	e7ad      	b.n	8003ea0 <_printf_i+0xf4>
 8003f44:	4826      	ldr	r0, [pc, #152]	@ (8003fe0 <_printf_i+0x234>)
 8003f46:	e7e9      	b.n	8003f1c <_printf_i+0x170>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	f023 0320 	bic.w	r3, r3, #32
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	e7f6      	b.n	8003f40 <_printf_i+0x194>
 8003f52:	4616      	mov	r6, r2
 8003f54:	e7bd      	b.n	8003ed2 <_printf_i+0x126>
 8003f56:	6833      	ldr	r3, [r6, #0]
 8003f58:	6825      	ldr	r5, [r4, #0]
 8003f5a:	6961      	ldr	r1, [r4, #20]
 8003f5c:	1d18      	adds	r0, r3, #4
 8003f5e:	6030      	str	r0, [r6, #0]
 8003f60:	062e      	lsls	r6, r5, #24
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	d501      	bpl.n	8003f6a <_printf_i+0x1be>
 8003f66:	6019      	str	r1, [r3, #0]
 8003f68:	e002      	b.n	8003f70 <_printf_i+0x1c4>
 8003f6a:	0668      	lsls	r0, r5, #25
 8003f6c:	d5fb      	bpl.n	8003f66 <_printf_i+0x1ba>
 8003f6e:	8019      	strh	r1, [r3, #0]
 8003f70:	2300      	movs	r3, #0
 8003f72:	6123      	str	r3, [r4, #16]
 8003f74:	4616      	mov	r6, r2
 8003f76:	e7bc      	b.n	8003ef2 <_printf_i+0x146>
 8003f78:	6833      	ldr	r3, [r6, #0]
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	6032      	str	r2, [r6, #0]
 8003f7e:	681e      	ldr	r6, [r3, #0]
 8003f80:	6862      	ldr	r2, [r4, #4]
 8003f82:	2100      	movs	r1, #0
 8003f84:	4630      	mov	r0, r6
 8003f86:	f7fc f933 	bl	80001f0 <memchr>
 8003f8a:	b108      	cbz	r0, 8003f90 <_printf_i+0x1e4>
 8003f8c:	1b80      	subs	r0, r0, r6
 8003f8e:	6060      	str	r0, [r4, #4]
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	6123      	str	r3, [r4, #16]
 8003f94:	2300      	movs	r3, #0
 8003f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f9a:	e7aa      	b.n	8003ef2 <_printf_i+0x146>
 8003f9c:	6923      	ldr	r3, [r4, #16]
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4640      	mov	r0, r8
 8003fa4:	47d0      	blx	sl
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d0ad      	beq.n	8003f06 <_printf_i+0x15a>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	079b      	lsls	r3, r3, #30
 8003fae:	d413      	bmi.n	8003fd8 <_printf_i+0x22c>
 8003fb0:	68e0      	ldr	r0, [r4, #12]
 8003fb2:	9b03      	ldr	r3, [sp, #12]
 8003fb4:	4298      	cmp	r0, r3
 8003fb6:	bfb8      	it	lt
 8003fb8:	4618      	movlt	r0, r3
 8003fba:	e7a6      	b.n	8003f0a <_printf_i+0x15e>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4632      	mov	r2, r6
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	47d0      	blx	sl
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d09d      	beq.n	8003f06 <_printf_i+0x15a>
 8003fca:	3501      	adds	r5, #1
 8003fcc:	68e3      	ldr	r3, [r4, #12]
 8003fce:	9903      	ldr	r1, [sp, #12]
 8003fd0:	1a5b      	subs	r3, r3, r1
 8003fd2:	42ab      	cmp	r3, r5
 8003fd4:	dcf2      	bgt.n	8003fbc <_printf_i+0x210>
 8003fd6:	e7eb      	b.n	8003fb0 <_printf_i+0x204>
 8003fd8:	2500      	movs	r5, #0
 8003fda:	f104 0619 	add.w	r6, r4, #25
 8003fde:	e7f5      	b.n	8003fcc <_printf_i+0x220>
 8003fe0:	08004145 	.word	0x08004145
 8003fe4:	08004156 	.word	0x08004156

08003fe8 <memmove>:
 8003fe8:	4288      	cmp	r0, r1
 8003fea:	b510      	push	{r4, lr}
 8003fec:	eb01 0402 	add.w	r4, r1, r2
 8003ff0:	d902      	bls.n	8003ff8 <memmove+0x10>
 8003ff2:	4284      	cmp	r4, r0
 8003ff4:	4623      	mov	r3, r4
 8003ff6:	d807      	bhi.n	8004008 <memmove+0x20>
 8003ff8:	1e43      	subs	r3, r0, #1
 8003ffa:	42a1      	cmp	r1, r4
 8003ffc:	d008      	beq.n	8004010 <memmove+0x28>
 8003ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004006:	e7f8      	b.n	8003ffa <memmove+0x12>
 8004008:	4402      	add	r2, r0
 800400a:	4601      	mov	r1, r0
 800400c:	428a      	cmp	r2, r1
 800400e:	d100      	bne.n	8004012 <memmove+0x2a>
 8004010:	bd10      	pop	{r4, pc}
 8004012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800401a:	e7f7      	b.n	800400c <memmove+0x24>

0800401c <_sbrk_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4d06      	ldr	r5, [pc, #24]	@ (8004038 <_sbrk_r+0x1c>)
 8004020:	2300      	movs	r3, #0
 8004022:	4604      	mov	r4, r0
 8004024:	4608      	mov	r0, r1
 8004026:	602b      	str	r3, [r5, #0]
 8004028:	f7fc ff0e 	bl	8000e48 <_sbrk>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d102      	bne.n	8004036 <_sbrk_r+0x1a>
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	b103      	cbz	r3, 8004036 <_sbrk_r+0x1a>
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	20000268 	.word	0x20000268

0800403c <memcpy>:
 800403c:	440a      	add	r2, r1
 800403e:	4291      	cmp	r1, r2
 8004040:	f100 33ff 	add.w	r3, r0, #4294967295
 8004044:	d100      	bne.n	8004048 <memcpy+0xc>
 8004046:	4770      	bx	lr
 8004048:	b510      	push	{r4, lr}
 800404a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800404e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004052:	4291      	cmp	r1, r2
 8004054:	d1f9      	bne.n	800404a <memcpy+0xe>
 8004056:	bd10      	pop	{r4, pc}

08004058 <_realloc_r>:
 8004058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405c:	4607      	mov	r7, r0
 800405e:	4614      	mov	r4, r2
 8004060:	460d      	mov	r5, r1
 8004062:	b921      	cbnz	r1, 800406e <_realloc_r+0x16>
 8004064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004068:	4611      	mov	r1, r2
 800406a:	f7ff bc4d 	b.w	8003908 <_malloc_r>
 800406e:	b92a      	cbnz	r2, 800407c <_realloc_r+0x24>
 8004070:	f7ff fbde 	bl	8003830 <_free_r>
 8004074:	4625      	mov	r5, r4
 8004076:	4628      	mov	r0, r5
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407c:	f000 f81a 	bl	80040b4 <_malloc_usable_size_r>
 8004080:	4284      	cmp	r4, r0
 8004082:	4606      	mov	r6, r0
 8004084:	d802      	bhi.n	800408c <_realloc_r+0x34>
 8004086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800408a:	d8f4      	bhi.n	8004076 <_realloc_r+0x1e>
 800408c:	4621      	mov	r1, r4
 800408e:	4638      	mov	r0, r7
 8004090:	f7ff fc3a 	bl	8003908 <_malloc_r>
 8004094:	4680      	mov	r8, r0
 8004096:	b908      	cbnz	r0, 800409c <_realloc_r+0x44>
 8004098:	4645      	mov	r5, r8
 800409a:	e7ec      	b.n	8004076 <_realloc_r+0x1e>
 800409c:	42b4      	cmp	r4, r6
 800409e:	4622      	mov	r2, r4
 80040a0:	4629      	mov	r1, r5
 80040a2:	bf28      	it	cs
 80040a4:	4632      	movcs	r2, r6
 80040a6:	f7ff ffc9 	bl	800403c <memcpy>
 80040aa:	4629      	mov	r1, r5
 80040ac:	4638      	mov	r0, r7
 80040ae:	f7ff fbbf 	bl	8003830 <_free_r>
 80040b2:	e7f1      	b.n	8004098 <_realloc_r+0x40>

080040b4 <_malloc_usable_size_r>:
 80040b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b8:	1f18      	subs	r0, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bfbc      	itt	lt
 80040be:	580b      	ldrlt	r3, [r1, r0]
 80040c0:	18c0      	addlt	r0, r0, r3
 80040c2:	4770      	bx	lr

080040c4 <_init>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr

080040d0 <_fini>:
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	bf00      	nop
 80040d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d6:	bc08      	pop	{r3}
 80040d8:	469e      	mov	lr, r3
 80040da:	4770      	bx	lr
