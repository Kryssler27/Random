
Schaltbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004598  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004738  08004738  00005738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d8  080047d8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080047d8  080047d8  000057d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e0  080047e0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e0  080047e0  000057e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047e4  080047e4  000057e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080047e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000005c  08004844  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004844  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8ef  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c88  00000000  00000000  0001297b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00014608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000989  00000000  00000000  00015230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015941  00000000  00000000  00015bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e24b  00000000  00000000  0002b4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba7e  00000000  00000000  00039745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c51c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000387c  00000000  00000000  000c5208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c8a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004720 	.word	0x08004720

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004720 	.word	0x08004720

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b0b4      	sub	sp, #208	@ 0xd0
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fecb 	bl	8001320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 fb8d 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fc8f 	bl	8000eb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000592:	f000 fc6d 	bl	8000e70 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000596:	f000 fc41 	bl	8000e1c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800059a:	f000 fbef 	bl	8000d7c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800059e:	48bc      	ldr	r0, [pc, #752]	@ (8000890 <main+0x310>)
 80005a0:	f002 fabe 	bl	8002b20 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);// µC Status 3
 80005a4:	2201      	movs	r2, #1
 80005a6:	2104      	movs	r1, #4
 80005a8:	48ba      	ldr	r0, [pc, #744]	@ (8000894 <main+0x314>)
 80005aa:	f001 fddd 	bl	8002168 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);// µC Status 2
 80005ae:	2201      	movs	r2, #1
 80005b0:	2102      	movs	r1, #2
 80005b2:	48b8      	ldr	r0, [pc, #736]	@ (8000894 <main+0x314>)
 80005b4:	f001 fdd8 	bl	8002168 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);// µC Status 1
 80005b8:	2201      	movs	r2, #1
 80005ba:	2101      	movs	r1, #1
 80005bc:	48b5      	ldr	r0, [pc, #724]	@ (8000894 <main+0x314>)
 80005be:	f001 fdd3 	bl	8002168 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);// µC ILOCK
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c8:	48b3      	ldr	r0, [pc, #716]	@ (8000898 <main+0x318>)
 80005ca:	f001 fdcd 	bl	8002168 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80005ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d2:	f000 ff17 	bl	8001404 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0); // µC Status 3
 80005d6:	2200      	movs	r2, #0
 80005d8:	2104      	movs	r1, #4
 80005da:	48ae      	ldr	r0, [pc, #696]	@ (8000894 <main+0x314>)
 80005dc:	f001 fdc4 	bl	8002168 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0); // µC Status 2
 80005e0:	2200      	movs	r2, #0
 80005e2:	2102      	movs	r1, #2
 80005e4:	48ab      	ldr	r0, [pc, #684]	@ (8000894 <main+0x314>)
 80005e6:	f001 fdbf 	bl	8002168 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0); // µC Status 1
 80005ea:	2200      	movs	r2, #0
 80005ec:	2101      	movs	r1, #1
 80005ee:	48a9      	ldr	r0, [pc, #676]	@ (8000894 <main+0x314>)
 80005f0:	f001 fdba 	bl	8002168 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);// µC ILOCK
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005fa:	48a7      	ldr	r0, [pc, #668]	@ (8000898 <main+0x318>)
 80005fc:	f001 fdb4 	bl	8002168 <HAL_GPIO_WritePin>

  //Check Fire button
  	uint8_t pData1[20] ="";
 8000600:	2300      	movs	r3, #0
 8000602:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000606:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
    uint8_t txData1[5] = "RGVN\r";
 8000614:	4aa1      	ldr	r2, [pc, #644]	@ (800089c <main+0x31c>)
 8000616:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800061a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061e:	6018      	str	r0, [r3, #0]
 8000620:	3304      	adds	r3, #4
 8000622:	7019      	strb	r1, [r3, #0]
    uint16_t CalSetup[5] ={0,0,0,0,0};
 8000624:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	811a      	strh	r2, [r3, #8]
    uint8_t StartFlag[5]={0,0,0,0,0};
 8000630:	4a9b      	ldr	r2, [pc, #620]	@ (80008a0 <main+0x320>)
 8000632:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000636:	e892 0003 	ldmia.w	r2, {r0, r1}
 800063a:	6018      	str	r0, [r3, #0]
 800063c:	3304      	adds	r3, #4
 800063e:	7019      	strb	r1, [r3, #0]

  ///////////////////CHECK Serial Number
    HAL_UART_Transmit(&huart1, "\r", 1, 100);
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	2201      	movs	r2, #1
 8000644:	4997      	ldr	r1, [pc, #604]	@ (80008a4 <main+0x324>)
 8000646:	4898      	ldr	r0, [pc, #608]	@ (80008a8 <main+0x328>)
 8000648:	f002 fd70 	bl	800312c <HAL_UART_Transmit>

    HAL_UART_Receive_DMA(&huart1, pData1, 20);
 800064c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000650:	2214      	movs	r2, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4894      	ldr	r0, [pc, #592]	@ (80008a8 <main+0x328>)
 8000656:	f002 fdf4 	bl	8003242 <HAL_UART_Receive_DMA>
    HAL_Delay(20);
 800065a:	2014      	movs	r0, #20
 800065c:	f000 fed2 	bl	8001404 <HAL_Delay>
    HAL_UART_DMAStop(&huart1);
 8000660:	4891      	ldr	r0, [pc, #580]	@ (80008a8 <main+0x328>)
 8000662:	f002 fe13 	bl	800328c <HAL_UART_DMAStop>
    HAL_Delay(10);
 8000666:	200a      	movs	r0, #10
 8000668:	f000 fecc 	bl	8001404 <HAL_Delay>
    HAL_UART_Receive_DMA(&huart1, pData1, 20);
 800066c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000670:	2214      	movs	r2, #20
 8000672:	4619      	mov	r1, r3
 8000674:	488c      	ldr	r0, [pc, #560]	@ (80008a8 <main+0x328>)
 8000676:	f002 fde4 	bl	8003242 <HAL_UART_Receive_DMA>
    HAL_Delay(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f000 fec2 	bl	8001404 <HAL_Delay>
    HAL_UART_Transmit(&huart1, txData1, sizeof(txData1), 100);
 8000680:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8000684:	2364      	movs	r3, #100	@ 0x64
 8000686:	2205      	movs	r2, #5
 8000688:	4887      	ldr	r0, [pc, #540]	@ (80008a8 <main+0x328>)
 800068a:	f002 fd4f 	bl	800312c <HAL_UART_Transmit>
    HAL_Delay(10);
 800068e:	200a      	movs	r0, #10
 8000690:	f000 feb8 	bl	8001404 <HAL_Delay>
    HAL_UART_Receive_DMA(&huart1, pData1, 20);
 8000694:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000698:	2214      	movs	r2, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4882      	ldr	r0, [pc, #520]	@ (80008a8 <main+0x328>)
 800069e:	f002 fdd0 	bl	8003242 <HAL_UART_Receive_DMA>
    HAL_UART_DMAStop(&huart1);
 80006a2:	4881      	ldr	r0, [pc, #516]	@ (80008a8 <main+0x328>)
 80006a4:	f002 fdf2 	bl	800328c <HAL_UART_DMAStop>
    HAL_Delay(10);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f000 feab 	bl	8001404 <HAL_Delay>

    if(pData1[5]=='1' && pData1[6]=='5' && pData1[7]=='3' && pData1[8]=='9' && pData1[9]=='9'){
 80006ae:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80006b2:	2b31      	cmp	r3, #49	@ 0x31
 80006b4:	d126      	bne.n	8000704 <main+0x184>
 80006b6:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80006ba:	2b35      	cmp	r3, #53	@ 0x35
 80006bc:	d122      	bne.n	8000704 <main+0x184>
 80006be:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80006c2:	2b33      	cmp	r3, #51	@ 0x33
 80006c4:	d11e      	bne.n	8000704 <main+0x184>
 80006c6:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 80006ca:	2b39      	cmp	r3, #57	@ 0x39
 80006cc:	d11a      	bne.n	8000704 <main+0x184>
 80006ce:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80006d2:	2b39      	cmp	r3, #57	@ 0x39
 80006d4:	d116      	bne.n	8000704 <main+0x184>
  	  StartFlag[0]=1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  	  CalSetup[0] =1000;
 80006dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
  	  CalSetup[1] =1500;
 80006e4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80006e8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
  	  CalSetup[2] =2000;
 80006ec:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80006f0:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  	  CalSetup[3] =2500;
 80006f4:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80006f8:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  	  CalSetup[4] =3000;
 80006fc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000700:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
    }
    if(pData1[5]=='1' && pData1[6]=='5' && pData1[7]=='4' && pData1[8]=='0' && pData1[9]=='0'){
 8000704:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8000708:	2b31      	cmp	r3, #49	@ 0x31
 800070a:	d137      	bne.n	800077c <main+0x1fc>
 800070c:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8000710:	2b35      	cmp	r3, #53	@ 0x35
 8000712:	d133      	bne.n	800077c <main+0x1fc>
 8000714:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000718:	2b34      	cmp	r3, #52	@ 0x34
 800071a:	d12f      	bne.n	800077c <main+0x1fc>
 800071c:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8000720:	2b30      	cmp	r3, #48	@ 0x30
 8000722:	d12b      	bne.n	800077c <main+0x1fc>
 8000724:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8000728:	2b30      	cmp	r3, #48	@ 0x30
 800072a:	d127      	bne.n	800077c <main+0x1fc>
  	  StartFlag[0]=2;
 800072c:	2302      	movs	r3, #2
 800072e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  	  CalSetup[0] =2000;
 8000732:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000736:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
  	  CalSetup[1] =2000;
 800073a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
  	  CalSetup[2] =2000;
 8000742:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000746:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  	  CalSetup[3] =2000;
 800074a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800074e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  	  CalSetup[4] =2000;
 8000752:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000756:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
    }
    while(StartFlag[0]==0){
 800075a:	e00f      	b.n	800077c <main+0x1fc>
  	HAL_Delay(1000);
 800075c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000760:	f000 fe50 	bl	8001404 <HAL_Delay>
  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 8000764:	2102      	movs	r1, #2
 8000766:	484b      	ldr	r0, [pc, #300]	@ (8000894 <main+0x314>)
 8000768:	f001 fd17 	bl	800219a <HAL_GPIO_TogglePin>
  	HAL_Delay(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000770:	f000 fe48 	bl	8001404 <HAL_Delay>
  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 8000774:	2102      	movs	r1, #2
 8000776:	4847      	ldr	r0, [pc, #284]	@ (8000894 <main+0x314>)
 8000778:	f001 fd0f 	bl	800219a <HAL_GPIO_TogglePin>
    while(StartFlag[0]==0){
 800077c:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0eb      	beq.n	800075c <main+0x1dc>
    }
  ///////////////////Change Setting
    uint8_t pData2[20] ="";
 8000784:	2300      	movs	r3, #0
 8000786:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000788:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
    uint8_t txData2[7] = "RLMDXR\r";
 8000796:	4a45      	ldr	r2, [pc, #276]	@ (80008ac <main+0x32c>)
 8000798:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800079c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a0:	6018      	str	r0, [r3, #0]
 80007a2:	3304      	adds	r3, #4
 80007a4:	8019      	strh	r1, [r3, #0]
 80007a6:	3302      	adds	r3, #2
 80007a8:	0c0a      	lsrs	r2, r1, #16
 80007aa:	701a      	strb	r2, [r3, #0]
    //HAL_Delay(10);

    //HAL_UART_Receive_DMA(&huart1, pData2, 10);
    HAL_UART_Receive_DMA(&huart1, pData2, 20);
 80007ac:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80007b0:	2214      	movs	r2, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	483c      	ldr	r0, [pc, #240]	@ (80008a8 <main+0x328>)
 80007b6:	f002 fd44 	bl	8003242 <HAL_UART_Receive_DMA>
    HAL_Delay(10);
 80007ba:	200a      	movs	r0, #10
 80007bc:	f000 fe22 	bl	8001404 <HAL_Delay>
    HAL_UART_Transmit(&huart1, txData2, sizeof(txData2), 100);
 80007c0:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80007c4:	2364      	movs	r3, #100	@ 0x64
 80007c6:	2207      	movs	r2, #7
 80007c8:	4837      	ldr	r0, [pc, #220]	@ (80008a8 <main+0x328>)
 80007ca:	f002 fcaf 	bl	800312c <HAL_UART_Transmit>
    HAL_Delay(10);
 80007ce:	200a      	movs	r0, #10
 80007d0:	f000 fe18 	bl	8001404 <HAL_Delay>

    HAL_UART_Receive_DMA(&huart1, pData2, 20);
 80007d4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80007d8:	2214      	movs	r2, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4832      	ldr	r0, [pc, #200]	@ (80008a8 <main+0x328>)
 80007de:	f002 fd30 	bl	8003242 <HAL_UART_Receive_DMA>
    HAL_UART_DMAStop(&huart1);
 80007e2:	4831      	ldr	r0, [pc, #196]	@ (80008a8 <main+0x328>)
 80007e4:	f002 fd52 	bl	800328c <HAL_UART_DMAStop>
    HAL_Delay(50);
 80007e8:	2032      	movs	r0, #50	@ 0x32
 80007ea:	f000 fe0b 	bl	8001404 <HAL_Delay>

    //170 == LMDX extern modul digital
    if(pData2[7]==170){
 80007ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80007f2:	2baa      	cmp	r3, #170	@ 0xaa
 80007f4:	d13b      	bne.n	800086e <main+0x2ee>
  	  StartFlag[1]=1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  	    }
    }


    ///////////////////Interlock
      uint8_t pData3[20] ="";
 80007fc:	2300      	movs	r3, #0
 80007fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000800:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
      uint8_t txData3[5] = "RGS\r";
 800080e:	4a28      	ldr	r2, [pc, #160]	@ (80008b0 <main+0x330>)
 8000810:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000818:	6018      	str	r0, [r3, #0]
 800081a:	3304      	adds	r3, #4
 800081c:	7019      	strb	r1, [r3, #0]
      //HAL_Delay(10);

      HAL_UART_Receive_DMA(&huart1, pData3, 20);
 800081e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000822:	2214      	movs	r2, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4820      	ldr	r0, [pc, #128]	@ (80008a8 <main+0x328>)
 8000828:	f002 fd0b 	bl	8003242 <HAL_UART_Receive_DMA>
      HAL_Delay(20);
 800082c:	2014      	movs	r0, #20
 800082e:	f000 fde9 	bl	8001404 <HAL_Delay>
      HAL_UART_Transmit(&huart1, txData3, sizeof(txData2), 100);
 8000832:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000836:	2364      	movs	r3, #100	@ 0x64
 8000838:	2207      	movs	r2, #7
 800083a:	481b      	ldr	r0, [pc, #108]	@ (80008a8 <main+0x328>)
 800083c:	f002 fc76 	bl	800312c <HAL_UART_Transmit>
      HAL_Delay(10);
 8000840:	200a      	movs	r0, #10
 8000842:	f000 fddf 	bl	8001404 <HAL_Delay>

      HAL_UART_Receive_DMA(&huart1, pData3, 20);
 8000846:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800084a:	2214      	movs	r2, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4816      	ldr	r0, [pc, #88]	@ (80008a8 <main+0x328>)
 8000850:	f002 fcf7 	bl	8003242 <HAL_UART_Receive_DMA>
      HAL_UART_DMAStop(&huart1);
 8000854:	4814      	ldr	r0, [pc, #80]	@ (80008a8 <main+0x328>)
 8000856:	f002 fd19 	bl	800328c <HAL_UART_DMAStop>
      HAL_Delay(10);
 800085a:	200a      	movs	r0, #10
 800085c:	f000 fdd2 	bl	8001404 <HAL_Delay>

      if((pData3[8] & 0b00001)== 0){  //muss 1 sein
 8000860:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	2b00      	cmp	r3, #0
 800086a:	d177      	bne.n	800095c <main+0x3dc>
 800086c:	e022      	b.n	80008b4 <main+0x334>
  	  	HAL_Delay(1000);
 800086e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000872:	f000 fdc7 	bl	8001404 <HAL_Delay>
  	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 8000876:	2102      	movs	r1, #2
 8000878:	4806      	ldr	r0, [pc, #24]	@ (8000894 <main+0x314>)
 800087a:	f001 fc8e 	bl	800219a <HAL_GPIO_TogglePin>
  	  	HAL_Delay(500);
 800087e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000882:	f000 fdbf 	bl	8001404 <HAL_Delay>
  	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 8000886:	2102      	movs	r1, #2
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <main+0x314>)
 800088a:	f001 fc86 	bl	800219a <HAL_GPIO_TogglePin>
  	  	HAL_Delay(1000);
 800088e:	e7ee      	b.n	800086e <main+0x2ee>
 8000890:	20000078 	.word	0x20000078
 8000894:	40020000 	.word	0x40020000
 8000898:	40020800 	.word	0x40020800
 800089c:	08004744 	.word	0x08004744
 80008a0:	0800474c 	.word	0x0800474c
 80008a4:	08004738 	.word	0x08004738
 80008a8:	200000c0 	.word	0x200000c0
 80008ac:	08004754 	.word	0x08004754
 80008b0:	0800475c 	.word	0x0800475c
      	StartFlag[2]=1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
      }
  //3084   interlock aus
  //3085	 interlock aus

      ///////////////////Interlock
        uint8_t pData4[20] ="";
 80008ba:	2300      	movs	r3, #0
 80008bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80008be:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
        uint8_t txData4[10] = "RLVA\r";
 80008cc:	4a8a      	ldr	r2, [pc, #552]	@ (8000af8 <main+0x578>)
 80008ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80008d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008d6:	6018      	str	r0, [r3, #0]
 80008d8:	3304      	adds	r3, #4
 80008da:	8019      	strh	r1, [r3, #0]
 80008dc:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
        //HAL_Delay(10);
        HAL_UART_Transmit(&huart1, "\r", 1, 100);
 80008e4:	2364      	movs	r3, #100	@ 0x64
 80008e6:	2201      	movs	r2, #1
 80008e8:	4984      	ldr	r1, [pc, #528]	@ (8000afc <main+0x57c>)
 80008ea:	4885      	ldr	r0, [pc, #532]	@ (8000b00 <main+0x580>)
 80008ec:	f002 fc1e 	bl	800312c <HAL_UART_Transmit>

        HAL_UART_Receive_DMA(&huart1, pData4, 20);
 80008f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008f4:	2214      	movs	r2, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4881      	ldr	r0, [pc, #516]	@ (8000b00 <main+0x580>)
 80008fa:	f002 fca2 	bl	8003242 <HAL_UART_Receive_DMA>
        HAL_Delay(20);
 80008fe:	2014      	movs	r0, #20
 8000900:	f000 fd80 	bl	8001404 <HAL_Delay>
        HAL_UART_DMAStop(&huart1);
 8000904:	487e      	ldr	r0, [pc, #504]	@ (8000b00 <main+0x580>)
 8000906:	f002 fcc1 	bl	800328c <HAL_UART_DMAStop>
        HAL_UART_Receive_DMA(&huart1, pData4, 20);
 800090a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800090e:	2214      	movs	r2, #20
 8000910:	4619      	mov	r1, r3
 8000912:	487b      	ldr	r0, [pc, #492]	@ (8000b00 <main+0x580>)
 8000914:	f002 fc95 	bl	8003242 <HAL_UART_Receive_DMA>
        HAL_Delay(10);
 8000918:	200a      	movs	r0, #10
 800091a:	f000 fd73 	bl	8001404 <HAL_Delay>
        HAL_UART_Transmit(&huart1, txData4, sizeof(txData4), 100);
 800091e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000922:	2364      	movs	r3, #100	@ 0x64
 8000924:	220a      	movs	r2, #10
 8000926:	4876      	ldr	r0, [pc, #472]	@ (8000b00 <main+0x580>)
 8000928:	f002 fc00 	bl	800312c <HAL_UART_Transmit>
        HAL_Delay(10);
 800092c:	200a      	movs	r0, #10
 800092e:	f000 fd69 	bl	8001404 <HAL_Delay>

        HAL_UART_Receive_DMA(&huart1, pData4, 20);
 8000932:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000936:	2214      	movs	r2, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4871      	ldr	r0, [pc, #452]	@ (8000b00 <main+0x580>)
 800093c:	f002 fc81 	bl	8003242 <HAL_UART_Receive_DMA>
        HAL_Delay(10);
 8000940:	200a      	movs	r0, #10
 8000942:	f000 fd5f 	bl	8001404 <HAL_Delay>
        HAL_UART_DMAStop(&huart1);
 8000946:	486e      	ldr	r0, [pc, #440]	@ (8000b00 <main+0x580>)
 8000948:	f002 fca0 	bl	800328c <HAL_UART_DMAStop>
        HAL_Delay(10);
 800094c:	200a      	movs	r0, #10
 800094e:	f000 fd59 	bl	8001404 <HAL_Delay>
        if(pData4[5]==32 && pData4[6]==32 && pData4[7]=='0'){
 8000952:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000956:	2b20      	cmp	r3, #32
 8000958:	d011      	beq.n	800097e <main+0x3fe>
 800095a:	e023      	b.n	80009a4 <main+0x424>
      		HAL_Delay(500);
 800095c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000960:	f000 fd50 	bl	8001404 <HAL_Delay>
      		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 8000964:	2102      	movs	r1, #2
 8000966:	4867      	ldr	r0, [pc, #412]	@ (8000b04 <main+0x584>)
 8000968:	f001 fc17 	bl	800219a <HAL_GPIO_TogglePin>
      	  	HAL_Delay(500);
 800096c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000970:	f000 fd48 	bl	8001404 <HAL_Delay>
      	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 8000974:	2102      	movs	r1, #2
 8000976:	4863      	ldr	r0, [pc, #396]	@ (8000b04 <main+0x584>)
 8000978:	f001 fc0f 	bl	800219a <HAL_GPIO_TogglePin>
      		HAL_Delay(500);
 800097c:	e7ee      	b.n	800095c <main+0x3dc>
        if(pData4[5]==32 && pData4[6]==32 && pData4[7]=='0'){
 800097e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000982:	2b20      	cmp	r3, #32
 8000984:	d10e      	bne.n	80009a4 <main+0x424>
 8000986:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800098a:	2b30      	cmp	r3, #48	@ 0x30
 800098c:	d10a      	bne.n	80009a4 <main+0x424>
        	  StartFlag[3]=1;
 800098e:	2301      	movs	r3, #1
 8000990:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            	  	HAL_Delay(500);
            	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
            	}
            }

        if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8000994:	2108      	movs	r1, #8
 8000996:	485c      	ldr	r0, [pc, #368]	@ (8000b08 <main+0x588>)
 8000998:	f001 fbce 	bl	8002138 <HAL_GPIO_ReadPin>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d011      	beq.n	80009c6 <main+0x446>
 80009a2:	e01b      	b.n	80009dc <main+0x45c>
            		HAL_Delay(2000);
 80009a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009a8:	f000 fd2c 	bl	8001404 <HAL_Delay>
            		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 80009ac:	2102      	movs	r1, #2
 80009ae:	4855      	ldr	r0, [pc, #340]	@ (8000b04 <main+0x584>)
 80009b0:	f001 fbf3 	bl	800219a <HAL_GPIO_TogglePin>
            	  	HAL_Delay(500);
 80009b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009b8:	f000 fd24 	bl	8001404 <HAL_Delay>
            	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 80009bc:	2102      	movs	r1, #2
 80009be:	4851      	ldr	r0, [pc, #324]	@ (8000b04 <main+0x584>)
 80009c0:	f001 fbeb 	bl	800219a <HAL_GPIO_TogglePin>
            		HAL_Delay(2000);
 80009c4:	e7ee      	b.n	80009a4 <main+0x424>
        {
        	StartFlag[4]=1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				HAL_Delay(500);
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
			}
        }

        if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 80009cc:	2110      	movs	r1, #16
 80009ce:	484e      	ldr	r0, [pc, #312]	@ (8000b08 <main+0x588>)
 80009d0:	f001 fbb2 	bl	8002138 <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d11c      	bne.n	8000a14 <main+0x494>
 80009da:	e010      	b.n	80009fe <main+0x47e>
				HAL_Delay(4000);
 80009dc:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80009e0:	f000 fd10 	bl	8001404 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 80009e4:	2102      	movs	r1, #2
 80009e6:	4847      	ldr	r0, [pc, #284]	@ (8000b04 <main+0x584>)
 80009e8:	f001 fbd7 	bl	800219a <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 80009ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009f0:	f000 fd08 	bl	8001404 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 80009f4:	2102      	movs	r1, #2
 80009f6:	4843      	ldr	r0, [pc, #268]	@ (8000b04 <main+0x584>)
 80009f8:	f001 fbcf 	bl	800219a <HAL_GPIO_TogglePin>
				HAL_Delay(4000);
 80009fc:	e7ee      	b.n	80009dc <main+0x45c>
        {
        	StartFlag[5]=1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
				HAL_Delay(500);
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
			}
        }
        if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))
 8000a04:	2120      	movs	r1, #32
 8000a06:	4840      	ldr	r0, [pc, #256]	@ (8000b08 <main+0x588>)
 8000a08:	f001 fb96 	bl	8002138 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d11b      	bne.n	8000a4a <main+0x4ca>
 8000a12:	e010      	b.n	8000a36 <main+0x4b6>
				HAL_Delay(5000);
 8000a14:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a18:	f000 fcf4 	bl	8001404 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4839      	ldr	r0, [pc, #228]	@ (8000b04 <main+0x584>)
 8000a20:	f001 fbbb 	bl	800219a <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 8000a24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a28:	f000 fcec 	bl	8001404 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4835      	ldr	r0, [pc, #212]	@ (8000b04 <main+0x584>)
 8000a30:	f001 fbb3 	bl	800219a <HAL_GPIO_TogglePin>
				HAL_Delay(5000);
 8000a34:	e7ee      	b.n	8000a14 <main+0x494>
        {
        	StartFlag[6]=1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

int PinNumber=0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
int CalSetupAlt=0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000a48:	e010      	b.n	8000a6c <main+0x4ec>
				HAL_Delay(6000);
 8000a4a:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000a4e:	f000 fcd9 	bl	8001404 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 8000a52:	2102      	movs	r1, #2
 8000a54:	482b      	ldr	r0, [pc, #172]	@ (8000b04 <main+0x584>)
 8000a56:	f001 fba0 	bl	800219a <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 8000a5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a5e:	f000 fcd1 	bl	8001404 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);// µC Status 2
 8000a62:	2102      	movs	r1, #2
 8000a64:	4827      	ldr	r0, [pc, #156]	@ (8000b04 <main+0x584>)
 8000a66:	f001 fb98 	bl	800219a <HAL_GPIO_TogglePin>
				HAL_Delay(6000);
 8000a6a:	e7ee      	b.n	8000a4a <main+0x4ca>
char test[5];
  while (1)
  {
	  int PinNr=8;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	  int PinN=8;
 8000a72:	2308      	movs	r3, #8
 8000a74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	  for(int x=0; x<=4;x++){
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000a7e:	e017      	b.n	8000ab0 <main+0x530>
		  if(HAL_GPIO_ReadPin(GPIOA, PinN)){
 8000a80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4619      	mov	r1, r3
 8000a88:	481e      	ldr	r0, [pc, #120]	@ (8000b04 <main+0x584>)
 8000a8a:	f001 fb55 	bl	8002138 <HAL_GPIO_ReadPin>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <main+0x51c>
			  PinNr= PinN;
 8000a94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		  }
		  PinN=PinN<<1;
 8000a9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	  for(int x=0; x<=4;x++){
 8000aa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000aaa:	3301      	adds	r3, #1
 8000aac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000ab0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	dde3      	ble.n	8000a80 <main+0x500>
	  }
	  if(PinNr==16){
 8000ab8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000abc:	2b10      	cmp	r3, #16
 8000abe:	d103      	bne.n	8000ac8 <main+0x548>
		PinNumber=1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ac6:	e024      	b.n	8000b12 <main+0x592>
	  }
	  else if(PinNr==32){
 8000ac8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000acc:	2b20      	cmp	r3, #32
 8000ace:	d103      	bne.n	8000ad8 <main+0x558>
		PinNumber=2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ad6:	e01c      	b.n	8000b12 <main+0x592>
	  }
	  else if(PinNr==64){
 8000ad8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000adc:	2b40      	cmp	r3, #64	@ 0x40
 8000ade:	d103      	bne.n	8000ae8 <main+0x568>
		PinNumber=3;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ae6:	e014      	b.n	8000b12 <main+0x592>
	  }
	  else if(PinNr==128){
 8000ae8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000aec:	2b80      	cmp	r3, #128	@ 0x80
 8000aee:	d10d      	bne.n	8000b0c <main+0x58c>
		PinNumber=4;
 8000af0:	2304      	movs	r3, #4
 8000af2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000af6:	e00c      	b.n	8000b12 <main+0x592>
 8000af8:	08004764 	.word	0x08004764
 8000afc:	08004738 	.word	0x08004738
 8000b00:	200000c0 	.word	0x200000c0
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400
	  }else{
		PinNumber=0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  }

	  	CalSetupAlt=CalSetup[PinNumber];
 8000b12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	33d0      	adds	r3, #208	@ 0xd0
 8000b1a:	443b      	add	r3, r7
 8000b1c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8000b20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	  	///////////////////Interlock
	  	if(CalSetupAlt==CalSetup[PinNumber]){
 8000b24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	33d0      	adds	r3, #208	@ 0xd0
 8000b2c:	443b      	add	r3, r7
 8000b2e:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8000b32:	461a      	mov	r2, r3
 8000b34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d16f      	bne.n	8000c1c <main+0x69c>
			uint8_t pData5[17] ="";
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	731a      	strb	r2, [r3, #12]
			uint8_t txData5[20] = "RLCT";
 8000b4e:	4a4f      	ldr	r2, [pc, #316]	@ (8000c8c <main+0x70c>)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b56:	6018      	str	r0, [r3, #0]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	7019      	strb	r1, [r3, #0]
 8000b5c:	f107 0309 	add.w	r3, r7, #9
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	f8c3 200b 	str.w	r2, [r3, #11]
			sprintf(test, "%d",CalSetup[PinNumber] );
 8000b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	33d0      	adds	r3, #208	@ 0xd0
 8000b74:	443b      	add	r3, r7
 8000b76:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b80:	4943      	ldr	r1, [pc, #268]	@ (8000c90 <main+0x710>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 f91c 	bl	8003dc0 <siprintf>
			strcat(txData5 , test);
 8000b88:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 f93d 	bl	8003e10 <strcat>
			strcat(txData5 , "\r ");
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb21 	bl	80001e0 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a3b      	ldr	r2, [pc, #236]	@ (8000c94 <main+0x714>)
 8000ba8:	8811      	ldrh	r1, [r2, #0]
 8000baa:	7892      	ldrb	r2, [r2, #2]
 8000bac:	8019      	strh	r1, [r3, #0]
 8000bae:	709a      	strb	r2, [r3, #2]
			//HAL_Delay(10);
			HAL_UART_Transmit(&huart1, "\r", 1, 100);
 8000bb0:	2364      	movs	r3, #100	@ 0x64
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4938      	ldr	r1, [pc, #224]	@ (8000c98 <main+0x718>)
 8000bb6:	4839      	ldr	r0, [pc, #228]	@ (8000c9c <main+0x71c>)
 8000bb8:	f002 fab8 	bl	800312c <HAL_UART_Transmit>

			HAL_UART_Receive_DMA(&huart1, pData5, 17);
 8000bbc:	f107 0318 	add.w	r3, r7, #24
 8000bc0:	2211      	movs	r2, #17
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4835      	ldr	r0, [pc, #212]	@ (8000c9c <main+0x71c>)
 8000bc6:	f002 fb3c 	bl	8003242 <HAL_UART_Receive_DMA>
			HAL_Delay(20);
 8000bca:	2014      	movs	r0, #20
 8000bcc:	f000 fc1a 	bl	8001404 <HAL_Delay>
			HAL_UART_DMAStop(&huart1);
 8000bd0:	4832      	ldr	r0, [pc, #200]	@ (8000c9c <main+0x71c>)
 8000bd2:	f002 fb5b 	bl	800328c <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart1, pData5, 17);
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	2211      	movs	r2, #17
 8000bdc:	4619      	mov	r1, r3
 8000bde:	482f      	ldr	r0, [pc, #188]	@ (8000c9c <main+0x71c>)
 8000be0:	f002 fb2f 	bl	8003242 <HAL_UART_Receive_DMA>
			HAL_Delay(10);
 8000be4:	200a      	movs	r0, #10
 8000be6:	f000 fc0d 	bl	8001404 <HAL_Delay>
			HAL_UART_Transmit(&huart1, txData5, sizeof(txData5), 100);
 8000bea:	1d39      	adds	r1, r7, #4
 8000bec:	2364      	movs	r3, #100	@ 0x64
 8000bee:	2214      	movs	r2, #20
 8000bf0:	482a      	ldr	r0, [pc, #168]	@ (8000c9c <main+0x71c>)
 8000bf2:	f002 fa9b 	bl	800312c <HAL_UART_Transmit>
			HAL_Delay(10);
 8000bf6:	200a      	movs	r0, #10
 8000bf8:	f000 fc04 	bl	8001404 <HAL_Delay>

			HAL_UART_Receive_DMA(&huart1, pData5, 17);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	2211      	movs	r2, #17
 8000c02:	4619      	mov	r1, r3
 8000c04:	4825      	ldr	r0, [pc, #148]	@ (8000c9c <main+0x71c>)
 8000c06:	f002 fb1c 	bl	8003242 <HAL_UART_Receive_DMA>
			HAL_Delay(10);
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f000 fbfa 	bl	8001404 <HAL_Delay>
			HAL_UART_DMAStop(&huart1);
 8000c10:	4822      	ldr	r0, [pc, #136]	@ (8000c9c <main+0x71c>)
 8000c12:	f002 fb3b 	bl	800328c <HAL_UART_DMAStop>
			HAL_Delay(10);
 8000c16:	200a      	movs	r0, #10
 8000c18:	f000 fbf4 	bl	8001404 <HAL_Delay>
	  	}
	  	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) && !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8000c1c:	2110      	movs	r1, #16
 8000c1e:	4820      	ldr	r0, [pc, #128]	@ (8000ca0 <main+0x720>)
 8000c20:	f001 fa8a 	bl	8002138 <HAL_GPIO_ReadPin>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f47f af20 	bne.w	8000a6c <main+0x4ec>
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	481c      	ldr	r0, [pc, #112]	@ (8000ca0 <main+0x720>)
 8000c30:	f001 fa82 	bl	8002138 <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f47f af18 	bne.w	8000a6c <main+0x4ec>
	  	{
	  		// ready fire
	  		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) && !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4818      	ldr	r0, [pc, #96]	@ (8000ca0 <main+0x720>)
 8000c40:	f001 fa7a 	bl	8002138 <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f47f af10 	bne.w	8000a6c <main+0x4ec>
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4814      	ldr	r0, [pc, #80]	@ (8000ca0 <main+0x720>)
 8000c50:	f001 fa72 	bl	8002138 <HAL_GPIO_ReadPin>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f47f af08 	bne.w	8000a6c <main+0x4ec>
	  		{
	  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c62:	480f      	ldr	r0, [pc, #60]	@ (8000ca0 <main+0x720>)
 8000c64:	f001 fa80 	bl	8002168 <HAL_GPIO_WritePin>
	  			  __HAL_TIM_SET_COUNTER(&htim1,0);
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <main+0x724>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	@ 0x24
	  			  while(__HAL_TIM_GET_COUNTER(&htim1)< 100);
 8000c70:	bf00      	nop
 8000c72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <main+0x724>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c78:	2b63      	cmp	r3, #99	@ 0x63
 8000c7a:	d9fa      	bls.n	8000c72 <main+0x6f2>

	  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c82:	4807      	ldr	r0, [pc, #28]	@ (8000ca0 <main+0x720>)
 8000c84:	f001 fa70 	bl	8002168 <HAL_GPIO_WritePin>
  {
 8000c88:	e6f0      	b.n	8000a6c <main+0x4ec>
 8000c8a:	bf00      	nop
 8000c8c:	08004770 	.word	0x08004770
 8000c90:	0800473c 	.word	0x0800473c
 8000c94:	08004740 	.word	0x08004740
 8000c98:	08004738 	.word	0x08004738
 8000c9c:	200000c0 	.word	0x200000c0
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	20000078 	.word	0x20000078

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	@ 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2230      	movs	r2, #48	@ 0x30
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 f8a2 	bl	8003e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <SystemClock_Config+0xcc>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	4a27      	ldr	r2, [pc, #156]	@ (8000d74 <SystemClock_Config+0xcc>)
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cdc:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <SystemClock_Config+0xcc>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <SystemClock_Config+0xd0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cf4:	4a20      	ldr	r2, [pc, #128]	@ (8000d78 <SystemClock_Config+0xd0>)
 8000cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <SystemClock_Config+0xd0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d20:	2360      	movs	r3, #96	@ 0x60
 8000d22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d24:	2304      	movs	r3, #4
 8000d26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fa4d 	bl	80021d0 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d3c:	f000 f978 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2302      	movs	r3, #2
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 fcaf 	bl	80026c0 <HAL_RCC_ClockConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d68:	f000 f962 	bl	8001030 <Error_Handler>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3750      	adds	r7, #80	@ 0x50
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40007000 	.word	0x40007000

08000d7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d98:	4b1e      	ldr	r3, [pc, #120]	@ (8000e14 <MX_TIM1_Init+0x98>)
 8000d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000e18 <MX_TIM1_Init+0x9c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_TIM1_Init+0x98>)
 8000da0:	2231      	movs	r2, #49	@ 0x31
 8000da2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <MX_TIM1_Init+0x98>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_TIM1_Init+0x98>)
 8000dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000db0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db2:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <MX_TIM1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <MX_TIM1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_TIM1_Init+0x98>)
 8000dc0:	2280      	movs	r2, #128	@ 0x80
 8000dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dc4:	4813      	ldr	r0, [pc, #76]	@ (8000e14 <MX_TIM1_Init+0x98>)
 8000dc6:	f001 fe5b 	bl	8002a80 <HAL_TIM_Base_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000dd0:	f000 f92e 	bl	8001030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	4619      	mov	r1, r3
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <MX_TIM1_Init+0x98>)
 8000de2:	f001 fef7 	bl	8002bd4 <HAL_TIM_ConfigClockSource>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000dec:	f000 f920 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_TIM1_Init+0x98>)
 8000dfe:	f002 f8d7 	bl	8002fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e08:	f000 f912 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000078 	.word	0x20000078
 8000e18:	40010000 	.word	0x40010000

08000e1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <MX_USART1_UART_Init+0x4c>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	@ (8000e6c <MX_USART1_UART_Init+0x50>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <MX_USART1_UART_Init+0x4c>)
 8000e28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <MX_USART1_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <MX_USART1_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <MX_USART1_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <MX_USART1_UART_Init+0x4c>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <MX_USART1_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <MX_USART1_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_USART1_UART_Init+0x4c>)
 8000e54:	f002 f91a 	bl	800308c <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e5e:	f000 f8e7 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000c0 	.word	0x200000c0
 8000e6c:	40011000 	.word	0x40011000

08000e70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_DMA_Init+0x3c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000eac <MX_DMA_Init+0x3c>)
 8000e80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_DMA_Init+0x3c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	203a      	movs	r0, #58	@ 0x3a
 8000e98:	f000 fbb3 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e9c:	203a      	movs	r0, #58	@ 0x3a
 8000e9e:	f000 fbcc 	bl	800163a <HAL_NVIC_EnableIRQ>

}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b55      	ldr	r3, [pc, #340]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a54      	ldr	r2, [pc, #336]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b52      	ldr	r3, [pc, #328]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a4d      	ldr	r2, [pc, #308]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b47      	ldr	r3, [pc, #284]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a46      	ldr	r2, [pc, #280]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b44      	ldr	r3, [pc, #272]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b40      	ldr	r3, [pc, #256]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a3f      	ldr	r2, [pc, #252]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001020 <MX_GPIO_Init+0x170>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f3c:	4839      	ldr	r0, [pc, #228]	@ (8001024 <MX_GPIO_Init+0x174>)
 8000f3e:	f001 f913 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2107      	movs	r1, #7
 8000f46:	4838      	ldr	r0, [pc, #224]	@ (8001028 <MX_GPIO_Init+0x178>)
 8000f48:	f001 f90e 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000f52:	4836      	ldr	r0, [pc, #216]	@ (800102c <MX_GPIO_Init+0x17c>)
 8000f54:	f001 f908 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	482c      	ldr	r0, [pc, #176]	@ (8001024 <MX_GPIO_Init+0x174>)
 8000f72:	f000 ff5d 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f76:	2301      	movs	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4826      	ldr	r0, [pc, #152]	@ (8001028 <MX_GPIO_Init+0x178>)
 8000f8e:	f000 ff4f 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000f92:	2306      	movs	r3, #6
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	481f      	ldr	r0, [pc, #124]	@ (8001028 <MX_GPIO_Init+0x178>)
 8000faa:	f000 ff41 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fae:	23f0      	movs	r3, #240	@ 0xf0
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4819      	ldr	r0, [pc, #100]	@ (8001028 <MX_GPIO_Init+0x178>)
 8000fc2:	f000 ff35 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000fc6:	237b      	movs	r3, #123	@ 0x7b
 8000fc8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4814      	ldr	r0, [pc, #80]	@ (800102c <MX_GPIO_Init+0x17c>)
 8000fda:	f000 ff29 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fde:	2380      	movs	r3, #128	@ 0x80
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480d      	ldr	r0, [pc, #52]	@ (800102c <MX_GPIO_Init+0x17c>)
 8000ff6:	f000 ff1b 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ffa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001004:	2302      	movs	r3, #2
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	@ (800102c <MX_GPIO_Init+0x17c>)
 8001014:	f000 ff0c 	bl	8001e30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	@ 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40020800 	.word	0x40020800
 8001028:	40020000 	.word	0x40020000
 800102c:	40020400 	.word	0x40020400

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <Error_Handler+0x8>

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <HAL_MspInit+0x4c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104a:	4a0f      	ldr	r2, [pc, #60]	@ (8001088 <HAL_MspInit+0x4c>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001050:	6453      	str	r3, [r2, #68]	@ 0x44
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <HAL_MspInit+0x4c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <HAL_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	4a08      	ldr	r2, [pc, #32]	@ (8001088 <HAL_MspInit+0x4c>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106c:	6413      	str	r3, [r2, #64]	@ 0x40
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_MspInit+0x4c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <HAL_TIM_Base_MspInit+0x3c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10d      	bne.n	80010ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_TIM_Base_MspInit+0x40>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a09      	ldr	r2, [pc, #36]	@ (80010cc <HAL_TIM_Base_MspInit+0x40>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <HAL_TIM_Base_MspInit+0x40>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a31      	ldr	r2, [pc, #196]	@ (80011b4 <HAL_UART_MspInit+0xe4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d15b      	bne.n	80011aa <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b30      	ldr	r3, [pc, #192]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a2f      	ldr	r2, [pc, #188]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b29      	ldr	r3, [pc, #164]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a28      	ldr	r2, [pc, #160]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800112a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800113c:	2307      	movs	r3, #7
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	481d      	ldr	r0, [pc, #116]	@ (80011bc <HAL_UART_MspInit+0xec>)
 8001148:	f000 fe72 	bl	8001e30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800114c:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 800114e:	4a1d      	ldr	r2, [pc, #116]	@ (80011c4 <HAL_UART_MspInit+0xf4>)
 8001150:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001152:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 8001154:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001158:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115a:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 8001168:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800116c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 8001182:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001186:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001188:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800118e:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 8001190:	f000 fa6e 	bl	8001670 <HAL_DMA_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800119a:	f7ff ff49 	bl	8001030 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a07      	ldr	r2, [pc, #28]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 80011a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011a4:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	@ 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40011000 	.word	0x40011000
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	20000108 	.word	0x20000108
 80011c4:	40026440 	.word	0x40026440

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <NMI_Handler+0x4>

080011d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <MemManage_Handler+0x4>

080011e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <UsageFault_Handler+0x4>

080011f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121e:	f000 f8d1 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800122c:	4802      	ldr	r0, [pc, #8]	@ (8001238 <DMA2_Stream2_IRQHandler+0x10>)
 800122e:	f000 fb95 	bl	800195c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000108 	.word	0x20000108

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f002 fde0 	bl	8003e30 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20010000 	.word	0x20010000
 800129c:	00000400 	.word	0x00000400
 80012a0:	20000168 	.word	0x20000168
 80012a4:	200002b8 	.word	0x200002b8

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001304 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012d0:	f7ff ffea 	bl	80012a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012d6:	490d      	ldr	r1, [pc, #52]	@ (800130c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fa:	f002 fd9f 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fe:	f7ff f93f 	bl	8000580 <main>
  bx  lr    
 8001302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001304:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001310:	080047e8 	.word	0x080047e8
  ldr r2, =_sbss
 8001314:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001318:	200002b8 	.word	0x200002b8

0800131c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC_IRQHandler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001324:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0d      	ldr	r2, [pc, #52]	@ (8001360 <HAL_Init+0x40>)
 800132a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800132e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <HAL_Init+0x40>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800133a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	@ (8001360 <HAL_Init+0x40>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 f94f 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	200f      	movs	r0, #15
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff fe72 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023c00 	.word	0x40023c00

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f967 	bl	8001656 <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f92f 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	@ (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	2000016c 	.word	0x2000016c

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	2000016c 	.word	0x2000016c

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	@ (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	@ (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	@ (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	@ 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff29 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff3e 	bl	8001494 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff8e 	bl	8001540 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff31 	bl	80014b0 <__NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffa2 	bl	80015a8 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff feb6 	bl	80013ec <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e099      	b.n	80017c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ac:	e00f      	b.n	80016ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ae:	f7ff fe9d 	bl	80013ec <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d908      	bls.n	80016ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2220      	movs	r2, #32
 80016c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2203      	movs	r2, #3
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e078      	b.n	80017c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1e8      	bne.n	80016ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <HAL_DMA_Init+0x158>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4313      	orrs	r3, r2
 800171e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	2b04      	cmp	r3, #4
 8001726:	d107      	bne.n	8001738 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001730:	4313      	orrs	r3, r2
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f023 0307 	bic.w	r3, r3, #7
 800174e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4313      	orrs	r3, r2
 8001758:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	2b04      	cmp	r3, #4
 8001760:	d117      	bne.n	8001792 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fadf 	bl	8001d38 <DMA_CheckFifoParam>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2240      	movs	r2, #64	@ 0x40
 8001784:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800178e:	2301      	movs	r3, #1
 8001790:	e016      	b.n	80017c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fa96 	bl	8001ccc <DMA_CalcBaseAndBitshift>
 80017a0:	4603      	mov	r3, r0
 80017a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a8:	223f      	movs	r2, #63	@ 0x3f
 80017aa:	409a      	lsls	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	f010803f 	.word	0xf010803f

080017cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_DMA_Start_IT+0x26>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e040      	b.n	8001874 <HAL_DMA_Start_IT+0xa8>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d12f      	bne.n	8001866 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fa28 	bl	8001c70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001824:	223f      	movs	r2, #63	@ 0x3f
 8001826:	409a      	lsls	r2, r3
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0216 	orr.w	r2, r2, #22
 800183a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	2b00      	cmp	r3, #0
 8001842:	d007      	beq.n	8001854 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0208 	orr.w	r2, r2, #8
 8001852:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e005      	b.n	8001872 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800186e:	2302      	movs	r3, #2
 8001870:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001872:	7dfb      	ldrb	r3, [r7, #23]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001888:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800188a:	f7ff fdaf 	bl	80013ec <HAL_GetTick>
 800188e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d008      	beq.n	80018ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2280      	movs	r2, #128	@ 0x80
 80018a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e052      	b.n	8001954 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0216 	bic.w	r2, r2, #22
 80018bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d103      	bne.n	80018de <HAL_DMA_Abort+0x62>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0208 	bic.w	r2, r2, #8
 80018ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fe:	e013      	b.n	8001928 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001900:	f7ff fd74 	bl	80013ec <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b05      	cmp	r3, #5
 800190c:	d90c      	bls.n	8001928 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2220      	movs	r2, #32
 8001912:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2203      	movs	r2, #3
 8001918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e015      	b.n	8001954 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1e4      	bne.n	8001900 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193a:	223f      	movs	r2, #63	@ 0x3f
 800193c:	409a      	lsls	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001968:	4b8e      	ldr	r3, [pc, #568]	@ (8001ba4 <HAL_DMA_IRQHandler+0x248>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a8e      	ldr	r2, [pc, #568]	@ (8001ba8 <HAL_DMA_IRQHandler+0x24c>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001986:	2208      	movs	r2, #8
 8001988:	409a      	lsls	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01a      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0204 	bic.w	r2, r2, #4
 80019ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b4:	2208      	movs	r2, #8
 80019b6:	409a      	lsls	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019cc:	2201      	movs	r2, #1
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d012      	beq.n	80019fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	2201      	movs	r2, #1
 80019ec:	409a      	lsls	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a02:	2204      	movs	r2, #4
 8001a04:	409a      	lsls	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d012      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a20:	2204      	movs	r2, #4
 8001a22:	409a      	lsls	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a2c:	f043 0204 	orr.w	r2, r3, #4
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a38:	2210      	movs	r2, #16
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d043      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d03c      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d018      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d108      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d024      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
 8001a8a:	e01f      	b.n	8001acc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01b      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
 8001a9c:	e016      	b.n	8001acc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d107      	bne.n	8001abc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0208 	bic.w	r2, r2, #8
 8001aba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 808f 	beq.w	8001bfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8087 	beq.w	8001bfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af2:	2220      	movs	r2, #32
 8001af4:	409a      	lsls	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d136      	bne.n	8001b74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0216 	bic.w	r2, r2, #22
 8001b14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d103      	bne.n	8001b36 <HAL_DMA_IRQHandler+0x1da>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0208 	bic.w	r2, r2, #8
 8001b44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4a:	223f      	movs	r2, #63	@ 0x3f
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d07e      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	4798      	blx	r3
        }
        return;
 8001b72:	e079      	b.n	8001c68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d01d      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d031      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
 8001ba0:	e02c      	b.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d023      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
 8001bbc:	e01e      	b.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10f      	bne.n	8001bec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0210 	bic.w	r2, r2, #16
 8001bda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d032      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d022      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2205      	movs	r2, #5
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d307      	bcc.n	8001c44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f2      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x2cc>
 8001c42:	e000      	b.n	8001c46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
 8001c66:	e000      	b.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c68:	bf00      	nop
    }
  }
}
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b40      	cmp	r3, #64	@ 0x40
 8001c9c:	d108      	bne.n	8001cb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cae:	e007      	b.n	8001cc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3b10      	subs	r3, #16
 8001cdc:	4a14      	ldr	r2, [pc, #80]	@ (8001d30 <DMA_CalcBaseAndBitshift+0x64>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ce6:	4a13      	ldr	r2, [pc, #76]	@ (8001d34 <DMA_CalcBaseAndBitshift+0x68>)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d909      	bls.n	8001d0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d02:	f023 0303 	bic.w	r3, r3, #3
 8001d06:	1d1a      	adds	r2, r3, #4
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d0c:	e007      	b.n	8001d1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d16:	f023 0303 	bic.w	r3, r3, #3
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	aaaaaaab 	.word	0xaaaaaaab
 8001d34:	0800479c 	.word	0x0800479c

08001d38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d11f      	bne.n	8001d92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d856      	bhi.n	8001e06 <DMA_CheckFifoParam+0xce>
 8001d58:	a201      	add	r2, pc, #4	@ (adr r2, 8001d60 <DMA_CheckFifoParam+0x28>)
 8001d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5e:	bf00      	nop
 8001d60:	08001d71 	.word	0x08001d71
 8001d64:	08001d83 	.word	0x08001d83
 8001d68:	08001d71 	.word	0x08001d71
 8001d6c:	08001e07 	.word	0x08001e07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d046      	beq.n	8001e0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d80:	e043      	b.n	8001e0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d8a:	d140      	bne.n	8001e0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d90:	e03d      	b.n	8001e0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d9a:	d121      	bne.n	8001de0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d837      	bhi.n	8001e12 <DMA_CheckFifoParam+0xda>
 8001da2:	a201      	add	r2, pc, #4	@ (adr r2, 8001da8 <DMA_CheckFifoParam+0x70>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001db9 	.word	0x08001db9
 8001dac:	08001dbf 	.word	0x08001dbf
 8001db0:	08001db9 	.word	0x08001db9
 8001db4:	08001dd1 	.word	0x08001dd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
      break;
 8001dbc:	e030      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d025      	beq.n	8001e16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dce:	e022      	b.n	8001e16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001dd8:	d11f      	bne.n	8001e1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dde:	e01c      	b.n	8001e1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d903      	bls.n	8001dee <DMA_CheckFifoParam+0xb6>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d003      	beq.n	8001df4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dec:	e018      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
      break;
 8001df2:	e015      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00e      	beq.n	8001e1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
      break;
 8001e04:	e00b      	b.n	8001e1e <DMA_CheckFifoParam+0xe6>
      break;
 8001e06:	bf00      	nop
 8001e08:	e00a      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;
 8001e0a:	bf00      	nop
 8001e0c:	e008      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;
 8001e0e:	bf00      	nop
 8001e10:	e006      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;
 8001e12:	bf00      	nop
 8001e14:	e004      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;
 8001e16:	bf00      	nop
 8001e18:	e002      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e1a:	bf00      	nop
 8001e1c:	e000      	b.n	8001e20 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	@ 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e159      	b.n	8002100 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	f040 8148 	bne.w	80020fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d005      	beq.n	8001e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d130      	bne.n	8001ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 0201 	and.w	r2, r3, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d017      	beq.n	8001f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d123      	bne.n	8001f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	08da      	lsrs	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3208      	adds	r2, #8
 8001f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	08da      	lsrs	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3208      	adds	r2, #8
 8001f6e:	69b9      	ldr	r1, [r7, #24]
 8001f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0203 	and.w	r2, r3, #3
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80a2 	beq.w	80020fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b57      	ldr	r3, [pc, #348]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	4a56      	ldr	r2, [pc, #344]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 8001fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc6:	4b54      	ldr	r3, [pc, #336]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd2:	4a52      	ldr	r2, [pc, #328]	@ (800211c <HAL_GPIO_Init+0x2ec>)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a49      	ldr	r2, [pc, #292]	@ (8002120 <HAL_GPIO_Init+0x2f0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d019      	beq.n	8002032 <HAL_GPIO_Init+0x202>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a48      	ldr	r2, [pc, #288]	@ (8002124 <HAL_GPIO_Init+0x2f4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0x1fe>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a47      	ldr	r2, [pc, #284]	@ (8002128 <HAL_GPIO_Init+0x2f8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00d      	beq.n	800202a <HAL_GPIO_Init+0x1fa>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a46      	ldr	r2, [pc, #280]	@ (800212c <HAL_GPIO_Init+0x2fc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x1f6>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a45      	ldr	r2, [pc, #276]	@ (8002130 <HAL_GPIO_Init+0x300>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_GPIO_Init+0x1f2>
 800201e:	2304      	movs	r3, #4
 8002020:	e008      	b.n	8002034 <HAL_GPIO_Init+0x204>
 8002022:	2307      	movs	r3, #7
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x204>
 8002026:	2303      	movs	r3, #3
 8002028:	e004      	b.n	8002034 <HAL_GPIO_Init+0x204>
 800202a:	2302      	movs	r3, #2
 800202c:	e002      	b.n	8002034 <HAL_GPIO_Init+0x204>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x204>
 8002032:	2300      	movs	r3, #0
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	f002 0203 	and.w	r2, r2, #3
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	4093      	lsls	r3, r2
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002044:	4935      	ldr	r1, [pc, #212]	@ (800211c <HAL_GPIO_Init+0x2ec>)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002052:	4b38      	ldr	r3, [pc, #224]	@ (8002134 <HAL_GPIO_Init+0x304>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002076:	4a2f      	ldr	r2, [pc, #188]	@ (8002134 <HAL_GPIO_Init+0x304>)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800207c:	4b2d      	ldr	r3, [pc, #180]	@ (8002134 <HAL_GPIO_Init+0x304>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a0:	4a24      	ldr	r2, [pc, #144]	@ (8002134 <HAL_GPIO_Init+0x304>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020a6:	4b23      	ldr	r3, [pc, #140]	@ (8002134 <HAL_GPIO_Init+0x304>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002134 <HAL_GPIO_Init+0x304>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d0:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <HAL_GPIO_Init+0x304>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002134 <HAL_GPIO_Init+0x304>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3301      	adds	r3, #1
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	2b0f      	cmp	r3, #15
 8002104:	f67f aea2 	bls.w	8001e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3724      	adds	r7, #36	@ 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	40013800 	.word	0x40013800
 8002120:	40020000 	.word	0x40020000
 8002124:	40020400 	.word	0x40020400
 8002128:	40020800 	.word	0x40020800
 800212c:	40020c00 	.word	0x40020c00
 8002130:	40021000 	.word	0x40021000
 8002134:	40013c00 	.word	0x40013c00

08002138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	e001      	b.n	800215a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800215a:	7bfb      	ldrb	r3, [r7, #15]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002184:	e003      	b.n	800218e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	619a      	str	r2, [r3, #24]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	041a      	lsls	r2, r3, #16
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	400b      	ands	r3, r1
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	619a      	str	r2, [r3, #24]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e267      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d075      	beq.n	80022da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ee:	4b88      	ldr	r3, [pc, #544]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d00c      	beq.n	8002214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fa:	4b85      	ldr	r3, [pc, #532]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002202:	2b08      	cmp	r3, #8
 8002204:	d112      	bne.n	800222c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002206:	4b82      	ldr	r3, [pc, #520]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002212:	d10b      	bne.n	800222c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	4b7e      	ldr	r3, [pc, #504]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d05b      	beq.n	80022d8 <HAL_RCC_OscConfig+0x108>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d157      	bne.n	80022d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e242      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002234:	d106      	bne.n	8002244 <HAL_RCC_OscConfig+0x74>
 8002236:	4b76      	ldr	r3, [pc, #472]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a75      	ldr	r2, [pc, #468]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e01d      	b.n	8002280 <HAL_RCC_OscConfig+0xb0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x98>
 800224e:	4b70      	ldr	r3, [pc, #448]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a6f      	ldr	r2, [pc, #444]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b6d      	ldr	r3, [pc, #436]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6c      	ldr	r2, [pc, #432]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0xb0>
 8002268:	4b69      	ldr	r3, [pc, #420]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a68      	ldr	r2, [pc, #416]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b66      	ldr	r3, [pc, #408]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a65      	ldr	r2, [pc, #404]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800227e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d013      	beq.n	80022b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff f8b0 	bl	80013ec <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff f8ac 	bl	80013ec <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	@ 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e207      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0xc0>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff f89c 	bl	80013ec <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b8:	f7ff f898 	bl	80013ec <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	@ 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1f3      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	4b51      	ldr	r3, [pc, #324]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0xe8>
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d063      	beq.n	80023ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022f2:	4b47      	ldr	r3, [pc, #284]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d11c      	bne.n	8002338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fe:	4b44      	ldr	r3, [pc, #272]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d116      	bne.n	8002338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	4b41      	ldr	r3, [pc, #260]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x152>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e1c7      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	4b3b      	ldr	r3, [pc, #236]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4937      	ldr	r1, [pc, #220]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	e03a      	b.n	80023ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002340:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <HAL_RCC_OscConfig+0x244>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7ff f851 	bl	80013ec <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234e:	f7ff f84d 	bl	80013ec <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e1a8      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	4b2b      	ldr	r3, [pc, #172]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b28      	ldr	r3, [pc, #160]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4925      	ldr	r1, [pc, #148]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
 8002380:	e015      	b.n	80023ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	4b24      	ldr	r3, [pc, #144]	@ (8002414 <HAL_RCC_OscConfig+0x244>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7ff f830 	bl	80013ec <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002390:	f7ff f82c 	bl	80013ec <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e187      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d036      	beq.n	8002428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d016      	beq.n	80023f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c2:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <HAL_RCC_OscConfig+0x248>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c8:	f7ff f810 	bl	80013ec <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d0:	f7ff f80c 	bl	80013ec <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e167      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <HAL_RCC_OscConfig+0x240>)
 80023e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x200>
 80023ee:	e01b      	b.n	8002428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f0:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <HAL_RCC_OscConfig+0x248>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f6:	f7fe fff9 	bl	80013ec <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	e00e      	b.n	800241c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fe:	f7fe fff5 	bl	80013ec <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d907      	bls.n	800241c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e150      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
 8002410:	40023800 	.word	0x40023800
 8002414:	42470000 	.word	0x42470000
 8002418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	4b88      	ldr	r3, [pc, #544]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 800241e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1ea      	bne.n	80023fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8097 	beq.w	8002564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243a:	4b81      	ldr	r3, [pc, #516]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10f      	bne.n	8002466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	4b7d      	ldr	r3, [pc, #500]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	4a7c      	ldr	r2, [pc, #496]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002454:	6413      	str	r3, [r2, #64]	@ 0x40
 8002456:	4b7a      	ldr	r3, [pc, #488]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002462:	2301      	movs	r3, #1
 8002464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002466:	4b77      	ldr	r3, [pc, #476]	@ (8002644 <HAL_RCC_OscConfig+0x474>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d118      	bne.n	80024a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002472:	4b74      	ldr	r3, [pc, #464]	@ (8002644 <HAL_RCC_OscConfig+0x474>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a73      	ldr	r2, [pc, #460]	@ (8002644 <HAL_RCC_OscConfig+0x474>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800247c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247e:	f7fe ffb5 	bl	80013ec <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002486:	f7fe ffb1 	bl	80013ec <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e10c      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	4b6a      	ldr	r3, [pc, #424]	@ (8002644 <HAL_RCC_OscConfig+0x474>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x2ea>
 80024ac:	4b64      	ldr	r3, [pc, #400]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b0:	4a63      	ldr	r2, [pc, #396]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b8:	e01c      	b.n	80024f4 <HAL_RCC_OscConfig+0x324>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x30c>
 80024c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0x324>
 80024dc:	4b58      	ldr	r3, [pc, #352]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e0:	4a57      	ldr	r2, [pc, #348]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e8:	4b55      	ldr	r3, [pc, #340]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ec:	4a54      	ldr	r2, [pc, #336]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80024ee:	f023 0304 	bic.w	r3, r3, #4
 80024f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d015      	beq.n	8002528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7fe ff76 	bl	80013ec <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002502:	e00a      	b.n	800251a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002504:	f7fe ff72 	bl	80013ec <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e0cb      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251a:	4b49      	ldr	r3, [pc, #292]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0ee      	beq.n	8002504 <HAL_RCC_OscConfig+0x334>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7fe ff60 	bl	80013ec <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002530:	f7fe ff5c 	bl	80013ec <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e0b5      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002546:	4b3e      	ldr	r3, [pc, #248]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ee      	bne.n	8002530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002558:	4b39      	ldr	r3, [pc, #228]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	4a38      	ldr	r2, [pc, #224]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 800255e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002562:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a1 	beq.w	80026b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800256e:	4b34      	ldr	r3, [pc, #208]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b08      	cmp	r3, #8
 8002578:	d05c      	beq.n	8002634 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d141      	bne.n	8002606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b31      	ldr	r3, [pc, #196]	@ (8002648 <HAL_RCC_OscConfig+0x478>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe ff30 	bl	80013ec <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe ff2c 	bl	80013ec <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e087      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a2:	4b27      	ldr	r3, [pc, #156]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	019b      	lsls	r3, r3, #6
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	3b01      	subs	r3, #1
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	061b      	lsls	r3, r3, #24
 80025d2:	491b      	ldr	r1, [pc, #108]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <HAL_RCC_OscConfig+0x478>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7fe ff05 	bl	80013ec <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe ff01 	bl	80013ec <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e05c      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f8:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x416>
 8002604:	e054      	b.n	80026b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <HAL_RCC_OscConfig+0x478>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe feee 	bl	80013ec <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe feea 	bl	80013ec <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e045      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <HAL_RCC_OscConfig+0x470>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x444>
 8002632:	e03d      	b.n	80026b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e038      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
 8002640:	40023800 	.word	0x40023800
 8002644:	40007000 	.word	0x40007000
 8002648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800264c:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <HAL_RCC_OscConfig+0x4ec>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d028      	beq.n	80026ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d121      	bne.n	80026ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d11a      	bne.n	80026ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800267c:	4013      	ands	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002684:	4293      	cmp	r3, r2
 8002686:	d111      	bne.n	80026ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	3b01      	subs	r3, #1
 8002696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d107      	bne.n	80026ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800

080026c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0cc      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d4:	4b68      	ldr	r3, [pc, #416]	@ (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d90c      	bls.n	80026fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b65      	ldr	r3, [pc, #404]	@ (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b63      	ldr	r3, [pc, #396]	@ (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0b8      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002714:	4b59      	ldr	r3, [pc, #356]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4a58      	ldr	r2, [pc, #352]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800271e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800272c:	4b53      	ldr	r3, [pc, #332]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a52      	ldr	r2, [pc, #328]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	4b50      	ldr	r3, [pc, #320]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	494d      	ldr	r1, [pc, #308]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d044      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b47      	ldr	r3, [pc, #284]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d119      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e07f      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d003      	beq.n	800277e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277a:	2b03      	cmp	r3, #3
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4b3f      	ldr	r3, [pc, #252]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e06f      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278e:	4b3b      	ldr	r3, [pc, #236]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e067      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279e:	4b37      	ldr	r3, [pc, #220]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f023 0203 	bic.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4934      	ldr	r1, [pc, #208]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b0:	f7fe fe1c 	bl	80013ec <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b8:	f7fe fe18 	bl	80013ec <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e04f      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 020c 	and.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1eb      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e0:	4b25      	ldr	r3, [pc, #148]	@ (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d20c      	bcs.n	8002808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f6:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e032      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002814:	4b19      	ldr	r3, [pc, #100]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4916      	ldr	r1, [pc, #88]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002832:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	490e      	ldr	r1, [pc, #56]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002846:	f000 f821 	bl	800288c <HAL_RCC_GetSysClockFreq>
 800284a:	4602      	mov	r2, r0
 800284c:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	490a      	ldr	r1, [pc, #40]	@ (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	5ccb      	ldrb	r3, [r1, r3]
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	4a09      	ldr	r2, [pc, #36]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002862:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fd7c 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023c00 	.word	0x40023c00
 800287c:	40023800 	.word	0x40023800
 8002880:	08004784 	.word	0x08004784
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002890:	b090      	sub	sp, #64	@ 0x40
 8002892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	637b      	str	r3, [r7, #52]	@ 0x34
 8002898:	2300      	movs	r3, #0
 800289a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800289c:	2300      	movs	r3, #0
 800289e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a4:	4b59      	ldr	r3, [pc, #356]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d00d      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x40>
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	f200 80a1 	bhi.w	80029f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028be:	e09b      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b53      	ldr	r3, [pc, #332]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80028c2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80028c4:	e09b      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c6:	4b53      	ldr	r3, [pc, #332]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80028c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028ca:	e098      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028cc:	4b4f      	ldr	r3, [pc, #316]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d6:	4b4d      	ldr	r3, [pc, #308]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d028      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e2:	4b4a      	ldr	r3, [pc, #296]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	2200      	movs	r2, #0
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028f4:	2100      	movs	r1, #0
 80028f6:	4b47      	ldr	r3, [pc, #284]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80028f8:	fb03 f201 	mul.w	r2, r3, r1
 80028fc:	2300      	movs	r3, #0
 80028fe:	fb00 f303 	mul.w	r3, r0, r3
 8002902:	4413      	add	r3, r2
 8002904:	4a43      	ldr	r2, [pc, #268]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002906:	fba0 1202 	umull	r1, r2, r0, r2
 800290a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800290c:	460a      	mov	r2, r1
 800290e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002912:	4413      	add	r3, r2
 8002914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002918:	2200      	movs	r2, #0
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	61fa      	str	r2, [r7, #28]
 800291e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002922:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002926:	f7fd fcb3 	bl	8000290 <__aeabi_uldivmod>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4613      	mov	r3, r2
 8002930:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002932:	e053      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002934:	4b35      	ldr	r3, [pc, #212]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	2200      	movs	r2, #0
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	617a      	str	r2, [r7, #20]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002946:	f04f 0b00 	mov.w	fp, #0
 800294a:	4652      	mov	r2, sl
 800294c:	465b      	mov	r3, fp
 800294e:	f04f 0000 	mov.w	r0, #0
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	0159      	lsls	r1, r3, #5
 8002958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800295c:	0150      	lsls	r0, r2, #5
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	ebb2 080a 	subs.w	r8, r2, sl
 8002966:	eb63 090b 	sbc.w	r9, r3, fp
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002976:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800297a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800297e:	ebb2 0408 	subs.w	r4, r2, r8
 8002982:	eb63 0509 	sbc.w	r5, r3, r9
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	00eb      	lsls	r3, r5, #3
 8002990:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002994:	00e2      	lsls	r2, r4, #3
 8002996:	4614      	mov	r4, r2
 8002998:	461d      	mov	r5, r3
 800299a:	eb14 030a 	adds.w	r3, r4, sl
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	eb45 030b 	adc.w	r3, r5, fp
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029b2:	4629      	mov	r1, r5
 80029b4:	028b      	lsls	r3, r1, #10
 80029b6:	4621      	mov	r1, r4
 80029b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029bc:	4621      	mov	r1, r4
 80029be:	028a      	lsls	r2, r1, #10
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c6:	2200      	movs	r2, #0
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	60fa      	str	r2, [r7, #12]
 80029cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029d0:	f7fd fc5e 	bl	8000290 <__aeabi_uldivmod>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4613      	mov	r3, r2
 80029da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80029ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029f6:	e002      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80029fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3740      	adds	r7, #64	@ 0x40
 8002a04:	46bd      	mov	sp, r7
 8002a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	017d7840 	.word	0x017d7840

08002a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000

08002a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a34:	f7ff fff0 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0a9b      	lsrs	r3, r3, #10
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4903      	ldr	r1, [pc, #12]	@ (8002a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08004794 	.word	0x08004794

08002a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a5c:	f7ff ffdc 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0b5b      	lsrs	r3, r3, #13
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	@ (8002a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	08004794 	.word	0x08004794

08002a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e041      	b.n	8002b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe faf0 	bl	800108c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	f000 f950 	bl	8002d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d001      	beq.n	8002b38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e03c      	b.n	8002bb2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc0 <HAL_TIM_Base_Start+0xa0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d018      	beq.n	8002b7c <HAL_TIM_Base_Start+0x5c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b52:	d013      	beq.n	8002b7c <HAL_TIM_Base_Start+0x5c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc4 <HAL_TIM_Base_Start+0xa4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00e      	beq.n	8002b7c <HAL_TIM_Base_Start+0x5c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a19      	ldr	r2, [pc, #100]	@ (8002bc8 <HAL_TIM_Base_Start+0xa8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d009      	beq.n	8002b7c <HAL_TIM_Base_Start+0x5c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a17      	ldr	r2, [pc, #92]	@ (8002bcc <HAL_TIM_Base_Start+0xac>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d004      	beq.n	8002b7c <HAL_TIM_Base_Start+0x5c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a16      	ldr	r2, [pc, #88]	@ (8002bd0 <HAL_TIM_Base_Start+0xb0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d111      	bne.n	8002ba0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d010      	beq.n	8002bb0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0201 	orr.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9e:	e007      	b.n	8002bb0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	40000400 	.word	0x40000400
 8002bc8:	40000800 	.word	0x40000800
 8002bcc:	40000c00 	.word	0x40000c00
 8002bd0:	40014000 	.word	0x40014000

08002bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e0b4      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x186>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c28:	d03e      	beq.n	8002ca8 <HAL_TIM_ConfigClockSource+0xd4>
 8002c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2e:	f200 8087 	bhi.w	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c36:	f000 8086 	beq.w	8002d46 <HAL_TIM_ConfigClockSource+0x172>
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3e:	d87f      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b70      	cmp	r3, #112	@ 0x70
 8002c42:	d01a      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0xa6>
 8002c44:	2b70      	cmp	r3, #112	@ 0x70
 8002c46:	d87b      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b60      	cmp	r3, #96	@ 0x60
 8002c4a:	d050      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x11a>
 8002c4c:	2b60      	cmp	r3, #96	@ 0x60
 8002c4e:	d877      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b50      	cmp	r3, #80	@ 0x50
 8002c52:	d03c      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0xfa>
 8002c54:	2b50      	cmp	r3, #80	@ 0x50
 8002c56:	d873      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b40      	cmp	r3, #64	@ 0x40
 8002c5a:	d058      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x13a>
 8002c5c:	2b40      	cmp	r3, #64	@ 0x40
 8002c5e:	d86f      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b30      	cmp	r3, #48	@ 0x30
 8002c62:	d064      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x15a>
 8002c64:	2b30      	cmp	r3, #48	@ 0x30
 8002c66:	d86b      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d060      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x15a>
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d867      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d05c      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x15a>
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d05a      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x15a>
 8002c78:	e062      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c8a:	f000 f971 	bl	8002f70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	609a      	str	r2, [r3, #8]
      break;
 8002ca6:	e04f      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cb8:	f000 f95a 	bl	8002f70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cca:	609a      	str	r2, [r3, #8]
      break;
 8002ccc:	e03c      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 f8ce 	bl	8002e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2150      	movs	r1, #80	@ 0x50
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f927 	bl	8002f3a <TIM_ITRx_SetConfig>
      break;
 8002cec:	e02c      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f8ed 	bl	8002eda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2160      	movs	r1, #96	@ 0x60
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f917 	bl	8002f3a <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e01c      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f000 f8ae 	bl	8002e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2140      	movs	r1, #64	@ 0x40
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f907 	bl	8002f3a <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e00c      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4619      	mov	r1, r3
 8002d38:	4610      	mov	r0, r2
 8002d3a:	f000 f8fe 	bl	8002f3a <TIM_ITRx_SetConfig>
      break;
 8002d3e:	e003      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      break;
 8002d44:	e000      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3a      	ldr	r2, [pc, #232]	@ (8002e60 <TIM_Base_SetConfig+0xfc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00f      	beq.n	8002d9c <TIM_Base_SetConfig+0x38>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d82:	d00b      	beq.n	8002d9c <TIM_Base_SetConfig+0x38>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a37      	ldr	r2, [pc, #220]	@ (8002e64 <TIM_Base_SetConfig+0x100>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <TIM_Base_SetConfig+0x38>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a36      	ldr	r2, [pc, #216]	@ (8002e68 <TIM_Base_SetConfig+0x104>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_Base_SetConfig+0x38>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a35      	ldr	r2, [pc, #212]	@ (8002e6c <TIM_Base_SetConfig+0x108>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d108      	bne.n	8002dae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e60 <TIM_Base_SetConfig+0xfc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01b      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dbc:	d017      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a28      	ldr	r2, [pc, #160]	@ (8002e64 <TIM_Base_SetConfig+0x100>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a27      	ldr	r2, [pc, #156]	@ (8002e68 <TIM_Base_SetConfig+0x104>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00f      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a26      	ldr	r2, [pc, #152]	@ (8002e6c <TIM_Base_SetConfig+0x108>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00b      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a25      	ldr	r2, [pc, #148]	@ (8002e70 <TIM_Base_SetConfig+0x10c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d007      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a24      	ldr	r2, [pc, #144]	@ (8002e74 <TIM_Base_SetConfig+0x110>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d003      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a23      	ldr	r2, [pc, #140]	@ (8002e78 <TIM_Base_SetConfig+0x114>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d108      	bne.n	8002e00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a0e      	ldr	r2, [pc, #56]	@ (8002e60 <TIM_Base_SetConfig+0xfc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d105      	bne.n	8002e52 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f023 0201 	bic.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	611a      	str	r2, [r3, #16]
  }
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40014400 	.word	0x40014400
 8002e78:	40014800 	.word	0x40014800

08002e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f023 0201 	bic.w	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f023 030a 	bic.w	r3, r3, #10
 8002eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	621a      	str	r2, [r3, #32]
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f023 0210 	bic.w	r2, r3, #16
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	031b      	lsls	r3, r3, #12
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	621a      	str	r2, [r3, #32]
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f043 0307 	orr.w	r3, r3, #7
 8002f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	609a      	str	r2, [r3, #8]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	021a      	lsls	r2, r3, #8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	609a      	str	r2, [r3, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e050      	b.n	800306a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1c      	ldr	r2, [pc, #112]	@ (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d018      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003014:	d013      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a18      	ldr	r2, [pc, #96]	@ (800307c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00e      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a16      	ldr	r2, [pc, #88]	@ (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d009      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a15      	ldr	r2, [pc, #84]	@ (8003084 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a13      	ldr	r2, [pc, #76]	@ (8003088 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10c      	bne.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4313      	orrs	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40010000 	.word	0x40010000
 800307c:	40000400 	.word	0x40000400
 8003080:	40000800 	.word	0x40000800
 8003084:	40000c00 	.word	0x40000c00
 8003088:	40014000 	.word	0x40014000

0800308c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e042      	b.n	8003124 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe f80c 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	@ 0x24
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fc01 	bl	80038d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	@ 0x28
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b20      	cmp	r3, #32
 800314a:	d175      	bne.n	8003238 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_UART_Transmit+0x2c>
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e06e      	b.n	800323a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2221      	movs	r2, #33	@ 0x21
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800316a:	f7fe f93f 	bl	80013ec <HAL_GetTick>
 800316e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	88fa      	ldrh	r2, [r7, #6]
 800317a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003184:	d108      	bne.n	8003198 <HAL_UART_Transmit+0x6c>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d104      	bne.n	8003198 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	e003      	b.n	80031a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031a0:	e02e      	b.n	8003200 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2180      	movs	r1, #128	@ 0x80
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fa14 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e03a      	b.n	800323a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10b      	bne.n	80031e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	3302      	adds	r3, #2
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	e007      	b.n	80031f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	781a      	ldrb	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	3301      	adds	r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1cb      	bne.n	80031a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	2140      	movs	r1, #64	@ 0x40
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f9e0 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e006      	b.n	800323a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	4613      	mov	r3, r2
 800324e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b20      	cmp	r3, #32
 800325a:	d112      	bne.n	8003282 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_UART_Receive_DMA+0x26>
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e00b      	b.n	8003284 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	461a      	mov	r2, r3
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fa07 	bl	800368c <UART_Start_Receive_DMA>
 800327e:	4603      	mov	r3, r0
 8003280:	e000      	b.n	8003284 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003282:	2302      	movs	r3, #2
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b090      	sub	sp, #64	@ 0x40
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003294:	2300      	movs	r3, #0
 8003296:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a2:	2b80      	cmp	r3, #128	@ 0x80
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b21      	cmp	r3, #33	@ 0x21
 80032b8:	d128      	bne.n	800330c <HAL_UART_DMAStop+0x80>
 80032ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d025      	beq.n	800330c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3314      	adds	r3, #20
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	623b      	str	r3, [r7, #32]
   return(result);
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3314      	adds	r3, #20
 80032de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80032e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e8:	e841 2300 	strex	r3, r2, [r1]
 80032ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e5      	bne.n	80032c0 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d004      	beq.n	8003306 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe fabb 	bl	800187c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fa5a 	bl	80037c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003316:	2b40      	cmp	r3, #64	@ 0x40
 8003318:	bf0c      	ite	eq
 800331a:	2301      	moveq	r3, #1
 800331c:	2300      	movne	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b22      	cmp	r3, #34	@ 0x22
 800332c:	d128      	bne.n	8003380 <HAL_UART_DMAStop+0xf4>
 800332e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d025      	beq.n	8003380 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3314      	adds	r3, #20
 800333a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	60fb      	str	r3, [r7, #12]
   return(result);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800334a:	637b      	str	r3, [r7, #52]	@ 0x34
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3314      	adds	r3, #20
 8003352:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003354:	61fa      	str	r2, [r7, #28]
 8003356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	69b9      	ldr	r1, [r7, #24]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	e841 2300 	strex	r3, r2, [r1]
 8003360:	617b      	str	r3, [r7, #20]
   return(result);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e5      	bne.n	8003334 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fa81 	bl	800187c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fa48 	bl	8003810 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3740      	adds	r7, #64	@ 0x40
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b09c      	sub	sp, #112	@ 0x70
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d172      	bne.n	80034e0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80033fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033fc:	2200      	movs	r2, #0
 80033fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003412:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003416:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003420:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003422:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003426:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800342e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e5      	bne.n	8003400 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3314      	adds	r3, #20
 800343a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	667b      	str	r3, [r7, #100]	@ 0x64
 800344c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3314      	adds	r3, #20
 8003452:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003454:	647a      	str	r2, [r7, #68]	@ 0x44
 8003456:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800345a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e5      	bne.n	8003434 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3314      	adds	r3, #20
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	623b      	str	r3, [r7, #32]
   return(result);
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800347e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3314      	adds	r3, #20
 8003486:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003488:	633a      	str	r2, [r7, #48]	@ 0x30
 800348a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800348e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e5      	bne.n	8003468 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800349c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d119      	bne.n	80034e0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	330c      	adds	r3, #12
 80034b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0310 	bic.w	r3, r3, #16
 80034c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80034cc:	61fa      	str	r2, [r7, #28]
 80034ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	69b9      	ldr	r1, [r7, #24]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	617b      	str	r3, [r7, #20]
   return(result);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e5      	bne.n	80034ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034e2:	2200      	movs	r2, #0
 80034e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d106      	bne.n	80034fc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034f2:	4619      	mov	r1, r3
 80034f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80034f6:	f7ff ff66 	bl	80033c6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034fa:	e002      	b.n	8003502 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80034fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80034fe:	f7ff ff44 	bl	800338a <HAL_UART_RxCpltCallback>
}
 8003502:	bf00      	nop
 8003504:	3770      	adds	r7, #112	@ 0x70
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	2b01      	cmp	r3, #1
 8003524:	d108      	bne.n	8003538 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	b29b      	uxth	r3, r3
 800352e:	4619      	mov	r1, r3
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff ff48 	bl	80033c6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003536:	e002      	b.n	800353e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff ff30 	bl	800339e <HAL_UART_RxHalfCpltCallback>
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003556:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b80      	cmp	r3, #128	@ 0x80
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b21      	cmp	r3, #33	@ 0x21
 8003578:	d108      	bne.n	800358c <UART_DMAError+0x46>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2200      	movs	r2, #0
 8003584:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003586:	68b8      	ldr	r0, [r7, #8]
 8003588:	f000 f91a 	bl	80037c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003596:	2b40      	cmp	r3, #64	@ 0x40
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b22      	cmp	r3, #34	@ 0x22
 80035ac:	d108      	bne.n	80035c0 <UART_DMAError+0x7a>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2200      	movs	r2, #0
 80035b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80035ba:	68b8      	ldr	r0, [r7, #8]
 80035bc:	f000 f928 	bl	8003810 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	f043 0210 	orr.w	r2, r3, #16
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035cc:	68b8      	ldr	r0, [r7, #8]
 80035ce:	f7ff fef0 	bl	80033b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ea:	e03b      	b.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d037      	beq.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7fd fefa 	bl	80013ec <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	6a3a      	ldr	r2, [r7, #32]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <UART_WaitOnFlagUntilTimeout+0x30>
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e03a      	b.n	8003684 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d023      	beq.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b80      	cmp	r3, #128	@ 0x80
 8003620:	d020      	beq.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b40      	cmp	r3, #64	@ 0x40
 8003626:	d01d      	beq.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b08      	cmp	r3, #8
 8003634:	d116      	bne.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f8df 	bl	8003810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2208      	movs	r2, #8
 8003656:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e00f      	b.n	8003684 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	429a      	cmp	r2, r3
 8003680:	d0b4      	beq.n	80035ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b098      	sub	sp, #96	@ 0x60
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	4613      	mov	r3, r2
 8003698:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2222      	movs	r2, #34	@ 0x22
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b8:	4a3e      	ldr	r2, [pc, #248]	@ (80037b4 <UART_Start_Receive_DMA+0x128>)
 80036ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c0:	4a3d      	ldr	r2, [pc, #244]	@ (80037b8 <UART_Start_Receive_DMA+0x12c>)
 80036c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	4a3c      	ldr	r2, [pc, #240]	@ (80037bc <UART_Start_Receive_DMA+0x130>)
 80036ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d0:	2200      	movs	r2, #0
 80036d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80036d4:	f107 0308 	add.w	r3, r7, #8
 80036d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	f7fe f86e 	bl	80017cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d019      	beq.n	8003742 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800371e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003724:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800372e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003730:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003734:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800373c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e5      	bne.n	800370e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	657b      	str	r3, [r7, #84]	@ 0x54
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003762:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003764:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003768:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e5      	bne.n	8003742 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	617b      	str	r3, [r7, #20]
   return(result);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800378c:	653b      	str	r3, [r7, #80]	@ 0x50
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3314      	adds	r3, #20
 8003794:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003796:	627a      	str	r2, [r7, #36]	@ 0x24
 8003798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	6a39      	ldr	r1, [r7, #32]
 800379c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e5      	bne.n	8003776 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3760      	adds	r7, #96	@ 0x60
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	080033df 	.word	0x080033df
 80037b8:	0800350b 	.word	0x0800350b
 80037bc:	08003547 	.word	0x08003547

080037c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	@ 0x24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	330c      	adds	r3, #12
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	61ba      	str	r2, [r7, #24]
 80037ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	6979      	ldr	r1, [r7, #20]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	613b      	str	r3, [r7, #16]
   return(result);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e5      	bne.n	80037c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003804:	bf00      	nop
 8003806:	3724      	adds	r7, #36	@ 0x24
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003810:	b480      	push	{r7}
 8003812:	b095      	sub	sp, #84	@ 0x54
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	330c      	adds	r3, #12
 800381e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800382e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	330c      	adds	r3, #12
 8003836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003838:	643a      	str	r2, [r7, #64]	@ 0x40
 800383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800383e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e5      	bne.n	8003818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3314      	adds	r3, #20
 8003852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	61fb      	str	r3, [r7, #28]
   return(result);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3314      	adds	r3, #20
 800386a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800386c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800386e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e5      	bne.n	800384c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003884:	2b01      	cmp	r3, #1
 8003886:	d119      	bne.n	80038bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	60bb      	str	r3, [r7, #8]
   return(result);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f023 0310 	bic.w	r3, r3, #16
 800389e:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	330c      	adds	r3, #12
 80038a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038a8:	61ba      	str	r2, [r7, #24]
 80038aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6979      	ldr	r1, [r7, #20]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	613b      	str	r3, [r7, #16]
   return(result);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e5      	bne.n	8003888 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038ca:	bf00      	nop
 80038cc:	3754      	adds	r7, #84	@ 0x54
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038dc:	b0c0      	sub	sp, #256	@ 0x100
 80038de:	af00      	add	r7, sp, #0
 80038e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f4:	68d9      	ldr	r1, [r3, #12]
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	ea40 0301 	orr.w	r3, r0, r1
 8003900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	431a      	orrs	r2, r3
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	431a      	orrs	r2, r3
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003930:	f021 010c 	bic.w	r1, r1, #12
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800393e:	430b      	orrs	r3, r1
 8003940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003952:	6999      	ldr	r1, [r3, #24]
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	ea40 0301 	orr.w	r3, r0, r1
 800395e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b8f      	ldr	r3, [pc, #572]	@ (8003ba4 <UART_SetConfig+0x2cc>)
 8003968:	429a      	cmp	r2, r3
 800396a:	d005      	beq.n	8003978 <UART_SetConfig+0xa0>
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4b8d      	ldr	r3, [pc, #564]	@ (8003ba8 <UART_SetConfig+0x2d0>)
 8003974:	429a      	cmp	r2, r3
 8003976:	d104      	bne.n	8003982 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003978:	f7ff f86e 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 800397c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003980:	e003      	b.n	800398a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003982:	f7ff f855 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003986:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003994:	f040 810c 	bne.w	8003bb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399c:	2200      	movs	r2, #0
 800399e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039aa:	4622      	mov	r2, r4
 80039ac:	462b      	mov	r3, r5
 80039ae:	1891      	adds	r1, r2, r2
 80039b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039b2:	415b      	adcs	r3, r3
 80039b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039ba:	4621      	mov	r1, r4
 80039bc:	eb12 0801 	adds.w	r8, r2, r1
 80039c0:	4629      	mov	r1, r5
 80039c2:	eb43 0901 	adc.w	r9, r3, r1
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039da:	4690      	mov	r8, r2
 80039dc:	4699      	mov	r9, r3
 80039de:	4623      	mov	r3, r4
 80039e0:	eb18 0303 	adds.w	r3, r8, r3
 80039e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039e8:	462b      	mov	r3, r5
 80039ea:	eb49 0303 	adc.w	r3, r9, r3
 80039ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a06:	460b      	mov	r3, r1
 8003a08:	18db      	adds	r3, r3, r3
 8003a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	eb42 0303 	adc.w	r3, r2, r3
 8003a12:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a1c:	f7fc fc38 	bl	8000290 <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4b61      	ldr	r3, [pc, #388]	@ (8003bac <UART_SetConfig+0x2d4>)
 8003a26:	fba3 2302 	umull	r2, r3, r3, r2
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	011c      	lsls	r4, r3, #4
 8003a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a40:	4642      	mov	r2, r8
 8003a42:	464b      	mov	r3, r9
 8003a44:	1891      	adds	r1, r2, r2
 8003a46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a48:	415b      	adcs	r3, r3
 8003a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a50:	4641      	mov	r1, r8
 8003a52:	eb12 0a01 	adds.w	sl, r2, r1
 8003a56:	4649      	mov	r1, r9
 8003a58:	eb43 0b01 	adc.w	fp, r3, r1
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a70:	4692      	mov	sl, r2
 8003a72:	469b      	mov	fp, r3
 8003a74:	4643      	mov	r3, r8
 8003a76:	eb1a 0303 	adds.w	r3, sl, r3
 8003a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a7e:	464b      	mov	r3, r9
 8003a80:	eb4b 0303 	adc.w	r3, fp, r3
 8003a84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	18db      	adds	r3, r3, r3
 8003aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	eb42 0303 	adc.w	r3, r2, r3
 8003aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003aae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ab2:	f7fc fbed 	bl	8000290 <__aeabi_uldivmod>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4611      	mov	r1, r2
 8003abc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bac <UART_SetConfig+0x2d4>)
 8003abe:	fba3 2301 	umull	r2, r3, r3, r1
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	2264      	movs	r2, #100	@ 0x64
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	1acb      	subs	r3, r1, r3
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ad2:	4b36      	ldr	r3, [pc, #216]	@ (8003bac <UART_SetConfig+0x2d4>)
 8003ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ae0:	441c      	add	r4, r3
 8003ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003aec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003af0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003af4:	4642      	mov	r2, r8
 8003af6:	464b      	mov	r3, r9
 8003af8:	1891      	adds	r1, r2, r2
 8003afa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003afc:	415b      	adcs	r3, r3
 8003afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b04:	4641      	mov	r1, r8
 8003b06:	1851      	adds	r1, r2, r1
 8003b08:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	414b      	adcs	r3, r1
 8003b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b1c:	4659      	mov	r1, fp
 8003b1e:	00cb      	lsls	r3, r1, #3
 8003b20:	4651      	mov	r1, sl
 8003b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b26:	4651      	mov	r1, sl
 8003b28:	00ca      	lsls	r2, r1, #3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4642      	mov	r2, r8
 8003b32:	189b      	adds	r3, r3, r2
 8003b34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b38:	464b      	mov	r3, r9
 8003b3a:	460a      	mov	r2, r1
 8003b3c:	eb42 0303 	adc.w	r3, r2, r3
 8003b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b58:	460b      	mov	r3, r1
 8003b5a:	18db      	adds	r3, r3, r3
 8003b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b5e:	4613      	mov	r3, r2
 8003b60:	eb42 0303 	adc.w	r3, r2, r3
 8003b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b6e:	f7fc fb8f 	bl	8000290 <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <UART_SetConfig+0x2d4>)
 8003b78:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	2164      	movs	r1, #100	@ 0x64
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	3332      	adds	r3, #50	@ 0x32
 8003b8a:	4a08      	ldr	r2, [pc, #32]	@ (8003bac <UART_SetConfig+0x2d4>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	f003 0207 	and.w	r2, r3, #7
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4422      	add	r2, r4
 8003b9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ba0:	e106      	b.n	8003db0 <UART_SetConfig+0x4d8>
 8003ba2:	bf00      	nop
 8003ba4:	40011000 	.word	0x40011000
 8003ba8:	40011400 	.word	0x40011400
 8003bac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bc2:	4642      	mov	r2, r8
 8003bc4:	464b      	mov	r3, r9
 8003bc6:	1891      	adds	r1, r2, r2
 8003bc8:	6239      	str	r1, [r7, #32]
 8003bca:	415b      	adcs	r3, r3
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bd2:	4641      	mov	r1, r8
 8003bd4:	1854      	adds	r4, r2, r1
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	eb43 0501 	adc.w	r5, r3, r1
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	00eb      	lsls	r3, r5, #3
 8003be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bea:	00e2      	lsls	r2, r4, #3
 8003bec:	4614      	mov	r4, r2
 8003bee:	461d      	mov	r5, r3
 8003bf0:	4643      	mov	r3, r8
 8003bf2:	18e3      	adds	r3, r4, r3
 8003bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	eb45 0303 	adc.w	r3, r5, r3
 8003bfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c1e:	4629      	mov	r1, r5
 8003c20:	008b      	lsls	r3, r1, #2
 8003c22:	4621      	mov	r1, r4
 8003c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c28:	4621      	mov	r1, r4
 8003c2a:	008a      	lsls	r2, r1, #2
 8003c2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c30:	f7fc fb2e 	bl	8000290 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4b60      	ldr	r3, [pc, #384]	@ (8003dbc <UART_SetConfig+0x4e4>)
 8003c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	011c      	lsls	r4, r3, #4
 8003c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	61b9      	str	r1, [r7, #24]
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c64:	4641      	mov	r1, r8
 8003c66:	1851      	adds	r1, r2, r1
 8003c68:	6139      	str	r1, [r7, #16]
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	414b      	adcs	r3, r1
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	00cb      	lsls	r3, r1, #3
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c86:	4651      	mov	r1, sl
 8003c88:	00ca      	lsls	r2, r1, #3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4642      	mov	r2, r8
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c98:	464b      	mov	r3, r9
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	008b      	lsls	r3, r1, #2
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	008a      	lsls	r2, r1, #2
 8003cca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cce:	f7fc fadf 	bl	8000290 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4b38      	ldr	r3, [pc, #224]	@ (8003dbc <UART_SetConfig+0x4e4>)
 8003cda:	fba3 2301 	umull	r2, r3, r3, r1
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	2264      	movs	r2, #100	@ 0x64
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	1acb      	subs	r3, r1, r3
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	3332      	adds	r3, #50	@ 0x32
 8003cec:	4a33      	ldr	r2, [pc, #204]	@ (8003dbc <UART_SetConfig+0x4e4>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cf8:	441c      	add	r4, r3
 8003cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cfe:	2200      	movs	r2, #0
 8003d00:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d02:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	1891      	adds	r1, r2, r2
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	415b      	adcs	r3, r3
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d18:	4641      	mov	r1, r8
 8003d1a:	1851      	adds	r1, r2, r1
 8003d1c:	6039      	str	r1, [r7, #0]
 8003d1e:	4649      	mov	r1, r9
 8003d20:	414b      	adcs	r3, r1
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d30:	4659      	mov	r1, fp
 8003d32:	00cb      	lsls	r3, r1, #3
 8003d34:	4651      	mov	r1, sl
 8003d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d3a:	4651      	mov	r1, sl
 8003d3c:	00ca      	lsls	r2, r1, #3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	4642      	mov	r2, r8
 8003d46:	189b      	adds	r3, r3, r2
 8003d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	460a      	mov	r2, r1
 8003d4e:	eb42 0303 	adc.w	r3, r2, r3
 8003d52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	008b      	lsls	r3, r1, #2
 8003d70:	4641      	mov	r1, r8
 8003d72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d76:	4641      	mov	r1, r8
 8003d78:	008a      	lsls	r2, r1, #2
 8003d7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d7e:	f7fc fa87 	bl	8000290 <__aeabi_uldivmod>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4b0d      	ldr	r3, [pc, #52]	@ (8003dbc <UART_SetConfig+0x4e4>)
 8003d88:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	2164      	movs	r1, #100	@ 0x64
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	3332      	adds	r3, #50	@ 0x32
 8003d9a:	4a08      	ldr	r2, [pc, #32]	@ (8003dbc <UART_SetConfig+0x4e4>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	f003 020f 	and.w	r2, r3, #15
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4422      	add	r2, r4
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003db6:	46bd      	mov	sp, r7
 8003db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dbc:	51eb851f 	.word	0x51eb851f

08003dc0 <siprintf>:
 8003dc0:	b40e      	push	{r1, r2, r3}
 8003dc2:	b500      	push	{lr}
 8003dc4:	b09c      	sub	sp, #112	@ 0x70
 8003dc6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003dc8:	9002      	str	r0, [sp, #8]
 8003dca:	9006      	str	r0, [sp, #24]
 8003dcc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003dd0:	4809      	ldr	r0, [pc, #36]	@ (8003df8 <siprintf+0x38>)
 8003dd2:	9107      	str	r1, [sp, #28]
 8003dd4:	9104      	str	r1, [sp, #16]
 8003dd6:	4909      	ldr	r1, [pc, #36]	@ (8003dfc <siprintf+0x3c>)
 8003dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ddc:	9105      	str	r1, [sp, #20]
 8003dde:	6800      	ldr	r0, [r0, #0]
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	a902      	add	r1, sp, #8
 8003de4:	f000 f9a4 	bl	8004130 <_svfiprintf_r>
 8003de8:	9b02      	ldr	r3, [sp, #8]
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	b01c      	add	sp, #112	@ 0x70
 8003df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003df4:	b003      	add	sp, #12
 8003df6:	4770      	bx	lr
 8003df8:	2000000c 	.word	0x2000000c
 8003dfc:	ffff0208 	.word	0xffff0208

08003e00 <memset>:
 8003e00:	4402      	add	r2, r0
 8003e02:	4603      	mov	r3, r0
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d100      	bne.n	8003e0a <memset+0xa>
 8003e08:	4770      	bx	lr
 8003e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e0e:	e7f9      	b.n	8003e04 <memset+0x4>

08003e10 <strcat>:
 8003e10:	b510      	push	{r4, lr}
 8003e12:	4602      	mov	r2, r0
 8003e14:	7814      	ldrb	r4, [r2, #0]
 8003e16:	4613      	mov	r3, r2
 8003e18:	3201      	adds	r2, #1
 8003e1a:	2c00      	cmp	r4, #0
 8003e1c:	d1fa      	bne.n	8003e14 <strcat+0x4>
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e28:	2a00      	cmp	r2, #0
 8003e2a:	d1f9      	bne.n	8003e20 <strcat+0x10>
 8003e2c:	bd10      	pop	{r4, pc}
	...

08003e30 <__errno>:
 8003e30:	4b01      	ldr	r3, [pc, #4]	@ (8003e38 <__errno+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	2000000c 	.word	0x2000000c

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e74 <__libc_init_array+0x38>)
 8003e40:	4c0d      	ldr	r4, [pc, #52]	@ (8003e78 <__libc_init_array+0x3c>)
 8003e42:	1b64      	subs	r4, r4, r5
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	2600      	movs	r6, #0
 8003e48:	42a6      	cmp	r6, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8003e7c <__libc_init_array+0x40>)
 8003e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8003e80 <__libc_init_array+0x44>)
 8003e50:	f000 fc66 	bl	8004720 <_init>
 8003e54:	1b64      	subs	r4, r4, r5
 8003e56:	10a4      	asrs	r4, r4, #2
 8003e58:	2600      	movs	r6, #0
 8003e5a:	42a6      	cmp	r6, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e64:	4798      	blx	r3
 8003e66:	3601      	adds	r6, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6e:	4798      	blx	r3
 8003e70:	3601      	adds	r6, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	080047e0 	.word	0x080047e0
 8003e78:	080047e0 	.word	0x080047e0
 8003e7c:	080047e0 	.word	0x080047e0
 8003e80:	080047e4 	.word	0x080047e4

08003e84 <__retarget_lock_acquire_recursive>:
 8003e84:	4770      	bx	lr

08003e86 <__retarget_lock_release_recursive>:
 8003e86:	4770      	bx	lr

08003e88 <_free_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	4605      	mov	r5, r0
 8003e8c:	2900      	cmp	r1, #0
 8003e8e:	d041      	beq.n	8003f14 <_free_r+0x8c>
 8003e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e94:	1f0c      	subs	r4, r1, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bfb8      	it	lt
 8003e9a:	18e4      	addlt	r4, r4, r3
 8003e9c:	f000 f8e0 	bl	8004060 <__malloc_lock>
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f18 <_free_r+0x90>)
 8003ea2:	6813      	ldr	r3, [r2, #0]
 8003ea4:	b933      	cbnz	r3, 8003eb4 <_free_r+0x2c>
 8003ea6:	6063      	str	r3, [r4, #4]
 8003ea8:	6014      	str	r4, [r2, #0]
 8003eaa:	4628      	mov	r0, r5
 8003eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eb0:	f000 b8dc 	b.w	800406c <__malloc_unlock>
 8003eb4:	42a3      	cmp	r3, r4
 8003eb6:	d908      	bls.n	8003eca <_free_r+0x42>
 8003eb8:	6820      	ldr	r0, [r4, #0]
 8003eba:	1821      	adds	r1, r4, r0
 8003ebc:	428b      	cmp	r3, r1
 8003ebe:	bf01      	itttt	eq
 8003ec0:	6819      	ldreq	r1, [r3, #0]
 8003ec2:	685b      	ldreq	r3, [r3, #4]
 8003ec4:	1809      	addeq	r1, r1, r0
 8003ec6:	6021      	streq	r1, [r4, #0]
 8003ec8:	e7ed      	b.n	8003ea6 <_free_r+0x1e>
 8003eca:	461a      	mov	r2, r3
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	b10b      	cbz	r3, 8003ed4 <_free_r+0x4c>
 8003ed0:	42a3      	cmp	r3, r4
 8003ed2:	d9fa      	bls.n	8003eca <_free_r+0x42>
 8003ed4:	6811      	ldr	r1, [r2, #0]
 8003ed6:	1850      	adds	r0, r2, r1
 8003ed8:	42a0      	cmp	r0, r4
 8003eda:	d10b      	bne.n	8003ef4 <_free_r+0x6c>
 8003edc:	6820      	ldr	r0, [r4, #0]
 8003ede:	4401      	add	r1, r0
 8003ee0:	1850      	adds	r0, r2, r1
 8003ee2:	4283      	cmp	r3, r0
 8003ee4:	6011      	str	r1, [r2, #0]
 8003ee6:	d1e0      	bne.n	8003eaa <_free_r+0x22>
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	6053      	str	r3, [r2, #4]
 8003eee:	4408      	add	r0, r1
 8003ef0:	6010      	str	r0, [r2, #0]
 8003ef2:	e7da      	b.n	8003eaa <_free_r+0x22>
 8003ef4:	d902      	bls.n	8003efc <_free_r+0x74>
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	602b      	str	r3, [r5, #0]
 8003efa:	e7d6      	b.n	8003eaa <_free_r+0x22>
 8003efc:	6820      	ldr	r0, [r4, #0]
 8003efe:	1821      	adds	r1, r4, r0
 8003f00:	428b      	cmp	r3, r1
 8003f02:	bf04      	itt	eq
 8003f04:	6819      	ldreq	r1, [r3, #0]
 8003f06:	685b      	ldreq	r3, [r3, #4]
 8003f08:	6063      	str	r3, [r4, #4]
 8003f0a:	bf04      	itt	eq
 8003f0c:	1809      	addeq	r1, r1, r0
 8003f0e:	6021      	streq	r1, [r4, #0]
 8003f10:	6054      	str	r4, [r2, #4]
 8003f12:	e7ca      	b.n	8003eaa <_free_r+0x22>
 8003f14:	bd38      	pop	{r3, r4, r5, pc}
 8003f16:	bf00      	nop
 8003f18:	200002b4 	.word	0x200002b4

08003f1c <sbrk_aligned>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8003f5c <sbrk_aligned+0x40>)
 8003f20:	460c      	mov	r4, r1
 8003f22:	6831      	ldr	r1, [r6, #0]
 8003f24:	4605      	mov	r5, r0
 8003f26:	b911      	cbnz	r1, 8003f2e <sbrk_aligned+0x12>
 8003f28:	f000 fba6 	bl	8004678 <_sbrk_r>
 8003f2c:	6030      	str	r0, [r6, #0]
 8003f2e:	4621      	mov	r1, r4
 8003f30:	4628      	mov	r0, r5
 8003f32:	f000 fba1 	bl	8004678 <_sbrk_r>
 8003f36:	1c43      	adds	r3, r0, #1
 8003f38:	d103      	bne.n	8003f42 <sbrk_aligned+0x26>
 8003f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8003f3e:	4620      	mov	r0, r4
 8003f40:	bd70      	pop	{r4, r5, r6, pc}
 8003f42:	1cc4      	adds	r4, r0, #3
 8003f44:	f024 0403 	bic.w	r4, r4, #3
 8003f48:	42a0      	cmp	r0, r4
 8003f4a:	d0f8      	beq.n	8003f3e <sbrk_aligned+0x22>
 8003f4c:	1a21      	subs	r1, r4, r0
 8003f4e:	4628      	mov	r0, r5
 8003f50:	f000 fb92 	bl	8004678 <_sbrk_r>
 8003f54:	3001      	adds	r0, #1
 8003f56:	d1f2      	bne.n	8003f3e <sbrk_aligned+0x22>
 8003f58:	e7ef      	b.n	8003f3a <sbrk_aligned+0x1e>
 8003f5a:	bf00      	nop
 8003f5c:	200002b0 	.word	0x200002b0

08003f60 <_malloc_r>:
 8003f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f64:	1ccd      	adds	r5, r1, #3
 8003f66:	f025 0503 	bic.w	r5, r5, #3
 8003f6a:	3508      	adds	r5, #8
 8003f6c:	2d0c      	cmp	r5, #12
 8003f6e:	bf38      	it	cc
 8003f70:	250c      	movcc	r5, #12
 8003f72:	2d00      	cmp	r5, #0
 8003f74:	4606      	mov	r6, r0
 8003f76:	db01      	blt.n	8003f7c <_malloc_r+0x1c>
 8003f78:	42a9      	cmp	r1, r5
 8003f7a:	d904      	bls.n	8003f86 <_malloc_r+0x26>
 8003f7c:	230c      	movs	r3, #12
 8003f7e:	6033      	str	r3, [r6, #0]
 8003f80:	2000      	movs	r0, #0
 8003f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800405c <_malloc_r+0xfc>
 8003f8a:	f000 f869 	bl	8004060 <__malloc_lock>
 8003f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f92:	461c      	mov	r4, r3
 8003f94:	bb44      	cbnz	r4, 8003fe8 <_malloc_r+0x88>
 8003f96:	4629      	mov	r1, r5
 8003f98:	4630      	mov	r0, r6
 8003f9a:	f7ff ffbf 	bl	8003f1c <sbrk_aligned>
 8003f9e:	1c43      	adds	r3, r0, #1
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	d158      	bne.n	8004056 <_malloc_r+0xf6>
 8003fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8003fa8:	4627      	mov	r7, r4
 8003faa:	2f00      	cmp	r7, #0
 8003fac:	d143      	bne.n	8004036 <_malloc_r+0xd6>
 8003fae:	2c00      	cmp	r4, #0
 8003fb0:	d04b      	beq.n	800404a <_malloc_r+0xea>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	4639      	mov	r1, r7
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	eb04 0903 	add.w	r9, r4, r3
 8003fbc:	f000 fb5c 	bl	8004678 <_sbrk_r>
 8003fc0:	4581      	cmp	r9, r0
 8003fc2:	d142      	bne.n	800404a <_malloc_r+0xea>
 8003fc4:	6821      	ldr	r1, [r4, #0]
 8003fc6:	1a6d      	subs	r5, r5, r1
 8003fc8:	4629      	mov	r1, r5
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f7ff ffa6 	bl	8003f1c <sbrk_aligned>
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d03a      	beq.n	800404a <_malloc_r+0xea>
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	442b      	add	r3, r5
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	f8d8 3000 	ldr.w	r3, [r8]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	bb62      	cbnz	r2, 800403c <_malloc_r+0xdc>
 8003fe2:	f8c8 7000 	str.w	r7, [r8]
 8003fe6:	e00f      	b.n	8004008 <_malloc_r+0xa8>
 8003fe8:	6822      	ldr	r2, [r4, #0]
 8003fea:	1b52      	subs	r2, r2, r5
 8003fec:	d420      	bmi.n	8004030 <_malloc_r+0xd0>
 8003fee:	2a0b      	cmp	r2, #11
 8003ff0:	d917      	bls.n	8004022 <_malloc_r+0xc2>
 8003ff2:	1961      	adds	r1, r4, r5
 8003ff4:	42a3      	cmp	r3, r4
 8003ff6:	6025      	str	r5, [r4, #0]
 8003ff8:	bf18      	it	ne
 8003ffa:	6059      	strne	r1, [r3, #4]
 8003ffc:	6863      	ldr	r3, [r4, #4]
 8003ffe:	bf08      	it	eq
 8004000:	f8c8 1000 	streq.w	r1, [r8]
 8004004:	5162      	str	r2, [r4, r5]
 8004006:	604b      	str	r3, [r1, #4]
 8004008:	4630      	mov	r0, r6
 800400a:	f000 f82f 	bl	800406c <__malloc_unlock>
 800400e:	f104 000b 	add.w	r0, r4, #11
 8004012:	1d23      	adds	r3, r4, #4
 8004014:	f020 0007 	bic.w	r0, r0, #7
 8004018:	1ac2      	subs	r2, r0, r3
 800401a:	bf1c      	itt	ne
 800401c:	1a1b      	subne	r3, r3, r0
 800401e:	50a3      	strne	r3, [r4, r2]
 8004020:	e7af      	b.n	8003f82 <_malloc_r+0x22>
 8004022:	6862      	ldr	r2, [r4, #4]
 8004024:	42a3      	cmp	r3, r4
 8004026:	bf0c      	ite	eq
 8004028:	f8c8 2000 	streq.w	r2, [r8]
 800402c:	605a      	strne	r2, [r3, #4]
 800402e:	e7eb      	b.n	8004008 <_malloc_r+0xa8>
 8004030:	4623      	mov	r3, r4
 8004032:	6864      	ldr	r4, [r4, #4]
 8004034:	e7ae      	b.n	8003f94 <_malloc_r+0x34>
 8004036:	463c      	mov	r4, r7
 8004038:	687f      	ldr	r7, [r7, #4]
 800403a:	e7b6      	b.n	8003faa <_malloc_r+0x4a>
 800403c:	461a      	mov	r2, r3
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	42a3      	cmp	r3, r4
 8004042:	d1fb      	bne.n	800403c <_malloc_r+0xdc>
 8004044:	2300      	movs	r3, #0
 8004046:	6053      	str	r3, [r2, #4]
 8004048:	e7de      	b.n	8004008 <_malloc_r+0xa8>
 800404a:	230c      	movs	r3, #12
 800404c:	6033      	str	r3, [r6, #0]
 800404e:	4630      	mov	r0, r6
 8004050:	f000 f80c 	bl	800406c <__malloc_unlock>
 8004054:	e794      	b.n	8003f80 <_malloc_r+0x20>
 8004056:	6005      	str	r5, [r0, #0]
 8004058:	e7d6      	b.n	8004008 <_malloc_r+0xa8>
 800405a:	bf00      	nop
 800405c:	200002b4 	.word	0x200002b4

08004060 <__malloc_lock>:
 8004060:	4801      	ldr	r0, [pc, #4]	@ (8004068 <__malloc_lock+0x8>)
 8004062:	f7ff bf0f 	b.w	8003e84 <__retarget_lock_acquire_recursive>
 8004066:	bf00      	nop
 8004068:	200002ac 	.word	0x200002ac

0800406c <__malloc_unlock>:
 800406c:	4801      	ldr	r0, [pc, #4]	@ (8004074 <__malloc_unlock+0x8>)
 800406e:	f7ff bf0a 	b.w	8003e86 <__retarget_lock_release_recursive>
 8004072:	bf00      	nop
 8004074:	200002ac 	.word	0x200002ac

08004078 <__ssputs_r>:
 8004078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800407c:	688e      	ldr	r6, [r1, #8]
 800407e:	461f      	mov	r7, r3
 8004080:	42be      	cmp	r6, r7
 8004082:	680b      	ldr	r3, [r1, #0]
 8004084:	4682      	mov	sl, r0
 8004086:	460c      	mov	r4, r1
 8004088:	4690      	mov	r8, r2
 800408a:	d82d      	bhi.n	80040e8 <__ssputs_r+0x70>
 800408c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004090:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004094:	d026      	beq.n	80040e4 <__ssputs_r+0x6c>
 8004096:	6965      	ldr	r5, [r4, #20]
 8004098:	6909      	ldr	r1, [r1, #16]
 800409a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800409e:	eba3 0901 	sub.w	r9, r3, r1
 80040a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040a6:	1c7b      	adds	r3, r7, #1
 80040a8:	444b      	add	r3, r9
 80040aa:	106d      	asrs	r5, r5, #1
 80040ac:	429d      	cmp	r5, r3
 80040ae:	bf38      	it	cc
 80040b0:	461d      	movcc	r5, r3
 80040b2:	0553      	lsls	r3, r2, #21
 80040b4:	d527      	bpl.n	8004106 <__ssputs_r+0x8e>
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7ff ff52 	bl	8003f60 <_malloc_r>
 80040bc:	4606      	mov	r6, r0
 80040be:	b360      	cbz	r0, 800411a <__ssputs_r+0xa2>
 80040c0:	6921      	ldr	r1, [r4, #16]
 80040c2:	464a      	mov	r2, r9
 80040c4:	f000 fae8 	bl	8004698 <memcpy>
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040d2:	81a3      	strh	r3, [r4, #12]
 80040d4:	6126      	str	r6, [r4, #16]
 80040d6:	6165      	str	r5, [r4, #20]
 80040d8:	444e      	add	r6, r9
 80040da:	eba5 0509 	sub.w	r5, r5, r9
 80040de:	6026      	str	r6, [r4, #0]
 80040e0:	60a5      	str	r5, [r4, #8]
 80040e2:	463e      	mov	r6, r7
 80040e4:	42be      	cmp	r6, r7
 80040e6:	d900      	bls.n	80040ea <__ssputs_r+0x72>
 80040e8:	463e      	mov	r6, r7
 80040ea:	6820      	ldr	r0, [r4, #0]
 80040ec:	4632      	mov	r2, r6
 80040ee:	4641      	mov	r1, r8
 80040f0:	f000 faa8 	bl	8004644 <memmove>
 80040f4:	68a3      	ldr	r3, [r4, #8]
 80040f6:	1b9b      	subs	r3, r3, r6
 80040f8:	60a3      	str	r3, [r4, #8]
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	4433      	add	r3, r6
 80040fe:	6023      	str	r3, [r4, #0]
 8004100:	2000      	movs	r0, #0
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004106:	462a      	mov	r2, r5
 8004108:	f000 fad4 	bl	80046b4 <_realloc_r>
 800410c:	4606      	mov	r6, r0
 800410e:	2800      	cmp	r0, #0
 8004110:	d1e0      	bne.n	80040d4 <__ssputs_r+0x5c>
 8004112:	6921      	ldr	r1, [r4, #16]
 8004114:	4650      	mov	r0, sl
 8004116:	f7ff feb7 	bl	8003e88 <_free_r>
 800411a:	230c      	movs	r3, #12
 800411c:	f8ca 3000 	str.w	r3, [sl]
 8004120:	89a3      	ldrh	r3, [r4, #12]
 8004122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004126:	81a3      	strh	r3, [r4, #12]
 8004128:	f04f 30ff 	mov.w	r0, #4294967295
 800412c:	e7e9      	b.n	8004102 <__ssputs_r+0x8a>
	...

08004130 <_svfiprintf_r>:
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	4698      	mov	r8, r3
 8004136:	898b      	ldrh	r3, [r1, #12]
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	b09d      	sub	sp, #116	@ 0x74
 800413c:	4607      	mov	r7, r0
 800413e:	460d      	mov	r5, r1
 8004140:	4614      	mov	r4, r2
 8004142:	d510      	bpl.n	8004166 <_svfiprintf_r+0x36>
 8004144:	690b      	ldr	r3, [r1, #16]
 8004146:	b973      	cbnz	r3, 8004166 <_svfiprintf_r+0x36>
 8004148:	2140      	movs	r1, #64	@ 0x40
 800414a:	f7ff ff09 	bl	8003f60 <_malloc_r>
 800414e:	6028      	str	r0, [r5, #0]
 8004150:	6128      	str	r0, [r5, #16]
 8004152:	b930      	cbnz	r0, 8004162 <_svfiprintf_r+0x32>
 8004154:	230c      	movs	r3, #12
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	f04f 30ff 	mov.w	r0, #4294967295
 800415c:	b01d      	add	sp, #116	@ 0x74
 800415e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004162:	2340      	movs	r3, #64	@ 0x40
 8004164:	616b      	str	r3, [r5, #20]
 8004166:	2300      	movs	r3, #0
 8004168:	9309      	str	r3, [sp, #36]	@ 0x24
 800416a:	2320      	movs	r3, #32
 800416c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004170:	f8cd 800c 	str.w	r8, [sp, #12]
 8004174:	2330      	movs	r3, #48	@ 0x30
 8004176:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004314 <_svfiprintf_r+0x1e4>
 800417a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800417e:	f04f 0901 	mov.w	r9, #1
 8004182:	4623      	mov	r3, r4
 8004184:	469a      	mov	sl, r3
 8004186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800418a:	b10a      	cbz	r2, 8004190 <_svfiprintf_r+0x60>
 800418c:	2a25      	cmp	r2, #37	@ 0x25
 800418e:	d1f9      	bne.n	8004184 <_svfiprintf_r+0x54>
 8004190:	ebba 0b04 	subs.w	fp, sl, r4
 8004194:	d00b      	beq.n	80041ae <_svfiprintf_r+0x7e>
 8004196:	465b      	mov	r3, fp
 8004198:	4622      	mov	r2, r4
 800419a:	4629      	mov	r1, r5
 800419c:	4638      	mov	r0, r7
 800419e:	f7ff ff6b 	bl	8004078 <__ssputs_r>
 80041a2:	3001      	adds	r0, #1
 80041a4:	f000 80a7 	beq.w	80042f6 <_svfiprintf_r+0x1c6>
 80041a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041aa:	445a      	add	r2, fp
 80041ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80041ae:	f89a 3000 	ldrb.w	r3, [sl]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 809f 	beq.w	80042f6 <_svfiprintf_r+0x1c6>
 80041b8:	2300      	movs	r3, #0
 80041ba:	f04f 32ff 	mov.w	r2, #4294967295
 80041be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041c2:	f10a 0a01 	add.w	sl, sl, #1
 80041c6:	9304      	str	r3, [sp, #16]
 80041c8:	9307      	str	r3, [sp, #28]
 80041ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80041d0:	4654      	mov	r4, sl
 80041d2:	2205      	movs	r2, #5
 80041d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d8:	484e      	ldr	r0, [pc, #312]	@ (8004314 <_svfiprintf_r+0x1e4>)
 80041da:	f7fc f809 	bl	80001f0 <memchr>
 80041de:	9a04      	ldr	r2, [sp, #16]
 80041e0:	b9d8      	cbnz	r0, 800421a <_svfiprintf_r+0xea>
 80041e2:	06d0      	lsls	r0, r2, #27
 80041e4:	bf44      	itt	mi
 80041e6:	2320      	movmi	r3, #32
 80041e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041ec:	0711      	lsls	r1, r2, #28
 80041ee:	bf44      	itt	mi
 80041f0:	232b      	movmi	r3, #43	@ 0x2b
 80041f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041f6:	f89a 3000 	ldrb.w	r3, [sl]
 80041fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80041fc:	d015      	beq.n	800422a <_svfiprintf_r+0xfa>
 80041fe:	9a07      	ldr	r2, [sp, #28]
 8004200:	4654      	mov	r4, sl
 8004202:	2000      	movs	r0, #0
 8004204:	f04f 0c0a 	mov.w	ip, #10
 8004208:	4621      	mov	r1, r4
 800420a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800420e:	3b30      	subs	r3, #48	@ 0x30
 8004210:	2b09      	cmp	r3, #9
 8004212:	d94b      	bls.n	80042ac <_svfiprintf_r+0x17c>
 8004214:	b1b0      	cbz	r0, 8004244 <_svfiprintf_r+0x114>
 8004216:	9207      	str	r2, [sp, #28]
 8004218:	e014      	b.n	8004244 <_svfiprintf_r+0x114>
 800421a:	eba0 0308 	sub.w	r3, r0, r8
 800421e:	fa09 f303 	lsl.w	r3, r9, r3
 8004222:	4313      	orrs	r3, r2
 8004224:	9304      	str	r3, [sp, #16]
 8004226:	46a2      	mov	sl, r4
 8004228:	e7d2      	b.n	80041d0 <_svfiprintf_r+0xa0>
 800422a:	9b03      	ldr	r3, [sp, #12]
 800422c:	1d19      	adds	r1, r3, #4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	9103      	str	r1, [sp, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	bfbb      	ittet	lt
 8004236:	425b      	neglt	r3, r3
 8004238:	f042 0202 	orrlt.w	r2, r2, #2
 800423c:	9307      	strge	r3, [sp, #28]
 800423e:	9307      	strlt	r3, [sp, #28]
 8004240:	bfb8      	it	lt
 8004242:	9204      	strlt	r2, [sp, #16]
 8004244:	7823      	ldrb	r3, [r4, #0]
 8004246:	2b2e      	cmp	r3, #46	@ 0x2e
 8004248:	d10a      	bne.n	8004260 <_svfiprintf_r+0x130>
 800424a:	7863      	ldrb	r3, [r4, #1]
 800424c:	2b2a      	cmp	r3, #42	@ 0x2a
 800424e:	d132      	bne.n	80042b6 <_svfiprintf_r+0x186>
 8004250:	9b03      	ldr	r3, [sp, #12]
 8004252:	1d1a      	adds	r2, r3, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	9203      	str	r2, [sp, #12]
 8004258:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800425c:	3402      	adds	r4, #2
 800425e:	9305      	str	r3, [sp, #20]
 8004260:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004324 <_svfiprintf_r+0x1f4>
 8004264:	7821      	ldrb	r1, [r4, #0]
 8004266:	2203      	movs	r2, #3
 8004268:	4650      	mov	r0, sl
 800426a:	f7fb ffc1 	bl	80001f0 <memchr>
 800426e:	b138      	cbz	r0, 8004280 <_svfiprintf_r+0x150>
 8004270:	9b04      	ldr	r3, [sp, #16]
 8004272:	eba0 000a 	sub.w	r0, r0, sl
 8004276:	2240      	movs	r2, #64	@ 0x40
 8004278:	4082      	lsls	r2, r0
 800427a:	4313      	orrs	r3, r2
 800427c:	3401      	adds	r4, #1
 800427e:	9304      	str	r3, [sp, #16]
 8004280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004284:	4824      	ldr	r0, [pc, #144]	@ (8004318 <_svfiprintf_r+0x1e8>)
 8004286:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800428a:	2206      	movs	r2, #6
 800428c:	f7fb ffb0 	bl	80001f0 <memchr>
 8004290:	2800      	cmp	r0, #0
 8004292:	d036      	beq.n	8004302 <_svfiprintf_r+0x1d2>
 8004294:	4b21      	ldr	r3, [pc, #132]	@ (800431c <_svfiprintf_r+0x1ec>)
 8004296:	bb1b      	cbnz	r3, 80042e0 <_svfiprintf_r+0x1b0>
 8004298:	9b03      	ldr	r3, [sp, #12]
 800429a:	3307      	adds	r3, #7
 800429c:	f023 0307 	bic.w	r3, r3, #7
 80042a0:	3308      	adds	r3, #8
 80042a2:	9303      	str	r3, [sp, #12]
 80042a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042a6:	4433      	add	r3, r6
 80042a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042aa:	e76a      	b.n	8004182 <_svfiprintf_r+0x52>
 80042ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80042b0:	460c      	mov	r4, r1
 80042b2:	2001      	movs	r0, #1
 80042b4:	e7a8      	b.n	8004208 <_svfiprintf_r+0xd8>
 80042b6:	2300      	movs	r3, #0
 80042b8:	3401      	adds	r4, #1
 80042ba:	9305      	str	r3, [sp, #20]
 80042bc:	4619      	mov	r1, r3
 80042be:	f04f 0c0a 	mov.w	ip, #10
 80042c2:	4620      	mov	r0, r4
 80042c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042c8:	3a30      	subs	r2, #48	@ 0x30
 80042ca:	2a09      	cmp	r2, #9
 80042cc:	d903      	bls.n	80042d6 <_svfiprintf_r+0x1a6>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0c6      	beq.n	8004260 <_svfiprintf_r+0x130>
 80042d2:	9105      	str	r1, [sp, #20]
 80042d4:	e7c4      	b.n	8004260 <_svfiprintf_r+0x130>
 80042d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80042da:	4604      	mov	r4, r0
 80042dc:	2301      	movs	r3, #1
 80042de:	e7f0      	b.n	80042c2 <_svfiprintf_r+0x192>
 80042e0:	ab03      	add	r3, sp, #12
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	462a      	mov	r2, r5
 80042e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004320 <_svfiprintf_r+0x1f0>)
 80042e8:	a904      	add	r1, sp, #16
 80042ea:	4638      	mov	r0, r7
 80042ec:	f3af 8000 	nop.w
 80042f0:	1c42      	adds	r2, r0, #1
 80042f2:	4606      	mov	r6, r0
 80042f4:	d1d6      	bne.n	80042a4 <_svfiprintf_r+0x174>
 80042f6:	89ab      	ldrh	r3, [r5, #12]
 80042f8:	065b      	lsls	r3, r3, #25
 80042fa:	f53f af2d 	bmi.w	8004158 <_svfiprintf_r+0x28>
 80042fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004300:	e72c      	b.n	800415c <_svfiprintf_r+0x2c>
 8004302:	ab03      	add	r3, sp, #12
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	462a      	mov	r2, r5
 8004308:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <_svfiprintf_r+0x1f0>)
 800430a:	a904      	add	r1, sp, #16
 800430c:	4638      	mov	r0, r7
 800430e:	f000 f879 	bl	8004404 <_printf_i>
 8004312:	e7ed      	b.n	80042f0 <_svfiprintf_r+0x1c0>
 8004314:	080047a4 	.word	0x080047a4
 8004318:	080047ae 	.word	0x080047ae
 800431c:	00000000 	.word	0x00000000
 8004320:	08004079 	.word	0x08004079
 8004324:	080047aa 	.word	0x080047aa

08004328 <_printf_common>:
 8004328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800432c:	4616      	mov	r6, r2
 800432e:	4698      	mov	r8, r3
 8004330:	688a      	ldr	r2, [r1, #8]
 8004332:	690b      	ldr	r3, [r1, #16]
 8004334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004338:	4293      	cmp	r3, r2
 800433a:	bfb8      	it	lt
 800433c:	4613      	movlt	r3, r2
 800433e:	6033      	str	r3, [r6, #0]
 8004340:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004344:	4607      	mov	r7, r0
 8004346:	460c      	mov	r4, r1
 8004348:	b10a      	cbz	r2, 800434e <_printf_common+0x26>
 800434a:	3301      	adds	r3, #1
 800434c:	6033      	str	r3, [r6, #0]
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	0699      	lsls	r1, r3, #26
 8004352:	bf42      	ittt	mi
 8004354:	6833      	ldrmi	r3, [r6, #0]
 8004356:	3302      	addmi	r3, #2
 8004358:	6033      	strmi	r3, [r6, #0]
 800435a:	6825      	ldr	r5, [r4, #0]
 800435c:	f015 0506 	ands.w	r5, r5, #6
 8004360:	d106      	bne.n	8004370 <_printf_common+0x48>
 8004362:	f104 0a19 	add.w	sl, r4, #25
 8004366:	68e3      	ldr	r3, [r4, #12]
 8004368:	6832      	ldr	r2, [r6, #0]
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	42ab      	cmp	r3, r5
 800436e:	dc26      	bgt.n	80043be <_printf_common+0x96>
 8004370:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004374:	6822      	ldr	r2, [r4, #0]
 8004376:	3b00      	subs	r3, #0
 8004378:	bf18      	it	ne
 800437a:	2301      	movne	r3, #1
 800437c:	0692      	lsls	r2, r2, #26
 800437e:	d42b      	bmi.n	80043d8 <_printf_common+0xb0>
 8004380:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004384:	4641      	mov	r1, r8
 8004386:	4638      	mov	r0, r7
 8004388:	47c8      	blx	r9
 800438a:	3001      	adds	r0, #1
 800438c:	d01e      	beq.n	80043cc <_printf_common+0xa4>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	6922      	ldr	r2, [r4, #16]
 8004392:	f003 0306 	and.w	r3, r3, #6
 8004396:	2b04      	cmp	r3, #4
 8004398:	bf02      	ittt	eq
 800439a:	68e5      	ldreq	r5, [r4, #12]
 800439c:	6833      	ldreq	r3, [r6, #0]
 800439e:	1aed      	subeq	r5, r5, r3
 80043a0:	68a3      	ldr	r3, [r4, #8]
 80043a2:	bf0c      	ite	eq
 80043a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043a8:	2500      	movne	r5, #0
 80043aa:	4293      	cmp	r3, r2
 80043ac:	bfc4      	itt	gt
 80043ae:	1a9b      	subgt	r3, r3, r2
 80043b0:	18ed      	addgt	r5, r5, r3
 80043b2:	2600      	movs	r6, #0
 80043b4:	341a      	adds	r4, #26
 80043b6:	42b5      	cmp	r5, r6
 80043b8:	d11a      	bne.n	80043f0 <_printf_common+0xc8>
 80043ba:	2000      	movs	r0, #0
 80043bc:	e008      	b.n	80043d0 <_printf_common+0xa8>
 80043be:	2301      	movs	r3, #1
 80043c0:	4652      	mov	r2, sl
 80043c2:	4641      	mov	r1, r8
 80043c4:	4638      	mov	r0, r7
 80043c6:	47c8      	blx	r9
 80043c8:	3001      	adds	r0, #1
 80043ca:	d103      	bne.n	80043d4 <_printf_common+0xac>
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d4:	3501      	adds	r5, #1
 80043d6:	e7c6      	b.n	8004366 <_printf_common+0x3e>
 80043d8:	18e1      	adds	r1, r4, r3
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	2030      	movs	r0, #48	@ 0x30
 80043de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043e2:	4422      	add	r2, r4
 80043e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043ec:	3302      	adds	r3, #2
 80043ee:	e7c7      	b.n	8004380 <_printf_common+0x58>
 80043f0:	2301      	movs	r3, #1
 80043f2:	4622      	mov	r2, r4
 80043f4:	4641      	mov	r1, r8
 80043f6:	4638      	mov	r0, r7
 80043f8:	47c8      	blx	r9
 80043fa:	3001      	adds	r0, #1
 80043fc:	d0e6      	beq.n	80043cc <_printf_common+0xa4>
 80043fe:	3601      	adds	r6, #1
 8004400:	e7d9      	b.n	80043b6 <_printf_common+0x8e>
	...

08004404 <_printf_i>:
 8004404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004408:	7e0f      	ldrb	r7, [r1, #24]
 800440a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800440c:	2f78      	cmp	r7, #120	@ 0x78
 800440e:	4691      	mov	r9, r2
 8004410:	4680      	mov	r8, r0
 8004412:	460c      	mov	r4, r1
 8004414:	469a      	mov	sl, r3
 8004416:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800441a:	d807      	bhi.n	800442c <_printf_i+0x28>
 800441c:	2f62      	cmp	r7, #98	@ 0x62
 800441e:	d80a      	bhi.n	8004436 <_printf_i+0x32>
 8004420:	2f00      	cmp	r7, #0
 8004422:	f000 80d2 	beq.w	80045ca <_printf_i+0x1c6>
 8004426:	2f58      	cmp	r7, #88	@ 0x58
 8004428:	f000 80b9 	beq.w	800459e <_printf_i+0x19a>
 800442c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004430:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004434:	e03a      	b.n	80044ac <_printf_i+0xa8>
 8004436:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800443a:	2b15      	cmp	r3, #21
 800443c:	d8f6      	bhi.n	800442c <_printf_i+0x28>
 800443e:	a101      	add	r1, pc, #4	@ (adr r1, 8004444 <_printf_i+0x40>)
 8004440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004444:	0800449d 	.word	0x0800449d
 8004448:	080044b1 	.word	0x080044b1
 800444c:	0800442d 	.word	0x0800442d
 8004450:	0800442d 	.word	0x0800442d
 8004454:	0800442d 	.word	0x0800442d
 8004458:	0800442d 	.word	0x0800442d
 800445c:	080044b1 	.word	0x080044b1
 8004460:	0800442d 	.word	0x0800442d
 8004464:	0800442d 	.word	0x0800442d
 8004468:	0800442d 	.word	0x0800442d
 800446c:	0800442d 	.word	0x0800442d
 8004470:	080045b1 	.word	0x080045b1
 8004474:	080044db 	.word	0x080044db
 8004478:	0800456b 	.word	0x0800456b
 800447c:	0800442d 	.word	0x0800442d
 8004480:	0800442d 	.word	0x0800442d
 8004484:	080045d3 	.word	0x080045d3
 8004488:	0800442d 	.word	0x0800442d
 800448c:	080044db 	.word	0x080044db
 8004490:	0800442d 	.word	0x0800442d
 8004494:	0800442d 	.word	0x0800442d
 8004498:	08004573 	.word	0x08004573
 800449c:	6833      	ldr	r3, [r6, #0]
 800449e:	1d1a      	adds	r2, r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6032      	str	r2, [r6, #0]
 80044a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044ac:	2301      	movs	r3, #1
 80044ae:	e09d      	b.n	80045ec <_printf_i+0x1e8>
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	6820      	ldr	r0, [r4, #0]
 80044b4:	1d19      	adds	r1, r3, #4
 80044b6:	6031      	str	r1, [r6, #0]
 80044b8:	0606      	lsls	r6, r0, #24
 80044ba:	d501      	bpl.n	80044c0 <_printf_i+0xbc>
 80044bc:	681d      	ldr	r5, [r3, #0]
 80044be:	e003      	b.n	80044c8 <_printf_i+0xc4>
 80044c0:	0645      	lsls	r5, r0, #25
 80044c2:	d5fb      	bpl.n	80044bc <_printf_i+0xb8>
 80044c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044c8:	2d00      	cmp	r5, #0
 80044ca:	da03      	bge.n	80044d4 <_printf_i+0xd0>
 80044cc:	232d      	movs	r3, #45	@ 0x2d
 80044ce:	426d      	negs	r5, r5
 80044d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044d4:	4859      	ldr	r0, [pc, #356]	@ (800463c <_printf_i+0x238>)
 80044d6:	230a      	movs	r3, #10
 80044d8:	e011      	b.n	80044fe <_printf_i+0xfa>
 80044da:	6821      	ldr	r1, [r4, #0]
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	0608      	lsls	r0, r1, #24
 80044e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80044e4:	d402      	bmi.n	80044ec <_printf_i+0xe8>
 80044e6:	0649      	lsls	r1, r1, #25
 80044e8:	bf48      	it	mi
 80044ea:	b2ad      	uxthmi	r5, r5
 80044ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80044ee:	4853      	ldr	r0, [pc, #332]	@ (800463c <_printf_i+0x238>)
 80044f0:	6033      	str	r3, [r6, #0]
 80044f2:	bf14      	ite	ne
 80044f4:	230a      	movne	r3, #10
 80044f6:	2308      	moveq	r3, #8
 80044f8:	2100      	movs	r1, #0
 80044fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044fe:	6866      	ldr	r6, [r4, #4]
 8004500:	60a6      	str	r6, [r4, #8]
 8004502:	2e00      	cmp	r6, #0
 8004504:	bfa2      	ittt	ge
 8004506:	6821      	ldrge	r1, [r4, #0]
 8004508:	f021 0104 	bicge.w	r1, r1, #4
 800450c:	6021      	strge	r1, [r4, #0]
 800450e:	b90d      	cbnz	r5, 8004514 <_printf_i+0x110>
 8004510:	2e00      	cmp	r6, #0
 8004512:	d04b      	beq.n	80045ac <_printf_i+0x1a8>
 8004514:	4616      	mov	r6, r2
 8004516:	fbb5 f1f3 	udiv	r1, r5, r3
 800451a:	fb03 5711 	mls	r7, r3, r1, r5
 800451e:	5dc7      	ldrb	r7, [r0, r7]
 8004520:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004524:	462f      	mov	r7, r5
 8004526:	42bb      	cmp	r3, r7
 8004528:	460d      	mov	r5, r1
 800452a:	d9f4      	bls.n	8004516 <_printf_i+0x112>
 800452c:	2b08      	cmp	r3, #8
 800452e:	d10b      	bne.n	8004548 <_printf_i+0x144>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	07df      	lsls	r7, r3, #31
 8004534:	d508      	bpl.n	8004548 <_printf_i+0x144>
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	6861      	ldr	r1, [r4, #4]
 800453a:	4299      	cmp	r1, r3
 800453c:	bfde      	ittt	le
 800453e:	2330      	movle	r3, #48	@ 0x30
 8004540:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004544:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004548:	1b92      	subs	r2, r2, r6
 800454a:	6122      	str	r2, [r4, #16]
 800454c:	f8cd a000 	str.w	sl, [sp]
 8004550:	464b      	mov	r3, r9
 8004552:	aa03      	add	r2, sp, #12
 8004554:	4621      	mov	r1, r4
 8004556:	4640      	mov	r0, r8
 8004558:	f7ff fee6 	bl	8004328 <_printf_common>
 800455c:	3001      	adds	r0, #1
 800455e:	d14a      	bne.n	80045f6 <_printf_i+0x1f2>
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	b004      	add	sp, #16
 8004566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	f043 0320 	orr.w	r3, r3, #32
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	4833      	ldr	r0, [pc, #204]	@ (8004640 <_printf_i+0x23c>)
 8004574:	2778      	movs	r7, #120	@ 0x78
 8004576:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	6831      	ldr	r1, [r6, #0]
 800457e:	061f      	lsls	r7, r3, #24
 8004580:	f851 5b04 	ldr.w	r5, [r1], #4
 8004584:	d402      	bmi.n	800458c <_printf_i+0x188>
 8004586:	065f      	lsls	r7, r3, #25
 8004588:	bf48      	it	mi
 800458a:	b2ad      	uxthmi	r5, r5
 800458c:	6031      	str	r1, [r6, #0]
 800458e:	07d9      	lsls	r1, r3, #31
 8004590:	bf44      	itt	mi
 8004592:	f043 0320 	orrmi.w	r3, r3, #32
 8004596:	6023      	strmi	r3, [r4, #0]
 8004598:	b11d      	cbz	r5, 80045a2 <_printf_i+0x19e>
 800459a:	2310      	movs	r3, #16
 800459c:	e7ac      	b.n	80044f8 <_printf_i+0xf4>
 800459e:	4827      	ldr	r0, [pc, #156]	@ (800463c <_printf_i+0x238>)
 80045a0:	e7e9      	b.n	8004576 <_printf_i+0x172>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	f023 0320 	bic.w	r3, r3, #32
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	e7f6      	b.n	800459a <_printf_i+0x196>
 80045ac:	4616      	mov	r6, r2
 80045ae:	e7bd      	b.n	800452c <_printf_i+0x128>
 80045b0:	6833      	ldr	r3, [r6, #0]
 80045b2:	6825      	ldr	r5, [r4, #0]
 80045b4:	6961      	ldr	r1, [r4, #20]
 80045b6:	1d18      	adds	r0, r3, #4
 80045b8:	6030      	str	r0, [r6, #0]
 80045ba:	062e      	lsls	r6, r5, #24
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	d501      	bpl.n	80045c4 <_printf_i+0x1c0>
 80045c0:	6019      	str	r1, [r3, #0]
 80045c2:	e002      	b.n	80045ca <_printf_i+0x1c6>
 80045c4:	0668      	lsls	r0, r5, #25
 80045c6:	d5fb      	bpl.n	80045c0 <_printf_i+0x1bc>
 80045c8:	8019      	strh	r1, [r3, #0]
 80045ca:	2300      	movs	r3, #0
 80045cc:	6123      	str	r3, [r4, #16]
 80045ce:	4616      	mov	r6, r2
 80045d0:	e7bc      	b.n	800454c <_printf_i+0x148>
 80045d2:	6833      	ldr	r3, [r6, #0]
 80045d4:	1d1a      	adds	r2, r3, #4
 80045d6:	6032      	str	r2, [r6, #0]
 80045d8:	681e      	ldr	r6, [r3, #0]
 80045da:	6862      	ldr	r2, [r4, #4]
 80045dc:	2100      	movs	r1, #0
 80045de:	4630      	mov	r0, r6
 80045e0:	f7fb fe06 	bl	80001f0 <memchr>
 80045e4:	b108      	cbz	r0, 80045ea <_printf_i+0x1e6>
 80045e6:	1b80      	subs	r0, r0, r6
 80045e8:	6060      	str	r0, [r4, #4]
 80045ea:	6863      	ldr	r3, [r4, #4]
 80045ec:	6123      	str	r3, [r4, #16]
 80045ee:	2300      	movs	r3, #0
 80045f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045f4:	e7aa      	b.n	800454c <_printf_i+0x148>
 80045f6:	6923      	ldr	r3, [r4, #16]
 80045f8:	4632      	mov	r2, r6
 80045fa:	4649      	mov	r1, r9
 80045fc:	4640      	mov	r0, r8
 80045fe:	47d0      	blx	sl
 8004600:	3001      	adds	r0, #1
 8004602:	d0ad      	beq.n	8004560 <_printf_i+0x15c>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	079b      	lsls	r3, r3, #30
 8004608:	d413      	bmi.n	8004632 <_printf_i+0x22e>
 800460a:	68e0      	ldr	r0, [r4, #12]
 800460c:	9b03      	ldr	r3, [sp, #12]
 800460e:	4298      	cmp	r0, r3
 8004610:	bfb8      	it	lt
 8004612:	4618      	movlt	r0, r3
 8004614:	e7a6      	b.n	8004564 <_printf_i+0x160>
 8004616:	2301      	movs	r3, #1
 8004618:	4632      	mov	r2, r6
 800461a:	4649      	mov	r1, r9
 800461c:	4640      	mov	r0, r8
 800461e:	47d0      	blx	sl
 8004620:	3001      	adds	r0, #1
 8004622:	d09d      	beq.n	8004560 <_printf_i+0x15c>
 8004624:	3501      	adds	r5, #1
 8004626:	68e3      	ldr	r3, [r4, #12]
 8004628:	9903      	ldr	r1, [sp, #12]
 800462a:	1a5b      	subs	r3, r3, r1
 800462c:	42ab      	cmp	r3, r5
 800462e:	dcf2      	bgt.n	8004616 <_printf_i+0x212>
 8004630:	e7eb      	b.n	800460a <_printf_i+0x206>
 8004632:	2500      	movs	r5, #0
 8004634:	f104 0619 	add.w	r6, r4, #25
 8004638:	e7f5      	b.n	8004626 <_printf_i+0x222>
 800463a:	bf00      	nop
 800463c:	080047b5 	.word	0x080047b5
 8004640:	080047c6 	.word	0x080047c6

08004644 <memmove>:
 8004644:	4288      	cmp	r0, r1
 8004646:	b510      	push	{r4, lr}
 8004648:	eb01 0402 	add.w	r4, r1, r2
 800464c:	d902      	bls.n	8004654 <memmove+0x10>
 800464e:	4284      	cmp	r4, r0
 8004650:	4623      	mov	r3, r4
 8004652:	d807      	bhi.n	8004664 <memmove+0x20>
 8004654:	1e43      	subs	r3, r0, #1
 8004656:	42a1      	cmp	r1, r4
 8004658:	d008      	beq.n	800466c <memmove+0x28>
 800465a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800465e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004662:	e7f8      	b.n	8004656 <memmove+0x12>
 8004664:	4402      	add	r2, r0
 8004666:	4601      	mov	r1, r0
 8004668:	428a      	cmp	r2, r1
 800466a:	d100      	bne.n	800466e <memmove+0x2a>
 800466c:	bd10      	pop	{r4, pc}
 800466e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004676:	e7f7      	b.n	8004668 <memmove+0x24>

08004678 <_sbrk_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4d06      	ldr	r5, [pc, #24]	@ (8004694 <_sbrk_r+0x1c>)
 800467c:	2300      	movs	r3, #0
 800467e:	4604      	mov	r4, r0
 8004680:	4608      	mov	r0, r1
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	f7fc fdda 	bl	800123c <_sbrk>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_sbrk_r+0x1a>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	b103      	cbz	r3, 8004692 <_sbrk_r+0x1a>
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	200002a8 	.word	0x200002a8

08004698 <memcpy>:
 8004698:	440a      	add	r2, r1
 800469a:	4291      	cmp	r1, r2
 800469c:	f100 33ff 	add.w	r3, r0, #4294967295
 80046a0:	d100      	bne.n	80046a4 <memcpy+0xc>
 80046a2:	4770      	bx	lr
 80046a4:	b510      	push	{r4, lr}
 80046a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ae:	4291      	cmp	r1, r2
 80046b0:	d1f9      	bne.n	80046a6 <memcpy+0xe>
 80046b2:	bd10      	pop	{r4, pc}

080046b4 <_realloc_r>:
 80046b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b8:	4680      	mov	r8, r0
 80046ba:	4615      	mov	r5, r2
 80046bc:	460c      	mov	r4, r1
 80046be:	b921      	cbnz	r1, 80046ca <_realloc_r+0x16>
 80046c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046c4:	4611      	mov	r1, r2
 80046c6:	f7ff bc4b 	b.w	8003f60 <_malloc_r>
 80046ca:	b92a      	cbnz	r2, 80046d8 <_realloc_r+0x24>
 80046cc:	f7ff fbdc 	bl	8003e88 <_free_r>
 80046d0:	2400      	movs	r4, #0
 80046d2:	4620      	mov	r0, r4
 80046d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d8:	f000 f81a 	bl	8004710 <_malloc_usable_size_r>
 80046dc:	4285      	cmp	r5, r0
 80046de:	4606      	mov	r6, r0
 80046e0:	d802      	bhi.n	80046e8 <_realloc_r+0x34>
 80046e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046e6:	d8f4      	bhi.n	80046d2 <_realloc_r+0x1e>
 80046e8:	4629      	mov	r1, r5
 80046ea:	4640      	mov	r0, r8
 80046ec:	f7ff fc38 	bl	8003f60 <_malloc_r>
 80046f0:	4607      	mov	r7, r0
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d0ec      	beq.n	80046d0 <_realloc_r+0x1c>
 80046f6:	42b5      	cmp	r5, r6
 80046f8:	462a      	mov	r2, r5
 80046fa:	4621      	mov	r1, r4
 80046fc:	bf28      	it	cs
 80046fe:	4632      	movcs	r2, r6
 8004700:	f7ff ffca 	bl	8004698 <memcpy>
 8004704:	4621      	mov	r1, r4
 8004706:	4640      	mov	r0, r8
 8004708:	f7ff fbbe 	bl	8003e88 <_free_r>
 800470c:	463c      	mov	r4, r7
 800470e:	e7e0      	b.n	80046d2 <_realloc_r+0x1e>

08004710 <_malloc_usable_size_r>:
 8004710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004714:	1f18      	subs	r0, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	bfbc      	itt	lt
 800471a:	580b      	ldrlt	r3, [r1, r0]
 800471c:	18c0      	addlt	r0, r0, r3
 800471e:	4770      	bx	lr

08004720 <_init>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr

0800472c <_fini>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr
